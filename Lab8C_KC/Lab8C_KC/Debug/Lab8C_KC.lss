
Lab8C_KC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000612  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00802000  00000612  000006a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001084  0080201c  0080201c  000006c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006c2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000006f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000095b  00000000  00000000  00000772  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000022f  00000000  00000000  000010cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000515  00000000  00000000  000012fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  00001814  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000069e  00000000  00000000  00001994  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002f6  00000000  00000000  00002032  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00002328  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	1f c1       	rjmp	.+574    	; 0x244 <__bad_interrupt>
   6:	00 00       	nop
   8:	1d c1       	rjmp	.+570    	; 0x244 <__bad_interrupt>
   a:	00 00       	nop
   c:	1b c1       	rjmp	.+566    	; 0x244 <__bad_interrupt>
   e:	00 00       	nop
  10:	19 c1       	rjmp	.+562    	; 0x244 <__bad_interrupt>
  12:	00 00       	nop
  14:	17 c1       	rjmp	.+558    	; 0x244 <__bad_interrupt>
  16:	00 00       	nop
  18:	15 c1       	rjmp	.+554    	; 0x244 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	13 c1       	rjmp	.+550    	; 0x244 <__bad_interrupt>
  1e:	00 00       	nop
  20:	11 c1       	rjmp	.+546    	; 0x244 <__bad_interrupt>
  22:	00 00       	nop
  24:	0f c1       	rjmp	.+542    	; 0x244 <__bad_interrupt>
  26:	00 00       	nop
  28:	0d c1       	rjmp	.+538    	; 0x244 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	0b c1       	rjmp	.+534    	; 0x244 <__bad_interrupt>
  2e:	00 00       	nop
  30:	09 c1       	rjmp	.+530    	; 0x244 <__bad_interrupt>
  32:	00 00       	nop
  34:	07 c1       	rjmp	.+526    	; 0x244 <__bad_interrupt>
  36:	00 00       	nop
  38:	05 c1       	rjmp	.+522    	; 0x244 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	03 c1       	rjmp	.+518    	; 0x244 <__bad_interrupt>
  3e:	00 00       	nop
  40:	01 c1       	rjmp	.+514    	; 0x244 <__bad_interrupt>
  42:	00 00       	nop
  44:	ff c0       	rjmp	.+510    	; 0x244 <__bad_interrupt>
  46:	00 00       	nop
  48:	fd c0       	rjmp	.+506    	; 0x244 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	fb c0       	rjmp	.+502    	; 0x244 <__bad_interrupt>
  4e:	00 00       	nop
  50:	f9 c0       	rjmp	.+498    	; 0x244 <__bad_interrupt>
  52:	00 00       	nop
  54:	f7 c0       	rjmp	.+494    	; 0x244 <__bad_interrupt>
  56:	00 00       	nop
  58:	f5 c0       	rjmp	.+490    	; 0x244 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	f3 c0       	rjmp	.+486    	; 0x244 <__bad_interrupt>
  5e:	00 00       	nop
  60:	f1 c0       	rjmp	.+482    	; 0x244 <__bad_interrupt>
  62:	00 00       	nop
  64:	ef c0       	rjmp	.+478    	; 0x244 <__bad_interrupt>
  66:	00 00       	nop
  68:	ed c0       	rjmp	.+474    	; 0x244 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	eb c0       	rjmp	.+470    	; 0x244 <__bad_interrupt>
  6e:	00 00       	nop
  70:	e9 c0       	rjmp	.+466    	; 0x244 <__bad_interrupt>
  72:	00 00       	nop
  74:	e7 c0       	rjmp	.+462    	; 0x244 <__bad_interrupt>
  76:	00 00       	nop
  78:	e5 c0       	rjmp	.+458    	; 0x244 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	e3 c0       	rjmp	.+454    	; 0x244 <__bad_interrupt>
  7e:	00 00       	nop
  80:	e1 c0       	rjmp	.+450    	; 0x244 <__bad_interrupt>
  82:	00 00       	nop
  84:	df c0       	rjmp	.+446    	; 0x244 <__bad_interrupt>
  86:	00 00       	nop
  88:	dd c0       	rjmp	.+442    	; 0x244 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	db c0       	rjmp	.+438    	; 0x244 <__bad_interrupt>
  8e:	00 00       	nop
  90:	d9 c0       	rjmp	.+434    	; 0x244 <__bad_interrupt>
  92:	00 00       	nop
  94:	d7 c0       	rjmp	.+430    	; 0x244 <__bad_interrupt>
  96:	00 00       	nop
  98:	d5 c0       	rjmp	.+426    	; 0x244 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	d3 c0       	rjmp	.+422    	; 0x244 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	d1 c0       	rjmp	.+418    	; 0x244 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	cf c0       	rjmp	.+414    	; 0x244 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	cd c0       	rjmp	.+410    	; 0x244 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	cb c0       	rjmp	.+406    	; 0x244 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c9 c0       	rjmp	.+402    	; 0x244 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c7 c0       	rjmp	.+398    	; 0x244 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	c5 c0       	rjmp	.+394    	; 0x244 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	c3 c0       	rjmp	.+390    	; 0x244 <__bad_interrupt>
  be:	00 00       	nop
  c0:	c1 c0       	rjmp	.+386    	; 0x244 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	42 c2       	rjmp	.+1156   	; 0x54a <__vector_49>
  c6:	00 00       	nop
  c8:	bd c0       	rjmp	.+378    	; 0x244 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	bb c0       	rjmp	.+374    	; 0x244 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b9 c0       	rjmp	.+370    	; 0x244 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	0d c2       	rjmp	.+1050   	; 0x4f0 <__vector_53>
  d6:	00 00       	nop
  d8:	b5 c0       	rjmp	.+362    	; 0x244 <__bad_interrupt>
  da:	00 00       	nop
  dc:	b3 c0       	rjmp	.+358    	; 0x244 <__bad_interrupt>
  de:	00 00       	nop
  e0:	b1 c0       	rjmp	.+354    	; 0x244 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	af c0       	rjmp	.+350    	; 0x244 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	ad c0       	rjmp	.+346    	; 0x244 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	ab c0       	rjmp	.+342    	; 0x244 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a9 c0       	rjmp	.+338    	; 0x244 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a7 c0       	rjmp	.+334    	; 0x244 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a5 c0       	rjmp	.+330    	; 0x244 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	a3 c0       	rjmp	.+326    	; 0x244 <__bad_interrupt>
  fe:	00 00       	nop
 100:	a1 c0       	rjmp	.+322    	; 0x244 <__bad_interrupt>
 102:	00 00       	nop
 104:	9f c0       	rjmp	.+318    	; 0x244 <__bad_interrupt>
 106:	00 00       	nop
 108:	9d c0       	rjmp	.+314    	; 0x244 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	9b c0       	rjmp	.+310    	; 0x244 <__bad_interrupt>
 10e:	00 00       	nop
 110:	99 c0       	rjmp	.+306    	; 0x244 <__bad_interrupt>
 112:	00 00       	nop
 114:	97 c0       	rjmp	.+302    	; 0x244 <__bad_interrupt>
 116:	00 00       	nop
 118:	95 c0       	rjmp	.+298    	; 0x244 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	93 c0       	rjmp	.+294    	; 0x244 <__bad_interrupt>
 11e:	00 00       	nop
 120:	91 c0       	rjmp	.+290    	; 0x244 <__bad_interrupt>
 122:	00 00       	nop
 124:	8f c0       	rjmp	.+286    	; 0x244 <__bad_interrupt>
 126:	00 00       	nop
 128:	8d c0       	rjmp	.+282    	; 0x244 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	8b c0       	rjmp	.+278    	; 0x244 <__bad_interrupt>
 12e:	00 00       	nop
 130:	89 c0       	rjmp	.+274    	; 0x244 <__bad_interrupt>
 132:	00 00       	nop
 134:	87 c0       	rjmp	.+270    	; 0x244 <__bad_interrupt>
 136:	00 00       	nop
 138:	85 c0       	rjmp	.+266    	; 0x244 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	83 c0       	rjmp	.+262    	; 0x244 <__bad_interrupt>
 13e:	00 00       	nop
 140:	81 c0       	rjmp	.+258    	; 0x244 <__bad_interrupt>
 142:	00 00       	nop
 144:	7f c0       	rjmp	.+254    	; 0x244 <__bad_interrupt>
 146:	00 00       	nop
 148:	7d c0       	rjmp	.+250    	; 0x244 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	7b c0       	rjmp	.+246    	; 0x244 <__bad_interrupt>
 14e:	00 00       	nop
 150:	79 c0       	rjmp	.+242    	; 0x244 <__bad_interrupt>
 152:	00 00       	nop
 154:	77 c0       	rjmp	.+238    	; 0x244 <__bad_interrupt>
 156:	00 00       	nop
 158:	75 c0       	rjmp	.+234    	; 0x244 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	73 c0       	rjmp	.+230    	; 0x244 <__bad_interrupt>
 15e:	00 00       	nop
 160:	71 c0       	rjmp	.+226    	; 0x244 <__bad_interrupt>
 162:	00 00       	nop
 164:	6f c0       	rjmp	.+222    	; 0x244 <__bad_interrupt>
 166:	00 00       	nop
 168:	6d c0       	rjmp	.+218    	; 0x244 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	6b c0       	rjmp	.+214    	; 0x244 <__bad_interrupt>
 16e:	00 00       	nop
 170:	69 c0       	rjmp	.+210    	; 0x244 <__bad_interrupt>
 172:	00 00       	nop
 174:	67 c0       	rjmp	.+206    	; 0x244 <__bad_interrupt>
 176:	00 00       	nop
 178:	65 c0       	rjmp	.+202    	; 0x244 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	63 c0       	rjmp	.+198    	; 0x244 <__bad_interrupt>
 17e:	00 00       	nop
 180:	61 c0       	rjmp	.+194    	; 0x244 <__bad_interrupt>
 182:	00 00       	nop
 184:	5f c0       	rjmp	.+190    	; 0x244 <__bad_interrupt>
 186:	00 00       	nop
 188:	5d c0       	rjmp	.+186    	; 0x244 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	5b c0       	rjmp	.+182    	; 0x244 <__bad_interrupt>
 18e:	00 00       	nop
 190:	59 c0       	rjmp	.+178    	; 0x244 <__bad_interrupt>
 192:	00 00       	nop
 194:	57 c0       	rjmp	.+174    	; 0x244 <__bad_interrupt>
 196:	00 00       	nop
 198:	55 c0       	rjmp	.+170    	; 0x244 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	53 c0       	rjmp	.+166    	; 0x244 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	51 c0       	rjmp	.+162    	; 0x244 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	4f c0       	rjmp	.+158    	; 0x244 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	4d c0       	rjmp	.+154    	; 0x244 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	4b c0       	rjmp	.+150    	; 0x244 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	49 c0       	rjmp	.+146    	; 0x244 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	47 c0       	rjmp	.+142    	; 0x244 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	45 c0       	rjmp	.+138    	; 0x244 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	43 c0       	rjmp	.+134    	; 0x244 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	41 c0       	rjmp	.+130    	; 0x244 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	3f c0       	rjmp	.+126    	; 0x244 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	0a c2       	rjmp	.+1044   	; 0x5de <__vector_114>
 1ca:	00 00       	nop
 1cc:	3b c0       	rjmp	.+118    	; 0x244 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	39 c0       	rjmp	.+114    	; 0x244 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	37 c0       	rjmp	.+110    	; 0x244 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	35 c0       	rjmp	.+106    	; 0x244 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	33 c0       	rjmp	.+102    	; 0x244 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	31 c0       	rjmp	.+98     	; 0x244 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	2f c0       	rjmp	.+94     	; 0x244 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	2d c0       	rjmp	.+90     	; 0x244 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	2b c0       	rjmp	.+86     	; 0x244 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	29 c0       	rjmp	.+82     	; 0x244 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	27 c0       	rjmp	.+78     	; 0x244 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	25 c0       	rjmp	.+74     	; 0x244 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	e2 e1       	ldi	r30, 0x12	; 18
 21c:	f6 e0       	ldi	r31, 0x06	; 6
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	ac 31       	cpi	r26, 0x1C	; 28
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	20 e3       	ldi	r18, 0x30	; 48
 232:	ac e1       	ldi	r26, 0x1C	; 28
 234:	b0 e2       	ldi	r27, 0x20	; 32
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	a0 3a       	cpi	r26, 0xA0	; 160
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	20 d1       	rcall	.+576    	; 0x482 <main>
 242:	e5 c1       	rjmp	.+970    	; 0x60e <_exit>

00000244 <__bad_interrupt>:
 244:	dd ce       	rjmp	.-582    	; 0x0 <__vectors>

00000246 <Wait>:
 * Output:
 ************************************************************************************/
 void sendChar(char a) {
	 Wait();
	 __far_mem_write(LCD_DATA, a);
 }
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	90 e1       	ldi	r25, 0x10	; 16
 24a:	a7 e4       	ldi	r26, 0x47	; 71
 24c:	b0 e0       	ldi	r27, 0x00	; 0
 24e:	0b b6       	in	r0, 0x3b	; 59
 250:	ab bf       	out	0x3b, r26	; 59
 252:	fc 01       	movw	r30, r24
 254:	20 81       	ld	r18, Z
 256:	0b be       	out	0x3b, r0	; 59
 258:	22 23       	and	r18, r18
 25a:	cc f3       	brlt	.-14     	; 0x24e <Wait+0x8>
 25c:	08 95       	ret

0000025e <EBI_init>:
 25e:	e0 ee       	ldi	r30, 0xE0	; 224
 260:	f6 e0       	ldi	r31, 0x06	; 6
 262:	87 e3       	ldi	r24, 0x37	; 55
 264:	80 83       	st	Z, r24
 266:	83 e3       	ldi	r24, 0x33	; 51
 268:	84 83       	std	Z+4, r24	; 0x04
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	80 93 20 07 	sts	0x0720, r24
 270:	e0 e4       	ldi	r30, 0x40	; 64
 272:	f4 e0       	ldi	r31, 0x04	; 4
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	80 83       	st	Z, r24
 278:	13 8a       	std	Z+19, r1	; 0x13
 27a:	80 e8       	ldi	r24, 0x80	; 128
 27c:	82 8b       	std	Z+18, r24	; 0x12
 27e:	85 e1       	ldi	r24, 0x15	; 21
 280:	80 8b       	std	Z+16, r24	; 0x10
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	97 e4       	ldi	r25, 0x47	; 71
 286:	86 8b       	std	Z+22, r24	; 0x16
 288:	97 8b       	std	Z+23, r25	; 0x17
 28a:	81 e2       	ldi	r24, 0x21	; 33
 28c:	84 8b       	std	Z+20, r24	; 0x14
 28e:	08 95       	ret

00000290 <TC_init>:
 290:	8f ef       	ldi	r24, 0xFF	; 255
 292:	80 93 a0 06 	sts	0x06A0, r24
 296:	80 93 a4 06 	sts	0x06A4, r24
 29a:	80 93 82 06 	sts	0x0682, r24
 29e:	10 92 88 06 	sts	0x0688, r1
 2a2:	10 92 00 0b 	sts	0x0B00, r1
 2a6:	41 e1       	ldi	r20, 0x11	; 17
 2a8:	40 93 01 0b 	sts	0x0B01, r20
 2ac:	10 92 02 0b 	sts	0x0B02, r1
 2b0:	80 ea       	ldi	r24, 0xA0	; 160
 2b2:	80 93 03 0b 	sts	0x0B03, r24
 2b6:	10 92 04 0b 	sts	0x0B04, r1
 2ba:	8e e3       	ldi	r24, 0x3E	; 62
 2bc:	92 e0       	ldi	r25, 0x02	; 2
 2be:	80 93 28 0b 	sts	0x0B28, r24
 2c2:	90 93 29 0b 	sts	0x0B29, r25
 2c6:	10 92 20 0b 	sts	0x0B20, r1
 2ca:	10 92 21 0b 	sts	0x0B21, r1
 2ce:	10 92 08 0b 	sts	0x0B08, r1
 2d2:	10 92 40 0b 	sts	0x0B40, r1
 2d6:	30 e1       	ldi	r19, 0x10	; 16
 2d8:	30 93 41 0b 	sts	0x0B41, r19
 2dc:	10 92 42 0b 	sts	0x0B42, r1
 2e0:	10 92 43 0b 	sts	0x0B43, r1
 2e4:	10 92 44 0b 	sts	0x0B44, r1
 2e8:	21 e0       	ldi	r18, 0x01	; 1
 2ea:	20 93 46 0b 	sts	0x0B46, r18
 2ee:	80 93 66 0b 	sts	0x0B66, r24
 2f2:	90 93 67 0b 	sts	0x0B67, r25
 2f6:	10 92 60 0b 	sts	0x0B60, r1
 2fa:	10 92 61 0b 	sts	0x0B61, r1
 2fe:	10 92 48 0b 	sts	0x0B48, r1
 302:	10 92 00 0a 	sts	0x0A00, r1
 306:	30 93 01 0a 	sts	0x0A01, r19
 30a:	10 92 02 0a 	sts	0x0A02, r1
 30e:	88 e2       	ldi	r24, 0x28	; 40
 310:	80 93 03 0a 	sts	0x0A03, r24
 314:	10 92 04 0a 	sts	0x0A04, r1
 318:	20 93 06 0a 	sts	0x0A06, r18
 31c:	40 93 07 0a 	sts	0x0A07, r20
 320:	40 93 0c 0a 	sts	0x0A0C, r20
 324:	10 92 20 0a 	sts	0x0A20, r1
 328:	10 92 21 0a 	sts	0x0A21, r1
 32c:	10 92 90 06 	sts	0x0690, r1
 330:	10 92 40 0a 	sts	0x0A40, r1
 334:	30 93 41 0a 	sts	0x0A41, r19
 338:	10 92 42 0a 	sts	0x0A42, r1
 33c:	10 92 43 0a 	sts	0x0A43, r1
 340:	10 92 44 0a 	sts	0x0A44, r1
 344:	20 93 46 0a 	sts	0x0A46, r18
 348:	20 93 4c 0a 	sts	0x0A4C, r18
 34c:	10 92 60 0a 	sts	0x0A60, r1
 350:	10 92 61 0a 	sts	0x0A61, r1
 354:	8f e0       	ldi	r24, 0x0F	; 15
 356:	97 e2       	ldi	r25, 0x27	; 39
 358:	80 93 66 0a 	sts	0x0A66, r24
 35c:	90 93 67 0a 	sts	0x0A67, r25
 360:	20 93 a2 00 	sts	0x00A2, r18
 364:	08 95       	ret

00000366 <LCD_init>:
 366:	6f df       	rcall	.-290    	; 0x246 <Wait>
 368:	28 e3       	ldi	r18, 0x38	; 56
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	90 e1       	ldi	r25, 0x10	; 16
 36e:	a7 e4       	ldi	r26, 0x47	; 71
 370:	b0 e0       	ldi	r27, 0x00	; 0
 372:	0b b6       	in	r0, 0x3b	; 59
 374:	ab bf       	out	0x3b, r26	; 59
 376:	fc 01       	movw	r30, r24
 378:	20 83       	st	Z, r18
 37a:	0b be       	out	0x3b, r0	; 59
 37c:	64 df       	rcall	.-312    	; 0x246 <Wait>
 37e:	2f e0       	ldi	r18, 0x0F	; 15
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	90 e1       	ldi	r25, 0x10	; 16
 384:	a7 e4       	ldi	r26, 0x47	; 71
 386:	b0 e0       	ldi	r27, 0x00	; 0
 388:	0b b6       	in	r0, 0x3b	; 59
 38a:	ab bf       	out	0x3b, r26	; 59
 38c:	fc 01       	movw	r30, r24
 38e:	20 83       	st	Z, r18
 390:	0b be       	out	0x3b, r0	; 59
 392:	59 df       	rcall	.-334    	; 0x246 <Wait>
 394:	21 e0       	ldi	r18, 0x01	; 1
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	90 e1       	ldi	r25, 0x10	; 16
 39a:	a7 e4       	ldi	r26, 0x47	; 71
 39c:	b0 e0       	ldi	r27, 0x00	; 0
 39e:	0b b6       	in	r0, 0x3b	; 59
 3a0:	ab bf       	out	0x3b, r26	; 59
 3a2:	fc 01       	movw	r30, r24
 3a4:	20 83       	st	Z, r18
 3a6:	0b be       	out	0x3b, r0	; 59
 3a8:	4e df       	rcall	.-356    	; 0x246 <Wait>
 3aa:	26 e0       	ldi	r18, 0x06	; 6
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	90 e1       	ldi	r25, 0x10	; 16
 3b0:	a7 e4       	ldi	r26, 0x47	; 71
 3b2:	b0 e0       	ldi	r27, 0x00	; 0
 3b4:	0b b6       	in	r0, 0x3b	; 59
 3b6:	ab bf       	out	0x3b, r26	; 59
 3b8:	fc 01       	movw	r30, r24
 3ba:	20 83       	st	Z, r18
 3bc:	0b be       	out	0x3b, r0	; 59
 3be:	08 95       	ret

000003c0 <READ_KEY>:
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	80 93 00 0a 	sts	0x0A00, r24
 3c6:	80 93 40 0a 	sts	0x0A40, r24
 3ca:	80 91 fe 20 	lds	r24, 0x20FE
 3ce:	90 91 ff 20 	lds	r25, 0x20FF
 3d2:	89 2b       	or	r24, r25
 3d4:	09 f4       	brne	.+2      	; 0x3d8 <READ_KEY+0x18>
 3d6:	ff cf       	rjmp	.-2      	; 0x3d6 <READ_KEY+0x16>
 3d8:	08 95       	ret

000003da <sendStr>:
 * Name:     senStr
 * Purpose:  Function to display a C-string on an LCD.
 * Inputs:	char* a
 * Output:
 ************************************************************************************/
 void sendStr(char* str) {
 3da:	8f 92       	push	r8
 3dc:	9f 92       	push	r9
 3de:	af 92       	push	r10
 3e0:	bf 92       	push	r11
 3e2:	cf 92       	push	r12
 3e4:	df 92       	push	r13
 3e6:	ef 92       	push	r14
 3e8:	ff 92       	push	r15
 3ea:	1f 93       	push	r17
 3ec:	cf 93       	push	r28
 3ee:	df 93       	push	r29
 3f0:	ec 01       	movw	r28, r24
		 if(*str == 10) {
			 __far_mem_write(LCD_CMD, 0xC0);		// Move to new line in LCD
			 str++;
		 }
		 else {
			 __far_mem_write(LCD_DATA, *str);	// Print character to LCD
 3f2:	0f 2e       	mov	r0, r31
 3f4:	cc 24       	eor	r12, r12
 3f6:	c3 94       	inc	r12
 3f8:	f0 e1       	ldi	r31, 0x10	; 16
 3fa:	df 2e       	mov	r13, r31
 3fc:	f7 e4       	ldi	r31, 0x47	; 71
 3fe:	ef 2e       	mov	r14, r31
 400:	f1 2c       	mov	r15, r1
 402:	f0 2d       	mov	r31, r0
 ************************************************************************************/
 void sendStr(char* str) {
	 while(*str != 0) {
		 Wait();
		 if(*str == 10) {
			 __far_mem_write(LCD_CMD, 0xC0);		// Move to new line in LCD
 404:	0f 2e       	mov	r0, r31
 406:	81 2c       	mov	r8, r1
 408:	f0 e1       	ldi	r31, 0x10	; 16
 40a:	9f 2e       	mov	r9, r31
 40c:	f7 e4       	ldi	r31, 0x47	; 71
 40e:	af 2e       	mov	r10, r31
 410:	b1 2c       	mov	r11, r1
 412:	f0 2d       	mov	r31, r0
 414:	10 ec       	ldi	r17, 0xC0	; 192
 * Purpose:  Function to display a C-string on an LCD.
 * Inputs:	char* a
 * Output:
 ************************************************************************************/
 void sendStr(char* str) {
	 while(*str != 0) {
 416:	0f c0       	rjmp	.+30     	; 0x436 <sendStr+0x5c>
		 Wait();
 418:	16 df       	rcall	.-468    	; 0x246 <Wait>
		 if(*str == 10) {
 41a:	89 91       	ld	r24, Y+
 41c:	8a 30       	cpi	r24, 0x0A	; 10
 41e:	31 f4       	brne	.+12     	; 0x42c <sendStr+0x52>
			 __far_mem_write(LCD_CMD, 0xC0);		// Move to new line in LCD
 420:	0b b6       	in	r0, 0x3b	; 59
 422:	ab be       	out	0x3b, r10	; 59
 424:	f4 01       	movw	r30, r8
 426:	10 83       	st	Z, r17
 428:	0b be       	out	0x3b, r0	; 59
 42a:	05 c0       	rjmp	.+10     	; 0x436 <sendStr+0x5c>
			 str++;
		 }
		 else {
			 __far_mem_write(LCD_DATA, *str);	// Print character to LCD
 42c:	0b b6       	in	r0, 0x3b	; 59
 42e:	eb be       	out	0x3b, r14	; 59
 430:	f6 01       	movw	r30, r12
 432:	80 83       	st	Z, r24
 434:	0b be       	out	0x3b, r0	; 59
 * Purpose:  Function to display a C-string on an LCD.
 * Inputs:	char* a
 * Output:
 ************************************************************************************/
 void sendStr(char* str) {
	 while(*str != 0) {
 436:	88 81       	ld	r24, Y
 438:	81 11       	cpse	r24, r1
 43a:	ee cf       	rjmp	.-36     	; 0x418 <sendStr+0x3e>
		 else {
			 __far_mem_write(LCD_DATA, *str);	// Print character to LCD
			 str++;								// Point to next character in string
		 }
	 }
 }
 43c:	df 91       	pop	r29
 43e:	cf 91       	pop	r28
 440:	1f 91       	pop	r17
 442:	ff 90       	pop	r15
 444:	ef 90       	pop	r14
 446:	df 90       	pop	r13
 448:	cf 90       	pop	r12
 44a:	bf 90       	pop	r11
 44c:	af 90       	pop	r10
 44e:	9f 90       	pop	r9
 450:	8f 90       	pop	r8
 452:	08 95       	ret

00000454 <clearLCD>:
 * Purpose:  Clear LCD and blink cursor
 * Inputs:	 
 * Output:
 ************************************************************************************/
 void clearLCD() {
	 Wait();
 454:	f8 de       	rcall	.-528    	; 0x246 <Wait>
	 __far_mem_write(LCD_CMD,0x0F);	// Display cursor blink
 456:	2f e0       	ldi	r18, 0x0F	; 15
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	90 e1       	ldi	r25, 0x10	; 16
 45c:	a7 e4       	ldi	r26, 0x47	; 71
 45e:	b0 e0       	ldi	r27, 0x00	; 0
 460:	0b b6       	in	r0, 0x3b	; 59
 462:	ab bf       	out	0x3b, r26	; 59
 464:	fc 01       	movw	r30, r24
 466:	20 83       	st	Z, r18
 468:	0b be       	out	0x3b, r0	; 59
	 Wait();
 46a:	ed de       	rcall	.-550    	; 0x246 <Wait>
	 __far_mem_write(LCD_CMD,0x01);	// Clear Home
 46c:	21 e0       	ldi	r18, 0x01	; 1
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	90 e1       	ldi	r25, 0x10	; 16
 472:	a7 e4       	ldi	r26, 0x47	; 71
 474:	b0 e0       	ldi	r27, 0x00	; 0
 476:	0b b6       	in	r0, 0x3b	; 59
 478:	ab bf       	out	0x3b, r26	; 59
 47a:	fc 01       	movw	r30, r24
 47c:	20 83       	st	Z, r18
 47e:	0b be       	out	0x3b, r0	; 59
 480:	08 95       	ret

00000482 <main>:
 }

int main(void) {
		
	// Initialize all the necessary components
	EBI_init();
 482:	ed de       	rcall	.-550    	; 0x25e <EBI_init>
	LCD_init();
 484:	70 df       	rcall	.-288    	; 0x366 <LCD_init>
	TC_init();
 486:	04 df       	rcall	.-504    	; 0x290 <TC_init>
 488:	4a ee       	ldi	r20, 0xEA	; 234
 48a:	50 e2       	ldi	r21, 0x20	; 32
 48c:	20 e0       	ldi	r18, 0x00	; 0
 48e:	31 e2       	ldi	r19, 0x21	; 33
 490:	ce ef       	ldi	r28, 0xFE	; 254
 492:	d0 e2       	ldi	r29, 0x20	; 32
 494:	60 e2       	ldi	r22, 0x20	; 32
 496:	70 e2       	ldi	r23, 0x20	; 32
 498:	88 ee       	ldi	r24, 0xE8	; 232
 49a:	90 e2       	ldi	r25, 0x20	; 32
	for(int i = 0; i != 10; ++i) {
		keyNumPulse[i] = 0;
 49c:	fa 01       	movw	r30, r20
 49e:	11 92       	st	Z+, r1
 4a0:	11 92       	st	Z+, r1
 4a2:	af 01       	movw	r20, r30
 4a4:	fb 01       	movw	r30, r22
 4a6:	d9 01       	movw	r26, r18
		for(int j = 0; j != 100; ++j) {
			keyWidth[i][j] = 0;
 4a8:	1d 92       	st	X+, r1
 4aa:	1d 92       	st	X+, r1
 4ac:	1d 92       	st	X+, r1
 4ae:	1d 92       	st	X+, r1
			recordedKeyWidth[j] = 0;
 4b0:	11 92       	st	Z+, r1
 4b2:	11 92       	st	Z+, r1
	EBI_init();
	LCD_init();
	TC_init();
	for(int i = 0; i != 10; ++i) {
		keyNumPulse[i] = 0;
		for(int j = 0; j != 100; ++j) {
 4b4:	e8 17       	cp	r30, r24
 4b6:	f9 07       	cpc	r31, r25
 4b8:	b9 f7       	brne	.-18     	; 0x4a8 <main+0x26>
 4ba:	20 57       	subi	r18, 0x70	; 112
 4bc:	3e 4f       	sbci	r19, 0xFE	; 254
		
	// Initialize all the necessary components
	EBI_init();
	LCD_init();
	TC_init();
	for(int i = 0; i != 10; ++i) {
 4be:	4c 17       	cp	r20, r28
 4c0:	5d 07       	cpc	r21, r29
 4c2:	61 f7       	brne	.-40     	; 0x49c <main+0x1a>
			recordedKeyWidth[j] = 0;
		}
	}
	
	doneRecording = 0;					// Set done recording to False
    recordingKey = 1;					// Set key to start recording key
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	80 93 1e 20 	sts	0x201E, r24
 4cc:	90 93 1f 20 	sts	0x201F, r25
	
	while(1) {
		doneRecording = 0;				// Set done recording flag to false
 4d0:	10 92 fe 20 	sts	0x20FE, r1
 4d4:	10 92 ff 20 	sts	0x20FF, r1
		
		clearLCD();						// Clear LCD screen
 4d8:	bd df       	rcall	.-134    	; 0x454 <clearLCD>
		sendStr("Reading key");			// Printing message that key is being read
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	90 e2       	ldi	r25, 0x20	; 32
 4de:	7d df       	rcall	.-262    	; 0x3da <sendStr>
		
		sei();							// Turn ON global interrupt
 4e0:	78 94       	sei
		READ_KEY();						// Read key pressed
 4e2:	6e df       	rcall	.-292    	; 0x3c0 <READ_KEY>
		cli();							// Disable interrupt
 4e4:	f8 94       	cli
										
		clearLCD();						// Clear LCD screen
 4e6:	b6 df       	rcall	.-148    	; 0x454 <clearLCD>
		sendStr("Done recording");		// Print message of key done recording
 4e8:	8c e0       	ldi	r24, 0x0C	; 12
 4ea:	90 e2       	ldi	r25, 0x20	; 32
 4ec:	76 df       	rcall	.-276    	; 0x3da <sendStr>
 4ee:	f0 cf       	rjmp	.-32     	; 0x4d0 <main+0x4e>

000004f0 <__vector_53>:
	}
}

// Poll to check if data is read completely
ISR(TCE1_OVF_vect) {				
 4f0:	1f 92       	push	r1
 4f2:	0f 92       	push	r0
 4f4:	0f b6       	in	r0, 0x3f	; 63
 4f6:	0f 92       	push	r0
 4f8:	11 24       	eor	r1, r1
 4fa:	08 b6       	in	r0, 0x38	; 56
 4fc:	0f 92       	push	r0
 4fe:	18 be       	out	0x38, r1	; 56
 500:	8f 93       	push	r24
 502:	9f 93       	push	r25
	if(doneRecording == 0) {
 504:	80 91 fe 20 	lds	r24, 0x20FE
 508:	90 91 ff 20 	lds	r25, 0x20FF
 50c:	89 2b       	or	r24, r25
 50e:	59 f4       	brne	.+22     	; 0x526 <__vector_53+0x36>
		doneRecording = 1;
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	80 93 fe 20 	sts	0x20FE, r24
 518:	90 93 ff 20 	sts	0x20FF, r25
		TCE0_CTRLA = 0x00;			// Turn off timer
 51c:	10 92 00 0a 	sts	0x0A00, r1
		TCE1_CTRLA = 0x00;			// Turn off timer
 520:	10 92 40 0a 	sts	0x0A40, r1
 524:	04 c0       	rjmp	.+8      	; 0x52e <__vector_53+0x3e>
	}
	else {
		doneRecording = 0;
 526:	10 92 fe 20 	sts	0x20FE, r1
 52a:	10 92 ff 20 	sts	0x20FF, r1
	}
	TCE1_INTFLAGS = 0x11;			// Restore interrupt flags
 52e:	81 e1       	ldi	r24, 0x11	; 17
 530:	80 93 4c 0a 	sts	0x0A4C, r24
	TCE0_INTFLAGS = 0x11;								// Reset interrupt flags
 534:	80 93 0c 0a 	sts	0x0A0C, r24
}
 538:	9f 91       	pop	r25
 53a:	8f 91       	pop	r24
 53c:	0f 90       	pop	r0
 53e:	08 be       	out	0x38, r0	; 56
 540:	0f 90       	pop	r0
 542:	0f be       	out	0x3f, r0	; 63
 544:	0f 90       	pop	r0
 546:	1f 90       	pop	r1
 548:	18 95       	reti

0000054a <__vector_49>:

// Checking pulse
ISR(TCE0_CCA_vect) {
 54a:	1f 92       	push	r1
 54c:	0f 92       	push	r0
 54e:	0f b6       	in	r0, 0x3f	; 63
 550:	0f 92       	push	r0
 552:	11 24       	eor	r1, r1
 554:	08 b6       	in	r0, 0x38	; 56
 556:	0f 92       	push	r0
 558:	18 be       	out	0x38, r1	; 56
 55a:	0b b6       	in	r0, 0x3b	; 59
 55c:	0f 92       	push	r0
 55e:	1b be       	out	0x3b, r1	; 59
 560:	2f 93       	push	r18
 562:	3f 93       	push	r19
 564:	8f 93       	push	r24
 566:	9f 93       	push	r25
 568:	ef 93       	push	r30
 56a:	ff 93       	push	r31
	TCE1_CTRLA = 0x00;									// Turn off timer
 56c:	10 92 40 0a 	sts	0x0A40, r1
	if(buttonRecording < 101) {
 570:	80 91 1c 20 	lds	r24, 0x201C
 574:	90 91 1d 20 	lds	r25, 0x201D
 578:	85 36       	cpi	r24, 0x65	; 101
 57a:	91 05       	cpc	r25, r1
 57c:	8c f4       	brge	.+34     	; 0x5a0 <__vector_49+0x56>
		recordedKeyWidth[buttonRecording] = TCE0_CNT;
 57e:	20 91 20 0a 	lds	r18, 0x0A20
 582:	30 91 21 0a 	lds	r19, 0x0A21
 586:	fc 01       	movw	r30, r24
 588:	ee 0f       	add	r30, r30
 58a:	ff 1f       	adc	r31, r31
 58c:	e0 5e       	subi	r30, 0xE0	; 224
 58e:	ff 4d       	sbci	r31, 0xDF	; 223
 590:	20 83       	st	Z, r18
 592:	31 83       	std	Z+1, r19	; 0x01
		buttonRecording++;
 594:	01 96       	adiw	r24, 0x01	; 1
 596:	80 93 1c 20 	sts	0x201C, r24
 59a:	90 93 1d 20 	sts	0x201D, r25
 59e:	06 c0       	rjmp	.+12     	; 0x5ac <__vector_49+0x62>
	}
	else {
		doneRecording = 1;								// Set flag to state that you are done recording
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	80 93 fe 20 	sts	0x20FE, r24
 5a8:	90 93 ff 20 	sts	0x20FF, r25
	}
	TCE0_INTFLAGS = 0x11;								// Reset interrupt flags
 5ac:	81 e1       	ldi	r24, 0x11	; 17
 5ae:	80 93 0c 0a 	sts	0x0A0C, r24
	TCE1_CNT = 0x00;									// Reset the counter to 0
 5b2:	10 92 60 0a 	sts	0x0A60, r1
 5b6:	10 92 61 0a 	sts	0x0A61, r1
	TCE1_CTRLA = 0x01;									// Turn timer back ON
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	80 93 40 0a 	sts	0x0A40, r24
}
 5c0:	ff 91       	pop	r31
 5c2:	ef 91       	pop	r30
 5c4:	9f 91       	pop	r25
 5c6:	8f 91       	pop	r24
 5c8:	3f 91       	pop	r19
 5ca:	2f 91       	pop	r18
 5cc:	0f 90       	pop	r0
 5ce:	0b be       	out	0x3b, r0	; 59
 5d0:	0f 90       	pop	r0
 5d2:	08 be       	out	0x38, r0	; 56
 5d4:	0f 90       	pop	r0
 5d6:	0f be       	out	0x3f, r0	; 63
 5d8:	0f 90       	pop	r0
 5da:	1f 90       	pop	r1
 5dc:	18 95       	reti

000005de <__vector_114>:

// Poll note duration interrupt
ISR(TCF1_OVF_vect) {
 5de:	1f 92       	push	r1
 5e0:	0f 92       	push	r0
 5e2:	0f b6       	in	r0, 0x3f	; 63
 5e4:	0f 92       	push	r0
 5e6:	11 24       	eor	r1, r1
 5e8:	08 b6       	in	r0, 0x38	; 56
 5ea:	0f 92       	push	r0
 5ec:	18 be       	out	0x38, r1	; 56
 5ee:	8f 93       	push	r24
	TCF1_CTRLA = 0x00;											// Turn OFF duration timer
 5f0:	10 92 40 0b 	sts	0x0B40, r1
	TCF0_CTRLA = 0x00;											// Turn OFF sound timer
 5f4:	10 92 00 0b 	sts	0x0B00, r1
	TCF1_INTFLAGS = 0x01;										// Reset interrupt vector
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	80 93 4c 0b 	sts	0x0B4C, r24
 5fe:	8f 91       	pop	r24
 600:	0f 90       	pop	r0
 602:	08 be       	out	0x38, r0	; 56
 604:	0f 90       	pop	r0
 606:	0f be       	out	0x3f, r0	; 63
 608:	0f 90       	pop	r0
 60a:	1f 90       	pop	r1
 60c:	18 95       	reti

0000060e <_exit>:
 60e:	f8 94       	cli

00000610 <__stop_program>:
 610:	ff cf       	rjmp	.-2      	; 0x610 <__stop_program>
