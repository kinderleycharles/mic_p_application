
newLab8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000128a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000212  00802000  0000128a  0000131e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001086  00802212  00802212  00001530  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001530  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ef3  00000000  00000000  00001600  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003b7  00000000  00000000  000034f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009d5  00000000  00000000  000038aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002d8  00000000  00000000  00004280  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001679  00000000  00000000  00004558  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008ab  00000000  00000000  00005bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  0000647c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	20 c1       	rjmp	.+576    	; 0x246 <__bad_interrupt>
       6:	00 00       	nop
       8:	1e c1       	rjmp	.+572    	; 0x246 <__bad_interrupt>
       a:	00 00       	nop
       c:	1c c1       	rjmp	.+568    	; 0x246 <__bad_interrupt>
       e:	00 00       	nop
      10:	1a c1       	rjmp	.+564    	; 0x246 <__bad_interrupt>
      12:	00 00       	nop
      14:	18 c1       	rjmp	.+560    	; 0x246 <__bad_interrupt>
      16:	00 00       	nop
      18:	16 c1       	rjmp	.+556    	; 0x246 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	14 c1       	rjmp	.+552    	; 0x246 <__bad_interrupt>
      1e:	00 00       	nop
      20:	12 c1       	rjmp	.+548    	; 0x246 <__bad_interrupt>
      22:	00 00       	nop
      24:	10 c1       	rjmp	.+544    	; 0x246 <__bad_interrupt>
      26:	00 00       	nop
      28:	0e c1       	rjmp	.+540    	; 0x246 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c c1       	rjmp	.+536    	; 0x246 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0a c1       	rjmp	.+532    	; 0x246 <__bad_interrupt>
      32:	00 00       	nop
      34:	08 c1       	rjmp	.+528    	; 0x246 <__bad_interrupt>
      36:	00 00       	nop
      38:	67 c7       	rjmp	.+3790   	; 0xf08 <__vector_14>
      3a:	00 00       	nop
      3c:	04 c1       	rjmp	.+520    	; 0x246 <__bad_interrupt>
      3e:	00 00       	nop
      40:	02 c1       	rjmp	.+516    	; 0x246 <__bad_interrupt>
      42:	00 00       	nop
      44:	00 c1       	rjmp	.+512    	; 0x246 <__bad_interrupt>
      46:	00 00       	nop
      48:	fe c0       	rjmp	.+508    	; 0x246 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fc c0       	rjmp	.+504    	; 0x246 <__bad_interrupt>
      4e:	00 00       	nop
      50:	e1 c7       	rjmp	.+4034   	; 0x1014 <__vector_20>
      52:	00 00       	nop
      54:	f8 c0       	rjmp	.+496    	; 0x246 <__bad_interrupt>
      56:	00 00       	nop
      58:	f6 c0       	rjmp	.+492    	; 0x246 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f4 c0       	rjmp	.+488    	; 0x246 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f2 c0       	rjmp	.+484    	; 0x246 <__bad_interrupt>
      62:	00 00       	nop
      64:	f0 c0       	rjmp	.+480    	; 0x246 <__bad_interrupt>
      66:	00 00       	nop
      68:	ee c0       	rjmp	.+476    	; 0x246 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ec c0       	rjmp	.+472    	; 0x246 <__bad_interrupt>
      6e:	00 00       	nop
      70:	ea c0       	rjmp	.+468    	; 0x246 <__bad_interrupt>
      72:	00 00       	nop
      74:	e8 c0       	rjmp	.+464    	; 0x246 <__bad_interrupt>
      76:	00 00       	nop
      78:	e6 c0       	rjmp	.+460    	; 0x246 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e4 c0       	rjmp	.+456    	; 0x246 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e2 c0       	rjmp	.+452    	; 0x246 <__bad_interrupt>
      82:	00 00       	nop
      84:	e0 c0       	rjmp	.+448    	; 0x246 <__bad_interrupt>
      86:	00 00       	nop
      88:	de c0       	rjmp	.+444    	; 0x246 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dc c0       	rjmp	.+440    	; 0x246 <__bad_interrupt>
      8e:	00 00       	nop
      90:	da c0       	rjmp	.+436    	; 0x246 <__bad_interrupt>
      92:	00 00       	nop
      94:	d8 c0       	rjmp	.+432    	; 0x246 <__bad_interrupt>
      96:	00 00       	nop
      98:	d6 c0       	rjmp	.+428    	; 0x246 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d4 c0       	rjmp	.+424    	; 0x246 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d2 c0       	rjmp	.+420    	; 0x246 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d0 c0       	rjmp	.+416    	; 0x246 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ce c0       	rjmp	.+412    	; 0x246 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cc c0       	rjmp	.+408    	; 0x246 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ca c0       	rjmp	.+404    	; 0x246 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c8 c0       	rjmp	.+400    	; 0x246 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c6 c0       	rjmp	.+396    	; 0x246 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c4 c0       	rjmp	.+392    	; 0x246 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c2 c0       	rjmp	.+388    	; 0x246 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c0 c0       	rjmp	.+384    	; 0x246 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	be c0       	rjmp	.+380    	; 0x246 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bc c0       	rjmp	.+376    	; 0x246 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ba c0       	rjmp	.+372    	; 0x246 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b8 c0       	rjmp	.+368    	; 0x246 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b6 c0       	rjmp	.+364    	; 0x246 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b4 c0       	rjmp	.+360    	; 0x246 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b2 c0       	rjmp	.+356    	; 0x246 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b0 c0       	rjmp	.+352    	; 0x246 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ae c0       	rjmp	.+348    	; 0x246 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ac c0       	rjmp	.+344    	; 0x246 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	aa c0       	rjmp	.+340    	; 0x246 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a8 c0       	rjmp	.+336    	; 0x246 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a6 c0       	rjmp	.+332    	; 0x246 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a4 c0       	rjmp	.+328    	; 0x246 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a2 c0       	rjmp	.+324    	; 0x246 <__bad_interrupt>
     102:	00 00       	nop
     104:	a0 c0       	rjmp	.+320    	; 0x246 <__bad_interrupt>
     106:	00 00       	nop
     108:	9e c0       	rjmp	.+316    	; 0x246 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9c c0       	rjmp	.+312    	; 0x246 <__bad_interrupt>
     10e:	00 00       	nop
     110:	9a c0       	rjmp	.+308    	; 0x246 <__bad_interrupt>
     112:	00 00       	nop
     114:	98 c0       	rjmp	.+304    	; 0x246 <__bad_interrupt>
     116:	00 00       	nop
     118:	96 c0       	rjmp	.+300    	; 0x246 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	94 c0       	rjmp	.+296    	; 0x246 <__bad_interrupt>
     11e:	00 00       	nop
     120:	92 c0       	rjmp	.+292    	; 0x246 <__bad_interrupt>
     122:	00 00       	nop
     124:	90 c0       	rjmp	.+288    	; 0x246 <__bad_interrupt>
     126:	00 00       	nop
     128:	8e c0       	rjmp	.+284    	; 0x246 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8c c0       	rjmp	.+280    	; 0x246 <__bad_interrupt>
     12e:	00 00       	nop
     130:	8a c0       	rjmp	.+276    	; 0x246 <__bad_interrupt>
     132:	00 00       	nop
     134:	88 c0       	rjmp	.+272    	; 0x246 <__bad_interrupt>
     136:	00 00       	nop
     138:	86 c0       	rjmp	.+268    	; 0x246 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	84 c0       	rjmp	.+264    	; 0x246 <__bad_interrupt>
     13e:	00 00       	nop
     140:	82 c0       	rjmp	.+260    	; 0x246 <__bad_interrupt>
     142:	00 00       	nop
     144:	80 c0       	rjmp	.+256    	; 0x246 <__bad_interrupt>
     146:	00 00       	nop
     148:	7e c0       	rjmp	.+252    	; 0x246 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7c c0       	rjmp	.+248    	; 0x246 <__bad_interrupt>
     14e:	00 00       	nop
     150:	7a c0       	rjmp	.+244    	; 0x246 <__bad_interrupt>
     152:	00 00       	nop
     154:	78 c0       	rjmp	.+240    	; 0x246 <__bad_interrupt>
     156:	00 00       	nop
     158:	76 c0       	rjmp	.+236    	; 0x246 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	74 c0       	rjmp	.+232    	; 0x246 <__bad_interrupt>
     15e:	00 00       	nop
     160:	72 c0       	rjmp	.+228    	; 0x246 <__bad_interrupt>
     162:	00 00       	nop
     164:	70 c0       	rjmp	.+224    	; 0x246 <__bad_interrupt>
     166:	00 00       	nop
     168:	6e c0       	rjmp	.+220    	; 0x246 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6c c0       	rjmp	.+216    	; 0x246 <__bad_interrupt>
     16e:	00 00       	nop
     170:	6a c0       	rjmp	.+212    	; 0x246 <__bad_interrupt>
     172:	00 00       	nop
     174:	68 c0       	rjmp	.+208    	; 0x246 <__bad_interrupt>
     176:	00 00       	nop
     178:	66 c0       	rjmp	.+204    	; 0x246 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	64 c0       	rjmp	.+200    	; 0x246 <__bad_interrupt>
     17e:	00 00       	nop
     180:	62 c0       	rjmp	.+196    	; 0x246 <__bad_interrupt>
     182:	00 00       	nop
     184:	60 c0       	rjmp	.+192    	; 0x246 <__bad_interrupt>
     186:	00 00       	nop
     188:	5e c0       	rjmp	.+188    	; 0x246 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5c c0       	rjmp	.+184    	; 0x246 <__bad_interrupt>
     18e:	00 00       	nop
     190:	5a c0       	rjmp	.+180    	; 0x246 <__bad_interrupt>
     192:	00 00       	nop
     194:	58 c0       	rjmp	.+176    	; 0x246 <__bad_interrupt>
     196:	00 00       	nop
     198:	56 c0       	rjmp	.+172    	; 0x246 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	54 c0       	rjmp	.+168    	; 0x246 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	52 c0       	rjmp	.+164    	; 0x246 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	50 c0       	rjmp	.+160    	; 0x246 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4e c0       	rjmp	.+156    	; 0x246 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4c c0       	rjmp	.+152    	; 0x246 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	4a c0       	rjmp	.+148    	; 0x246 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	48 c0       	rjmp	.+144    	; 0x246 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	d2 c6       	rjmp	.+3492   	; 0xf5e <__vector_110>
     1ba:	00 00       	nop
     1bc:	44 c0       	rjmp	.+136    	; 0x246 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	42 c0       	rjmp	.+132    	; 0x246 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	40 c0       	rjmp	.+128    	; 0x246 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3e c0       	rjmp	.+124    	; 0x246 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3c c0       	rjmp	.+120    	; 0x246 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3a c0       	rjmp	.+116    	; 0x246 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	38 c0       	rjmp	.+112    	; 0x246 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	36 c0       	rjmp	.+108    	; 0x246 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	34 c0       	rjmp	.+104    	; 0x246 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	32 c0       	rjmp	.+100    	; 0x246 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	30 c0       	rjmp	.+96     	; 0x246 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2e c0       	rjmp	.+92     	; 0x246 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2c c0       	rjmp	.+88     	; 0x246 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2a c0       	rjmp	.+84     	; 0x246 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	28 c0       	rjmp	.+80     	; 0x246 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	26 c0       	rjmp	.+76     	; 0x246 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	12 e2       	ldi	r17, 0x22	; 34
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	ea e8       	ldi	r30, 0x8A	; 138
     21c:	f2 e1       	ldi	r31, 0x12	; 18
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a2 31       	cpi	r26, 0x12	; 18
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	22 e3       	ldi	r18, 0x32	; 50
     232:	a2 e1       	ldi	r26, 0x12	; 18
     234:	b2 e2       	ldi	r27, 0x22	; 34
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	a8 39       	cpi	r26, 0x98	; 152
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	d4 d5       	rcall	.+2984   	; 0xdea <main>
     242:	0c 94 43 09 	jmp	0x1286	; 0x1286 <_exit>

00000246 <__bad_interrupt>:
     246:	dc ce       	rjmp	.-584    	; 0x0 <__vectors>

00000248 <Wait>:
 * Output:
 ************************************************************************************/
 void sendChar(char a) {
	 Wait();
	 __far_mem_write(LCD_DATA, a);
 }
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	90 e1       	ldi	r25, 0x10	; 16
     24c:	a7 e4       	ldi	r26, 0x47	; 71
     24e:	b0 e0       	ldi	r27, 0x00	; 0
     250:	0b b6       	in	r0, 0x3b	; 59
     252:	ab bf       	out	0x3b, r26	; 59
     254:	fc 01       	movw	r30, r24
     256:	20 81       	ld	r18, Z
     258:	0b be       	out	0x3b, r0	; 59
     25a:	22 23       	and	r18, r18
     25c:	cc f3       	brlt	.-14     	; 0x250 <Wait+0x8>
     25e:	08 95       	ret

00000260 <EBI_init>:
     260:	e0 ee       	ldi	r30, 0xE0	; 224
     262:	f6 e0       	ldi	r31, 0x06	; 6
     264:	87 e3       	ldi	r24, 0x37	; 55
     266:	80 83       	st	Z, r24
     268:	83 e3       	ldi	r24, 0x33	; 51
     26a:	84 83       	std	Z+4, r24	; 0x04
     26c:	8f ef       	ldi	r24, 0xFF	; 255
     26e:	80 93 20 07 	sts	0x0720, r24
     272:	e0 e4       	ldi	r30, 0x40	; 64
     274:	f4 e0       	ldi	r31, 0x04	; 4
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	80 83       	st	Z, r24
     27a:	13 8a       	std	Z+19, r1	; 0x13
     27c:	80 e8       	ldi	r24, 0x80	; 128
     27e:	82 8b       	std	Z+18, r24	; 0x12
     280:	85 e1       	ldi	r24, 0x15	; 21
     282:	80 8b       	std	Z+16, r24	; 0x10
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	97 e4       	ldi	r25, 0x47	; 71
     288:	86 8b       	std	Z+22, r24	; 0x16
     28a:	97 8b       	std	Z+23, r25	; 0x17
     28c:	81 e2       	ldi	r24, 0x21	; 33
     28e:	84 8b       	std	Z+20, r24	; 0x14
     290:	08 95       	ret

00000292 <KEYPAD_init>:
     292:	cf 93       	push	r28
     294:	df 93       	push	r29
     296:	1f 92       	push	r1
     298:	cd b7       	in	r28, 0x3d	; 61
     29a:	de b7       	in	r29, 0x3e	; 62
     29c:	8f e0       	ldi	r24, 0x0F	; 15
     29e:	80 93 80 06 	sts	0x0680, r24
     2a2:	88 e1       	ldi	r24, 0x18	; 24
     2a4:	89 83       	std	Y+1, r24	; 0x01
     2a6:	89 81       	ldd	r24, Y+1	; 0x01
     2a8:	80 93 97 06 	sts	0x0697, r24
     2ac:	89 81       	ldd	r24, Y+1	; 0x01
     2ae:	80 93 96 06 	sts	0x0696, r24
     2b2:	89 81       	ldd	r24, Y+1	; 0x01
     2b4:	80 93 95 06 	sts	0x0695, r24
     2b8:	89 81       	ldd	r24, Y+1	; 0x01
     2ba:	80 93 94 06 	sts	0x0694, r24
     2be:	0f 90       	pop	r0
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	08 95       	ret

000002c6 <TC_init>:
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
     2ca:	80 ef       	ldi	r24, 0xF0	; 240
     2cc:	80 93 a0 06 	sts	0x06A0, r24
     2d0:	e2 ea       	ldi	r30, 0xA2	; 162
     2d2:	f6 e0       	ldi	r31, 0x06	; 6
     2d4:	8f e0       	ldi	r24, 0x0F	; 15
     2d6:	80 83       	st	Z, r24
     2d8:	8f ef       	ldi	r24, 0xFF	; 255
     2da:	80 93 a4 06 	sts	0x06A4, r24
     2de:	80 93 40 06 	sts	0x0640, r24
     2e2:	80 93 44 06 	sts	0x0644, r24
     2e6:	10 92 40 0b 	sts	0x0B40, r1
     2ea:	81 e1       	ldi	r24, 0x11	; 17
     2ec:	80 93 41 0b 	sts	0x0B41, r24
     2f0:	10 92 42 0b 	sts	0x0B42, r1
     2f4:	20 ea       	ldi	r18, 0xA0	; 160
     2f6:	20 93 43 0b 	sts	0x0B43, r18
     2fa:	10 92 44 0b 	sts	0x0B44, r1
     2fe:	8e e3       	ldi	r24, 0x3E	; 62
     300:	92 e0       	ldi	r25, 0x02	; 2
     302:	80 93 68 0b 	sts	0x0B68, r24
     306:	90 93 69 0b 	sts	0x0B69, r25
     30a:	c0 e6       	ldi	r28, 0x60	; 96
     30c:	db e0       	ldi	r29, 0x0B	; 11
     30e:	18 82       	st	Y, r1
     310:	19 82       	std	Y+1, r1	; 0x01
     312:	a8 e4       	ldi	r26, 0x48	; 72
     314:	bb e0       	ldi	r27, 0x0B	; 11
     316:	1c 92       	st	X, r1
     318:	10 92 40 08 	sts	0x0840, r1
     31c:	30 e1       	ldi	r19, 0x10	; 16
     31e:	30 93 41 08 	sts	0x0841, r19
     322:	10 92 42 08 	sts	0x0842, r1
     326:	20 93 43 08 	sts	0x0843, r18
     32a:	10 92 44 08 	sts	0x0844, r1
     32e:	21 e0       	ldi	r18, 0x01	; 1
     330:	20 93 46 08 	sts	0x0846, r18
     334:	80 93 66 08 	sts	0x0866, r24
     338:	90 93 67 08 	sts	0x0867, r25
     33c:	18 82       	st	Y, r1
     33e:	19 82       	std	Y+1, r1	; 0x01
     340:	1c 92       	st	X, r1
     342:	10 92 00 08 	sts	0x0800, r1
     346:	30 93 01 08 	sts	0x0801, r19
     34a:	10 92 02 08 	sts	0x0802, r1
     34e:	10 92 03 08 	sts	0x0803, r1
     352:	10 92 04 08 	sts	0x0804, r1
     356:	20 93 06 08 	sts	0x0806, r18
     35a:	8f e0       	ldi	r24, 0x0F	; 15
     35c:	97 e2       	ldi	r25, 0x27	; 39
     35e:	80 93 26 08 	sts	0x0826, r24
     362:	90 93 27 08 	sts	0x0827, r25
     366:	10 92 20 08 	sts	0x0820, r1
     36a:	10 92 21 08 	sts	0x0821, r1
     36e:	10 92 08 08 	sts	0x0808, r1
     372:	20 83       	st	Z, r18
     374:	10 92 b0 06 	sts	0x06B0, r1
     378:	88 e7       	ldi	r24, 0x78	; 120
     37a:	80 93 80 01 	sts	0x0180, r24
     37e:	88 e2       	ldi	r24, 0x28	; 40
     380:	80 93 03 0b 	sts	0x0B03, r24
     384:	30 93 01 0b 	sts	0x0B01, r19
     388:	20 93 00 0b 	sts	0x0B00, r18
     38c:	20 93 07 0b 	sts	0x0B07, r18
     390:	20 93 a2 00 	sts	0x00A2, r18
     394:	10 92 20 0b 	sts	0x0B20, r1
     398:	10 92 21 0b 	sts	0x0B21, r1
     39c:	10 92 28 0b 	sts	0x0B28, r1
     3a0:	10 92 29 0b 	sts	0x0B29, r1
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	08 95       	ret

000003aa <LCD_init>:
     3aa:	4e df       	rcall	.-356    	; 0x248 <Wait>
     3ac:	28 e3       	ldi	r18, 0x38	; 56
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	90 e1       	ldi	r25, 0x10	; 16
     3b2:	a7 e4       	ldi	r26, 0x47	; 71
     3b4:	b0 e0       	ldi	r27, 0x00	; 0
     3b6:	0b b6       	in	r0, 0x3b	; 59
     3b8:	ab bf       	out	0x3b, r26	; 59
     3ba:	fc 01       	movw	r30, r24
     3bc:	20 83       	st	Z, r18
     3be:	0b be       	out	0x3b, r0	; 59
     3c0:	43 df       	rcall	.-378    	; 0x248 <Wait>
     3c2:	2f e0       	ldi	r18, 0x0F	; 15
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	90 e1       	ldi	r25, 0x10	; 16
     3c8:	a7 e4       	ldi	r26, 0x47	; 71
     3ca:	b0 e0       	ldi	r27, 0x00	; 0
     3cc:	0b b6       	in	r0, 0x3b	; 59
     3ce:	ab bf       	out	0x3b, r26	; 59
     3d0:	fc 01       	movw	r30, r24
     3d2:	20 83       	st	Z, r18
     3d4:	0b be       	out	0x3b, r0	; 59
     3d6:	38 df       	rcall	.-400    	; 0x248 <Wait>
     3d8:	21 e0       	ldi	r18, 0x01	; 1
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	90 e1       	ldi	r25, 0x10	; 16
     3de:	a7 e4       	ldi	r26, 0x47	; 71
     3e0:	b0 e0       	ldi	r27, 0x00	; 0
     3e2:	0b b6       	in	r0, 0x3b	; 59
     3e4:	ab bf       	out	0x3b, r26	; 59
     3e6:	fc 01       	movw	r30, r24
     3e8:	20 83       	st	Z, r18
     3ea:	0b be       	out	0x3b, r0	; 59
     3ec:	2d df       	rcall	.-422    	; 0x248 <Wait>
     3ee:	26 e0       	ldi	r18, 0x06	; 6
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	90 e1       	ldi	r25, 0x10	; 16
     3f4:	a7 e4       	ldi	r26, 0x47	; 71
     3f6:	b0 e0       	ldi	r27, 0x00	; 0
     3f8:	0b b6       	in	r0, 0x3b	; 59
     3fa:	ab bf       	out	0x3b, r26	; 59
     3fc:	fc 01       	movw	r30, r24
     3fe:	20 83       	st	Z, r18
     400:	0b be       	out	0x3b, r0	; 59
     402:	08 95       	ret

00000404 <SCAN_KEYPAD>:
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
     408:	cd b7       	in	r28, 0x3d	; 61
     40a:	de b7       	in	r29, 0x3e	; 62
     40c:	67 97       	sbiw	r28, 0x17	; 23
     40e:	cd bf       	out	0x3d, r28	; 61
     410:	de bf       	out	0x3e, r29	; 62
     412:	80 e1       	ldi	r24, 0x10	; 16
     414:	e0 e0       	ldi	r30, 0x00	; 0
     416:	f0 e2       	ldi	r31, 0x20	; 32
     418:	de 01       	movw	r26, r28
     41a:	11 96       	adiw	r26, 0x01	; 1
     41c:	01 90       	ld	r0, Z+
     41e:	0d 92       	st	X+, r0
     420:	8a 95       	dec	r24
     422:	e1 f7       	brne	.-8      	; 0x41c <SCAN_KEYPAD+0x18>
     424:	87 e0       	ldi	r24, 0x07	; 7
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	a0 e0       	ldi	r26, 0x00	; 0
     42a:	b0 e0       	ldi	r27, 0x00	; 0
     42c:	9b e0       	ldi	r25, 0x0B	; 11
     42e:	ad e0       	ldi	r26, 0x0D	; 13
     430:	be e0       	ldi	r27, 0x0E	; 14
     432:	89 8b       	std	Y+17, r24	; 0x11
     434:	9a 8b       	std	Y+18, r25	; 0x12
     436:	ab 8b       	std	Y+19, r26	; 0x13
     438:	bc 8b       	std	Y+20, r27	; 0x14
     43a:	1d 8a       	std	Y+21, r1	; 0x15
     43c:	8d 89       	ldd	r24, Y+21	; 0x15
     43e:	84 30       	cpi	r24, 0x04	; 4
     440:	09 f4       	brne	.+2      	; 0x444 <SCAN_KEYPAD+0x40>
     442:	4d c0       	rjmp	.+154    	; 0x4de <SCAN_KEYPAD+0xda>
     444:	a0 e8       	ldi	r26, 0x80	; 128
     446:	b6 e0       	ldi	r27, 0x06	; 6
     448:	8d 89       	ldd	r24, Y+21	; 0x15
     44a:	e1 e1       	ldi	r30, 0x11	; 17
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	ec 0f       	add	r30, r28
     450:	fd 1f       	adc	r31, r29
     452:	e8 0f       	add	r30, r24
     454:	f1 1d       	adc	r31, r1
     456:	80 81       	ld	r24, Z
     458:	14 96       	adiw	r26, 0x04	; 4
     45a:	8c 93       	st	X, r24
     45c:	14 97       	sbiw	r26, 0x04	; 4
     45e:	18 96       	adiw	r26, 0x08	; 8
     460:	8c 91       	ld	r24, X
     462:	18 97       	sbiw	r26, 0x08	; 8
     464:	82 95       	swap	r24
     466:	8f 70       	andi	r24, 0x0F	; 15
     468:	8f 8b       	std	Y+23, r24	; 0x17
     46a:	1e 8a       	std	Y+22, r1	; 0x16
     46c:	8e 89       	ldd	r24, Y+22	; 0x16
     46e:	84 30       	cpi	r24, 0x04	; 4
     470:	71 f1       	breq	.+92     	; 0x4ce <SCAN_KEYPAD+0xca>
     472:	8e 89       	ldd	r24, Y+22	; 0x16
     474:	e1 e1       	ldi	r30, 0x11	; 17
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	ec 0f       	add	r30, r28
     47a:	fd 1f       	adc	r31, r29
     47c:	e8 0f       	add	r30, r24
     47e:	f1 1d       	adc	r31, r1
     480:	90 81       	ld	r25, Z
     482:	8f 89       	ldd	r24, Y+23	; 0x17
     484:	98 13       	cpse	r25, r24
     486:	1d c0       	rjmp	.+58     	; 0x4c2 <SCAN_KEYPAD+0xbe>
     488:	0b c0       	rjmp	.+22     	; 0x4a0 <SCAN_KEYPAD+0x9c>
     48a:	8e 89       	ldd	r24, Y+22	; 0x16
     48c:	e1 e1       	ldi	r30, 0x11	; 17
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	ec 0f       	add	r30, r28
     492:	fd 1f       	adc	r31, r29
     494:	e8 0f       	add	r30, r24
     496:	f1 1d       	adc	r31, r1
     498:	90 81       	ld	r25, Z
     49a:	8f 89       	ldd	r24, Y+23	; 0x17
     49c:	98 13       	cpse	r25, r24
     49e:	11 c0       	rjmp	.+34     	; 0x4c2 <SCAN_KEYPAD+0xbe>
     4a0:	8d 89       	ldd	r24, Y+21	; 0x15
     4a2:	ee 89       	ldd	r30, Y+22	; 0x16
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	94 e0       	ldi	r25, 0x04	; 4
     4a8:	89 9f       	mul	r24, r25
     4aa:	e0 0d       	add	r30, r0
     4ac:	f1 1d       	adc	r31, r1
     4ae:	11 24       	eor	r1, r1
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	8c 0f       	add	r24, r28
     4b6:	9d 1f       	adc	r25, r29
     4b8:	e8 0f       	add	r30, r24
     4ba:	f9 1f       	adc	r31, r25
     4bc:	80 81       	ld	r24, Z
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	13 c0       	rjmp	.+38     	; 0x4e8 <SCAN_KEYPAD+0xe4>
     4c2:	8e 89       	ldd	r24, Y+22	; 0x16
     4c4:	8f 5f       	subi	r24, 0xFF	; 255
     4c6:	8e 8b       	std	Y+22, r24	; 0x16
     4c8:	8e 89       	ldd	r24, Y+22	; 0x16
     4ca:	84 30       	cpi	r24, 0x04	; 4
     4cc:	f1 f6       	brne	.-68     	; 0x48a <SCAN_KEYPAD+0x86>
     4ce:	8d 89       	ldd	r24, Y+21	; 0x15
     4d0:	8f 5f       	subi	r24, 0xFF	; 255
     4d2:	8d 8b       	std	Y+21, r24	; 0x15
     4d4:	8d 89       	ldd	r24, Y+21	; 0x15
     4d6:	84 30       	cpi	r24, 0x04	; 4
     4d8:	09 f0       	breq	.+2      	; 0x4dc <SCAN_KEYPAD+0xd8>
     4da:	b6 cf       	rjmp	.-148    	; 0x448 <SCAN_KEYPAD+0x44>
     4dc:	03 c0       	rjmp	.+6      	; 0x4e4 <SCAN_KEYPAD+0xe0>
     4de:	8f ef       	ldi	r24, 0xFF	; 255
     4e0:	9f ef       	ldi	r25, 0xFF	; 255
     4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <SCAN_KEYPAD+0xe4>
     4e4:	8f ef       	ldi	r24, 0xFF	; 255
     4e6:	9f ef       	ldi	r25, 0xFF	; 255
     4e8:	67 96       	adiw	r28, 0x17	; 23
     4ea:	cd bf       	out	0x3d, r28	; 61
     4ec:	de bf       	out	0x3e, r29	; 62
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	08 95       	ret

000004f4 <sendStr>:
 * Name:     senStr
 * Purpose:  Function to display a C-string on an LCD.
 * Inputs:	char* a
 * Output:
 ************************************************************************************/
 void sendStr(char* str) {
     4f4:	8f 92       	push	r8
     4f6:	9f 92       	push	r9
     4f8:	af 92       	push	r10
     4fa:	bf 92       	push	r11
     4fc:	cf 92       	push	r12
     4fe:	df 92       	push	r13
     500:	ef 92       	push	r14
     502:	ff 92       	push	r15
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	ec 01       	movw	r28, r24
		 if(*str == 10) {
			 __far_mem_write(LCD_CMD, 0xC0);		// Move to new line in LCD
			 str++;
		 }
		 else {
			 __far_mem_write(LCD_DATA, *str);	// Print character to LCD
     50c:	0f 2e       	mov	r0, r31
     50e:	cc 24       	eor	r12, r12
     510:	c3 94       	inc	r12
     512:	f0 e1       	ldi	r31, 0x10	; 16
     514:	df 2e       	mov	r13, r31
     516:	f7 e4       	ldi	r31, 0x47	; 71
     518:	ef 2e       	mov	r14, r31
     51a:	f1 2c       	mov	r15, r1
     51c:	f0 2d       	mov	r31, r0
 ************************************************************************************/
 void sendStr(char* str) {
	 while(*str != 0) {
		 Wait();
		 if(*str == 10) {
			 __far_mem_write(LCD_CMD, 0xC0);		// Move to new line in LCD
     51e:	0f 2e       	mov	r0, r31
     520:	81 2c       	mov	r8, r1
     522:	f0 e1       	ldi	r31, 0x10	; 16
     524:	9f 2e       	mov	r9, r31
     526:	f7 e4       	ldi	r31, 0x47	; 71
     528:	af 2e       	mov	r10, r31
     52a:	b1 2c       	mov	r11, r1
     52c:	f0 2d       	mov	r31, r0
     52e:	10 ec       	ldi	r17, 0xC0	; 192
 * Purpose:  Function to display a C-string on an LCD.
 * Inputs:	char* a
 * Output:
 ************************************************************************************/
 void sendStr(char* str) {
	 while(*str != 0) {
     530:	0f c0       	rjmp	.+30     	; 0x550 <sendStr+0x5c>
		 Wait();
     532:	8a de       	rcall	.-748    	; 0x248 <Wait>
		 if(*str == 10) {
     534:	89 91       	ld	r24, Y+
     536:	8a 30       	cpi	r24, 0x0A	; 10
     538:	31 f4       	brne	.+12     	; 0x546 <sendStr+0x52>
			 __far_mem_write(LCD_CMD, 0xC0);		// Move to new line in LCD
     53a:	0b b6       	in	r0, 0x3b	; 59
     53c:	ab be       	out	0x3b, r10	; 59
     53e:	f4 01       	movw	r30, r8
     540:	10 83       	st	Z, r17
     542:	0b be       	out	0x3b, r0	; 59
     544:	05 c0       	rjmp	.+10     	; 0x550 <sendStr+0x5c>
			 str++;
		 }
		 else {
			 __far_mem_write(LCD_DATA, *str);	// Print character to LCD
     546:	0b b6       	in	r0, 0x3b	; 59
     548:	eb be       	out	0x3b, r14	; 59
     54a:	f6 01       	movw	r30, r12
     54c:	80 83       	st	Z, r24
     54e:	0b be       	out	0x3b, r0	; 59
 * Purpose:  Function to display a C-string on an LCD.
 * Inputs:	char* a
 * Output:
 ************************************************************************************/
 void sendStr(char* str) {
	 while(*str != 0) {
     550:	88 81       	ld	r24, Y
     552:	81 11       	cpse	r24, r1
     554:	ee cf       	rjmp	.-36     	; 0x532 <sendStr+0x3e>
		 else {
			 __far_mem_write(LCD_DATA, *str);	// Print character to LCD
			 str++;								// Point to next character in string
		 }
	 }
 }
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	1f 91       	pop	r17
     55c:	ff 90       	pop	r15
     55e:	ef 90       	pop	r14
     560:	df 90       	pop	r13
     562:	cf 90       	pop	r12
     564:	bf 90       	pop	r11
     566:	af 90       	pop	r10
     568:	9f 90       	pop	r9
     56a:	8f 90       	pop	r8
     56c:	08 95       	ret

0000056e <clearLCD>:
 * Purpose:  Clear LCD and blink cursor
 * Inputs:	 
 * Output:
 ************************************************************************************/
 void clearLCD() {
	 Wait();
     56e:	6c de       	rcall	.-808    	; 0x248 <Wait>
	 __far_mem_write(LCD_CMD,0x0F);	// Display cursor blink
     570:	2f e0       	ldi	r18, 0x0F	; 15
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	90 e1       	ldi	r25, 0x10	; 16
     576:	a7 e4       	ldi	r26, 0x47	; 71
     578:	b0 e0       	ldi	r27, 0x00	; 0
     57a:	0b b6       	in	r0, 0x3b	; 59
     57c:	ab bf       	out	0x3b, r26	; 59
     57e:	fc 01       	movw	r30, r24
     580:	20 83       	st	Z, r18
     582:	0b be       	out	0x3b, r0	; 59
	 Wait();
     584:	61 de       	rcall	.-830    	; 0x248 <Wait>
	 __far_mem_write(LCD_CMD,0x01);	// Clear Home
     586:	21 e0       	ldi	r18, 0x01	; 1
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	90 e1       	ldi	r25, 0x10	; 16
     58c:	a7 e4       	ldi	r26, 0x47	; 71
     58e:	b0 e0       	ldi	r27, 0x00	; 0
     590:	0b b6       	in	r0, 0x3b	; 59
     592:	ab bf       	out	0x3b, r26	; 59
     594:	fc 01       	movw	r30, r24
     596:	20 83       	st	Z, r18
     598:	0b be       	out	0x3b, r0	; 59
     59a:	08 95       	ret

0000059c <playNote>:
 * Purpose:  Clear LCD and blink cursor
 * Inputs:	 CCA for note, N for note counter, PER for duration, N for duration counter
 * Output:
 ************************************************************************************/
void playNote(uint16_t noteFreq, uint8_t n, uint16_t dur, uint16_t durN) {
	TCF1_CCA = noteFreq;				// Set CCA for requested note
     59c:	80 93 68 0b 	sts	0x0B68, r24
     5a0:	90 93 69 0b 	sts	0x0B69, r25
	TCC1_PER = dur;						// Set PER for duration timer
     5a4:	40 93 66 08 	sts	0x0866, r20
     5a8:	50 93 67 08 	sts	0x0867, r21
	
	// Init both timer's counter to zero
	TCF1_CNT = 0x00;
     5ac:	e0 e6       	ldi	r30, 0x60	; 96
     5ae:	fb e0       	ldi	r31, 0x0B	; 11
     5b0:	10 82       	st	Z, r1
     5b2:	11 82       	std	Z+1, r1	; 0x01
	TCF1_CNT = 0x00;
     5b4:	10 82       	st	Z, r1
     5b6:	11 82       	std	Z+1, r1	; 0x01
	
	// Start both timer
	TCF1_CTRLA = n;						// Set the frequency we are trying to achieve
     5b8:	60 93 40 0b 	sts	0x0B40, r22
	TCC1_CTRLA = durN;					// Set N based on frequency trying to achieve
     5bc:	20 93 40 08 	sts	0x0840, r18
	
	while (TCC1_CTRLA != 0) {}		// Wait for note to be done playing
     5c0:	e0 e4       	ldi	r30, 0x40	; 64
     5c2:	f8 e0       	ldi	r31, 0x08	; 8
     5c4:	80 81       	ld	r24, Z
     5c6:	81 11       	cpse	r24, r1
     5c8:	fd cf       	rjmp	.-6      	; 0x5c4 <playNote+0x28>
}
     5ca:	08 95       	ret

000005cc <PLAY>:


void PLAY(int choice) {
     5cc:	3f 92       	push	r3
     5ce:	4f 92       	push	r4
     5d0:	5f 92       	push	r5
     5d2:	6f 92       	push	r6
     5d4:	7f 92       	push	r7
     5d6:	8f 92       	push	r8
     5d8:	9f 92       	push	r9
     5da:	af 92       	push	r10
     5dc:	bf 92       	push	r11
     5de:	cf 92       	push	r12
     5e0:	df 92       	push	r13
     5e2:	ef 92       	push	r14
     5e4:	ff 92       	push	r15
     5e6:	0f 93       	push	r16
     5e8:	1f 93       	push	r17
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29
     5ee:	cd b7       	in	r28, 0x3d	; 61
     5f0:	de b7       	in	r29, 0x3e	; 62
     5f2:	ca 54       	subi	r28, 0x4A	; 74
     5f4:	d1 09       	sbc	r29, r1
     5f6:	cd bf       	out	0x3d, r28	; 61
     5f8:	de bf       	out	0x3e, r29	; 62
     5fa:	8c 01       	movw	r16, r24
	
	// Variables declaration
	char* msg[16] = {"0.TV:Wheel of\nFortune","1.MP3:Hotline\nBling","2.BR:Avengers\nUltron","3.DVR:MR\nRobot","4.MP3:Downtown\nMacklemore","5.TV:Agent\nCarter","6.DVR:Game of\nThrones","7.RR\nwww.is.gd/WVZvnI","8.BR:Furious 7","9:NF:House of\nCards","G#6/Ab6\n1661.22 Hz","A#6/Bb6\n1864.68 Hz","B6\n1975.53 Hz","C7\n2093.00 Hz","C#7/Db7\n2217.46 Hz","Ascending\nScale","C Major\nArpergio"};
     5fc:	80 e2       	ldi	r24, 0x20	; 32
     5fe:	e0 e1       	ldi	r30, 0x10	; 16
     600:	f0 e2       	ldi	r31, 0x20	; 32
     602:	de 01       	movw	r26, r28
     604:	11 96       	adiw	r26, 0x01	; 1
     606:	01 90       	ld	r0, Z+
     608:	0d 92       	st	X+, r0
     60a:	8a 95       	dec	r24
     60c:	e1 f7       	brne	.-8      	; 0x606 <PLAY+0x3a>
	//char* msg[16] = {"A6\n1760.00 Hz","C6\n1046.50 Hz","C#6/Db6\n1108.73 Hz","D6\n1174.66 Hz","D#6/Eb6\n1244.51 Hz","E6\n1318.51 Hz","F6\n1396.91 Hz","F#6/Gb6\n1479.98 Hz","G6\n1567.98 Hz","G#6/Ab6\n1661.22 Hz","A#6/Bb6\n1864.68 Hz","B6\n1975.53 Hz","C7\n2093.00 Hz","C#7/Db7\n2217.46 Hz","Ascending\nScale","C Major\nArpergio"};
	uint16_t per[14] = {575,968,914,862,814,768,725,684,645,609,543,512,483,456};
     60e:	8c e1       	ldi	r24, 0x1C	; 28
     610:	e0 e3       	ldi	r30, 0x30	; 48
     612:	f0 e2       	ldi	r31, 0x20	; 32
     614:	de 01       	movw	r26, r28
     616:	91 96       	adiw	r26, 0x21	; 33
     618:	01 90       	ld	r0, Z+
     61a:	0d 92       	st	X+, r0
     61c:	8a 95       	dec	r24
     61e:	e1 f7       	brne	.-8      	; 0x618 <PLAY+0x4c>
	uint8_t n[14] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1};
     620:	8e e0       	ldi	r24, 0x0E	; 14
     622:	ec e4       	ldi	r30, 0x4C	; 76
     624:	f0 e2       	ldi	r31, 0x20	; 32
     626:	de 01       	movw	r26, r28
     628:	dd 96       	adiw	r26, 0x3d	; 61
     62a:	01 90       	ld	r0, Z+
     62c:	0d 92       	st	X+, r0
     62e:	8a 95       	dec	r24
     630:	e1 f7       	brne	.-8      	; 0x62a <PLAY+0x5e>
	uint16_t duration[14] = {62500,6047,14578, 15625};
	uint16_t durN[14] = {4,5,5,5};
		
	switch(choice) {
     632:	0e 30       	cpi	r16, 0x0E	; 14
     634:	11 05       	cpc	r17, r1
     636:	51 f0       	breq	.+20     	; 0x64c <PLAY+0x80>
     638:	0f 30       	cpi	r16, 0x0F	; 15
     63a:	11 05       	cpc	r17, r1
     63c:	09 f4       	brne	.+2      	; 0x640 <PLAY+0x74>
     63e:	58 c0       	rjmp	.+176    	; 0x6f0 <PLAY+0x124>
     640:	0f 3f       	cpi	r16, 0xFF	; 255
     642:	8f ef       	ldi	r24, 0xFF	; 255
     644:	18 07       	cpc	r17, r24
     646:	09 f0       	breq	.+2      	; 0x64a <PLAY+0x7e>
     648:	f0 c1       	rjmp	.+992    	; 0xa2a <PLAY+0x45e>
     64a:	09 c2       	rjmp	.+1042   	; 0xa5e <PLAY+0x492>
		case -1: // Turn OFF sounds
			break;
		case 14: // Play ascending scale or song 1
			clearLCD();								// Clear the LCD
     64c:	90 df       	rcall	.-224    	; 0x56e <clearLCD>
			sendStr(msg[choice]);					// Send message to LCD
     64e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     650:	9e 8d       	ldd	r25, Y+30	; 0x1e
     652:	50 df       	rcall	.-352    	; 0x4f4 <sendStr>
			playNote(per[12],n[12], duration[2], durN[2]);
     654:	2a 96       	adiw	r28, 0x0a	; 10
     656:	ff ac       	ldd	r15, Y+63	; 0x3f
     658:	2a 97       	sbiw	r28, 0x0a	; 10
     65a:	09 ad       	ldd	r16, Y+57	; 0x39
     65c:	1a ad       	ldd	r17, Y+58	; 0x3a
     65e:	25 e0       	ldi	r18, 0x05	; 5
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	42 ef       	ldi	r20, 0xF2	; 242
     664:	58 e3       	ldi	r21, 0x38	; 56
     666:	6f 2d       	mov	r22, r15
     668:	c8 01       	movw	r24, r16
     66a:	98 df       	rcall	.-208    	; 0x59c <playNote>
			playNote(per[3],n[3], duration[2], durN[2]);
     66c:	25 e0       	ldi	r18, 0x05	; 5
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	42 ef       	ldi	r20, 0xF2	; 242
     672:	58 e3       	ldi	r21, 0x38	; 56
     674:	21 96       	adiw	r28, 0x01	; 1
     676:	6f ad       	ldd	r22, Y+63	; 0x3f
     678:	21 97       	sbiw	r28, 0x01	; 1
     67a:	8f a1       	ldd	r24, Y+39	; 0x27
     67c:	98 a5       	ldd	r25, Y+40	; 0x28
     67e:	8e df       	rcall	.-228    	; 0x59c <playNote>
			playNote(per[5],n[5], duration[2], durN[2]);
     680:	25 e0       	ldi	r18, 0x05	; 5
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	42 ef       	ldi	r20, 0xF2	; 242
     686:	58 e3       	ldi	r21, 0x38	; 56
     688:	23 96       	adiw	r28, 0x03	; 3
     68a:	6f ad       	ldd	r22, Y+63	; 0x3f
     68c:	23 97       	sbiw	r28, 0x03	; 3
     68e:	8b a5       	ldd	r24, Y+43	; 0x2b
     690:	9c a5       	ldd	r25, Y+44	; 0x2c
     692:	84 df       	rcall	.-248    	; 0x59c <playNote>
			playNote(per[6],n[6], duration[2], durN[2]);
     694:	25 e0       	ldi	r18, 0x05	; 5
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	42 ef       	ldi	r20, 0xF2	; 242
     69a:	58 e3       	ldi	r21, 0x38	; 56
     69c:	24 96       	adiw	r28, 0x04	; 4
     69e:	6f ad       	ldd	r22, Y+63	; 0x3f
     6a0:	24 97       	sbiw	r28, 0x04	; 4
     6a2:	8d a5       	ldd	r24, Y+45	; 0x2d
     6a4:	9e a5       	ldd	r25, Y+46	; 0x2e
     6a6:	7a df       	rcall	.-268    	; 0x59c <playNote>
			playNote(per[8],n[8], duration[2], durN[2]);
     6a8:	25 e0       	ldi	r18, 0x05	; 5
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	42 ef       	ldi	r20, 0xF2	; 242
     6ae:	58 e3       	ldi	r21, 0x38	; 56
     6b0:	26 96       	adiw	r28, 0x06	; 6
     6b2:	6f ad       	ldd	r22, Y+63	; 0x3f
     6b4:	26 97       	sbiw	r28, 0x06	; 6
     6b6:	89 a9       	ldd	r24, Y+49	; 0x31
     6b8:	9a a9       	ldd	r25, Y+50	; 0x32
     6ba:	70 df       	rcall	.-288    	; 0x59c <playNote>
			playNote(per[0],n[0], duration[2], durN[2]);
     6bc:	25 e0       	ldi	r18, 0x05	; 5
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	42 ef       	ldi	r20, 0xF2	; 242
     6c2:	58 e3       	ldi	r21, 0x38	; 56
     6c4:	6d ad       	ldd	r22, Y+61	; 0x3d
     6c6:	89 a1       	ldd	r24, Y+33	; 0x21
     6c8:	9a a1       	ldd	r25, Y+34	; 0x22
     6ca:	68 df       	rcall	.-304    	; 0x59c <playNote>
			playNote(per[11],n[11], duration[2], durN[2]);
     6cc:	25 e0       	ldi	r18, 0x05	; 5
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	42 ef       	ldi	r20, 0xF2	; 242
     6d2:	58 e3       	ldi	r21, 0x38	; 56
     6d4:	29 96       	adiw	r28, 0x09	; 9
     6d6:	6f ad       	ldd	r22, Y+63	; 0x3f
     6d8:	29 97       	sbiw	r28, 0x09	; 9
     6da:	8f a9       	ldd	r24, Y+55	; 0x37
     6dc:	98 ad       	ldd	r25, Y+56	; 0x38
     6de:	5e df       	rcall	.-324    	; 0x59c <playNote>
			playNote(per[12],n[12], duration[2], durN[2]);
     6e0:	25 e0       	ldi	r18, 0x05	; 5
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	42 ef       	ldi	r20, 0xF2	; 242
     6e6:	58 e3       	ldi	r21, 0x38	; 56
     6e8:	6f 2d       	mov	r22, r15
     6ea:	c8 01       	movw	r24, r16
     6ec:	57 df       	rcall	.-338    	; 0x59c <playNote>
			break;
     6ee:	b7 c1       	rjmp	.+878    	; 0xa5e <PLAY+0x492>
		case 15: // Play C major Arpergio or song 2
			// HOTLINE BLING
			clearLCD();
     6f0:	3e df       	rcall	.-388    	; 0x56e <clearLCD>
			sendStr("Hotline Bling\nby Drake");
     6f2:	8a e5       	ldi	r24, 0x5A	; 90
     6f4:	90 e2       	ldi	r25, 0x20	; 32
     6f6:	fe de       	rcall	.-516    	; 0x4f4 <sendStr>
			playNote(per[3],n[3], duration[0], durN[0]);
     6f8:	21 96       	adiw	r28, 0x01	; 1
     6fa:	df ac       	ldd	r13, Y+63	; 0x3f
     6fc:	21 97       	sbiw	r28, 0x01	; 1
     6fe:	0f a1       	ldd	r16, Y+39	; 0x27
     700:	18 a5       	ldd	r17, Y+40	; 0x28
     702:	24 e0       	ldi	r18, 0x04	; 4
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	44 e2       	ldi	r20, 0x24	; 36
     708:	54 ef       	ldi	r21, 0xF4	; 244
     70a:	6d 2d       	mov	r22, r13
     70c:	c8 01       	movw	r24, r16
     70e:	46 df       	rcall	.-372    	; 0x59c <playNote>
			playNote(per[3],n[3], duration[0], durN[0]);
     710:	24 e0       	ldi	r18, 0x04	; 4
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	44 e2       	ldi	r20, 0x24	; 36
     716:	54 ef       	ldi	r21, 0xF4	; 244
     718:	6d 2d       	mov	r22, r13
     71a:	c8 01       	movw	r24, r16
     71c:	3f df       	rcall	.-386    	; 0x59c <playNote>
			playNote(per[3],n[3], duration[0], durN[0]);
     71e:	24 e0       	ldi	r18, 0x04	; 4
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	44 e2       	ldi	r20, 0x24	; 36
     724:	54 ef       	ldi	r21, 0xF4	; 244
     726:	6d 2d       	mov	r22, r13
     728:	c8 01       	movw	r24, r16
     72a:	38 df       	rcall	.-400    	; 0x59c <playNote>
			playNote(per[6],n[6], duration[0], durN[0]);
     72c:	24 e0       	ldi	r18, 0x04	; 4
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	44 e2       	ldi	r20, 0x24	; 36
     732:	54 ef       	ldi	r21, 0xF4	; 244
     734:	24 96       	adiw	r28, 0x04	; 4
     736:	6f ad       	ldd	r22, Y+63	; 0x3f
     738:	24 97       	sbiw	r28, 0x04	; 4
     73a:	8d a5       	ldd	r24, Y+45	; 0x2d
     73c:	9e a5       	ldd	r25, Y+46	; 0x2e
     73e:	2e df       	rcall	.-420    	; 0x59c <playNote>
			playNote(per[5],n[5], duration[0], durN[0]);
     740:	23 96       	adiw	r28, 0x03	; 3
     742:	cf ac       	ldd	r12, Y+63	; 0x3f
     744:	23 97       	sbiw	r28, 0x03	; 3
     746:	eb a4       	ldd	r14, Y+43	; 0x2b
     748:	fc a4       	ldd	r15, Y+44	; 0x2c
     74a:	24 e0       	ldi	r18, 0x04	; 4
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	44 e2       	ldi	r20, 0x24	; 36
     750:	54 ef       	ldi	r21, 0xF4	; 244
     752:	6c 2d       	mov	r22, r12
     754:	c7 01       	movw	r24, r14
     756:	22 df       	rcall	.-444    	; 0x59c <playNote>
			playNote(per[3],n[3], duration[0], durN[0]);
     758:	24 e0       	ldi	r18, 0x04	; 4
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	44 e2       	ldi	r20, 0x24	; 36
     75e:	54 ef       	ldi	r21, 0xF4	; 244
     760:	6d 2d       	mov	r22, r13
     762:	c8 01       	movw	r24, r16
     764:	1b df       	rcall	.-458    	; 0x59c <playNote>
			playNote(per[1],n[1], duration[0], durN[0]);
     766:	de ac       	ldd	r13, Y+62	; 0x3e
     768:	0b a1       	ldd	r16, Y+35	; 0x23
     76a:	1c a1       	ldd	r17, Y+36	; 0x24
     76c:	24 e0       	ldi	r18, 0x04	; 4
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	44 e2       	ldi	r20, 0x24	; 36
     772:	54 ef       	ldi	r21, 0xF4	; 244
     774:	6d 2d       	mov	r22, r13
     776:	c8 01       	movw	r24, r16
     778:	11 df       	rcall	.-478    	; 0x59c <playNote>
			playNote(per[5],n[5], duration[2], durN[2]);
     77a:	25 e0       	ldi	r18, 0x05	; 5
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	42 ef       	ldi	r20, 0xF2	; 242
     780:	58 e3       	ldi	r21, 0x38	; 56
     782:	6c 2d       	mov	r22, r12
     784:	c7 01       	movw	r24, r14
     786:	0a df       	rcall	.-492    	; 0x59c <playNote>
			playNote(per[1],n[1], duration[2], durN[2]);
     788:	25 e0       	ldi	r18, 0x05	; 5
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	42 ef       	ldi	r20, 0xF2	; 242
     78e:	58 e3       	ldi	r21, 0x38	; 56
     790:	6d 2d       	mov	r22, r13
     792:	c8 01       	movw	r24, r16
     794:	03 df       	rcall	.-506    	; 0x59c <playNote>
			
			// Delay for 1 second
			PORTF_DIRTGL = 0xFF;						// Turn OFF sounds
     796:	03 ea       	ldi	r16, 0xA3	; 163
     798:	16 e0       	ldi	r17, 0x06	; 6
     79a:	bb 24       	eor	r11, r11
     79c:	ba 94       	dec	r11
     79e:	f8 01       	movw	r30, r16
     7a0:	b0 82       	st	Z, r11
			playNote(per[1],n[1], duration[3], durN[3]);
     7a2:	de ac       	ldd	r13, Y+62	; 0x3e
     7a4:	eb a0       	ldd	r14, Y+35	; 0x23
     7a6:	fc a0       	ldd	r15, Y+36	; 0x24
     7a8:	25 e0       	ldi	r18, 0x05	; 5
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	49 e0       	ldi	r20, 0x09	; 9
     7ae:	5d e3       	ldi	r21, 0x3D	; 61
     7b0:	6d 2d       	mov	r22, r13
     7b2:	c7 01       	movw	r24, r14
     7b4:	f3 de       	rcall	.-538    	; 0x59c <playNote>
			playNote(per[1],n[1], duration[3], durN[3]);
     7b6:	25 e0       	ldi	r18, 0x05	; 5
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	49 e0       	ldi	r20, 0x09	; 9
     7bc:	5d e3       	ldi	r21, 0x3D	; 61
     7be:	6d 2d       	mov	r22, r13
     7c0:	c7 01       	movw	r24, r14
     7c2:	ec de       	rcall	.-552    	; 0x59c <playNote>
			playNote(per[1],n[1], duration[3], durN[3]);
     7c4:	25 e0       	ldi	r18, 0x05	; 5
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	49 e0       	ldi	r20, 0x09	; 9
     7ca:	5d e3       	ldi	r21, 0x3D	; 61
     7cc:	6d 2d       	mov	r22, r13
     7ce:	c7 01       	movw	r24, r14
     7d0:	e5 de       	rcall	.-566    	; 0x59c <playNote>
			playNote(per[1],n[1], duration[3], durN[3]);
     7d2:	25 e0       	ldi	r18, 0x05	; 5
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	49 e0       	ldi	r20, 0x09	; 9
     7d8:	5d e3       	ldi	r21, 0x3D	; 61
     7da:	6d 2d       	mov	r22, r13
     7dc:	c7 01       	movw	r24, r14
     7de:	de de       	rcall	.-580    	; 0x59c <playNote>
			PORTF_DIRTGL = 0xFF;						// Reset sound setting
     7e0:	f8 01       	movw	r30, r16
     7e2:	b0 82       	st	Z, r11
			
			playNote(per[6],n[6], duration[0], durN[0]);
     7e4:	24 e0       	ldi	r18, 0x04	; 4
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	44 e2       	ldi	r20, 0x24	; 36
     7ea:	54 ef       	ldi	r21, 0xF4	; 244
     7ec:	24 96       	adiw	r28, 0x04	; 4
     7ee:	6f ad       	ldd	r22, Y+63	; 0x3f
     7f0:	24 97       	sbiw	r28, 0x04	; 4
     7f2:	8d a5       	ldd	r24, Y+45	; 0x2d
     7f4:	9e a5       	ldd	r25, Y+46	; 0x2e
     7f6:	d2 de       	rcall	.-604    	; 0x59c <playNote>
			playNote(per[5],n[5], duration[0], durN[0]);
     7f8:	23 96       	adiw	r28, 0x03	; 3
     7fa:	9f ac       	ldd	r9, Y+63	; 0x3f
     7fc:	23 97       	sbiw	r28, 0x03	; 3
     7fe:	cb a4       	ldd	r12, Y+43	; 0x2b
     800:	dc a4       	ldd	r13, Y+44	; 0x2c
     802:	24 e0       	ldi	r18, 0x04	; 4
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	44 e2       	ldi	r20, 0x24	; 36
     808:	54 ef       	ldi	r21, 0xF4	; 244
     80a:	69 2d       	mov	r22, r9
     80c:	c6 01       	movw	r24, r12
     80e:	c6 de       	rcall	.-628    	; 0x59c <playNote>
			playNote(per[3],n[3], duration[0], durN[0]);
     810:	24 e0       	ldi	r18, 0x04	; 4
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	44 e2       	ldi	r20, 0x24	; 36
     816:	54 ef       	ldi	r21, 0xF4	; 244
     818:	21 96       	adiw	r28, 0x01	; 1
     81a:	6f ad       	ldd	r22, Y+63	; 0x3f
     81c:	21 97       	sbiw	r28, 0x01	; 1
     81e:	8f a1       	ldd	r24, Y+39	; 0x27
     820:	98 a5       	ldd	r25, Y+40	; 0x28
     822:	bc de       	rcall	.-648    	; 0x59c <playNote>
			playNote(per[1],n[1], duration[0], durN[0]);
     824:	ae ac       	ldd	r10, Y+62	; 0x3e
     826:	eb a0       	ldd	r14, Y+35	; 0x23
     828:	fc a0       	ldd	r15, Y+36	; 0x24
     82a:	24 e0       	ldi	r18, 0x04	; 4
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	44 e2       	ldi	r20, 0x24	; 36
     830:	54 ef       	ldi	r21, 0xF4	; 244
     832:	6a 2d       	mov	r22, r10
     834:	c7 01       	movw	r24, r14
     836:	b2 de       	rcall	.-668    	; 0x59c <playNote>
			playNote(per[5],n[5], duration[3], durN[3]);
     838:	25 e0       	ldi	r18, 0x05	; 5
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	49 e0       	ldi	r20, 0x09	; 9
     83e:	5d e3       	ldi	r21, 0x3D	; 61
     840:	69 2d       	mov	r22, r9
     842:	c6 01       	movw	r24, r12
     844:	ab de       	rcall	.-682    	; 0x59c <playNote>
			playNote(per[1],n[1], duration[3], durN[3]);
     846:	25 e0       	ldi	r18, 0x05	; 5
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	49 e0       	ldi	r20, 0x09	; 9
     84c:	5d e3       	ldi	r21, 0x3D	; 61
     84e:	6a 2d       	mov	r22, r10
     850:	c7 01       	movw	r24, r14
     852:	a4 de       	rcall	.-696    	; 0x59c <playNote>
			playNote(per[0],n[0], duration[3], durN[3]);
     854:	25 e0       	ldi	r18, 0x05	; 5
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	49 e0       	ldi	r20, 0x09	; 9
     85a:	5d e3       	ldi	r21, 0x3D	; 61
     85c:	6d ad       	ldd	r22, Y+61	; 0x3d
     85e:	89 a1       	ldd	r24, Y+33	; 0x21
     860:	9a a1       	ldd	r25, Y+34	; 0x22
     862:	9c de       	rcall	.-712    	; 0x59c <playNote>
			
			// Delay for 1 second
			PORTF_DIRTGL = 0xFF;						// Turn OFF sounds
     864:	f8 01       	movw	r30, r16
     866:	b0 82       	st	Z, r11
			playNote(per[1],n[1], duration[3], durN[3]);
     868:	de ac       	ldd	r13, Y+62	; 0x3e
     86a:	eb a0       	ldd	r14, Y+35	; 0x23
     86c:	fc a0       	ldd	r15, Y+36	; 0x24
     86e:	25 e0       	ldi	r18, 0x05	; 5
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	49 e0       	ldi	r20, 0x09	; 9
     874:	5d e3       	ldi	r21, 0x3D	; 61
     876:	6d 2d       	mov	r22, r13
     878:	c7 01       	movw	r24, r14
     87a:	90 de       	rcall	.-736    	; 0x59c <playNote>
			playNote(per[1],n[1], duration[3], durN[3]);
     87c:	25 e0       	ldi	r18, 0x05	; 5
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	49 e0       	ldi	r20, 0x09	; 9
     882:	5d e3       	ldi	r21, 0x3D	; 61
     884:	6d 2d       	mov	r22, r13
     886:	c7 01       	movw	r24, r14
     888:	89 de       	rcall	.-750    	; 0x59c <playNote>
			playNote(per[1],n[1], duration[3], durN[3]);
     88a:	25 e0       	ldi	r18, 0x05	; 5
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	49 e0       	ldi	r20, 0x09	; 9
     890:	5d e3       	ldi	r21, 0x3D	; 61
     892:	6d 2d       	mov	r22, r13
     894:	c7 01       	movw	r24, r14
     896:	82 de       	rcall	.-764    	; 0x59c <playNote>
			playNote(per[1],n[1], duration[3], durN[3]);
     898:	25 e0       	ldi	r18, 0x05	; 5
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	49 e0       	ldi	r20, 0x09	; 9
     89e:	5d e3       	ldi	r21, 0x3D	; 61
     8a0:	6d 2d       	mov	r22, r13
     8a2:	c7 01       	movw	r24, r14
     8a4:	7b de       	rcall	.-778    	; 0x59c <playNote>
			PORTF_DIRTGL = 0xFF;						// Reset sound setting
     8a6:	f8 01       	movw	r30, r16
     8a8:	b0 82       	st	Z, r11
			
			playNote(per[6],n[6], duration[0], durN[0]);
     8aa:	24 96       	adiw	r28, 0x04	; 4
     8ac:	4f ac       	ldd	r4, Y+63	; 0x3f
     8ae:	24 97       	sbiw	r28, 0x04	; 4
     8b0:	ad a4       	ldd	r10, Y+45	; 0x2d
     8b2:	be a4       	ldd	r11, Y+46	; 0x2e
     8b4:	24 e0       	ldi	r18, 0x04	; 4
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	44 e2       	ldi	r20, 0x24	; 36
     8ba:	54 ef       	ldi	r21, 0xF4	; 244
     8bc:	64 2d       	mov	r22, r4
     8be:	c5 01       	movw	r24, r10
     8c0:	6d de       	rcall	.-806    	; 0x59c <playNote>
			playNote(per[12],n[12], duration[1], durN[1]);
     8c2:	2a 96       	adiw	r28, 0x0a	; 10
     8c4:	7f ac       	ldd	r7, Y+63	; 0x3f
     8c6:	2a 97       	sbiw	r28, 0x0a	; 10
     8c8:	09 ad       	ldd	r16, Y+57	; 0x39
     8ca:	1a ad       	ldd	r17, Y+58	; 0x3a
     8cc:	25 e0       	ldi	r18, 0x05	; 5
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	4f e9       	ldi	r20, 0x9F	; 159
     8d2:	57 e1       	ldi	r21, 0x17	; 23
     8d4:	67 2d       	mov	r22, r7
     8d6:	c8 01       	movw	r24, r16
     8d8:	61 de       	rcall	.-830    	; 0x59c <playNote>
			playNote(per[12],n[12], duration[0], durN[0]);
     8da:	24 e0       	ldi	r18, 0x04	; 4
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	44 e2       	ldi	r20, 0x24	; 36
     8e0:	54 ef       	ldi	r21, 0xF4	; 244
     8e2:	67 2d       	mov	r22, r7
     8e4:	c8 01       	movw	r24, r16
     8e6:	5a de       	rcall	.-844    	; 0x59c <playNote>
			playNote(per[12],n[12], duration[0], durN[0]);
     8e8:	24 e0       	ldi	r18, 0x04	; 4
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	44 e2       	ldi	r20, 0x24	; 36
     8ee:	54 ef       	ldi	r21, 0xF4	; 244
     8f0:	67 2d       	mov	r22, r7
     8f2:	c8 01       	movw	r24, r16
     8f4:	53 de       	rcall	.-858    	; 0x59c <playNote>
			playNote(per[0],n[0], duration[0], durN[0]);
     8f6:	6d ac       	ldd	r6, Y+61	; 0x3d
     8f8:	e9 a0       	ldd	r14, Y+33	; 0x21
     8fa:	fa a0       	ldd	r15, Y+34	; 0x22
     8fc:	24 e0       	ldi	r18, 0x04	; 4
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	44 e2       	ldi	r20, 0x24	; 36
     902:	54 ef       	ldi	r21, 0xF4	; 244
     904:	66 2d       	mov	r22, r6
     906:	c7 01       	movw	r24, r14
     908:	49 de       	rcall	.-878    	; 0x59c <playNote>
			playNote(per[12],n[12], duration[0], durN[0]);
     90a:	24 e0       	ldi	r18, 0x04	; 4
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	44 e2       	ldi	r20, 0x24	; 36
     910:	54 ef       	ldi	r21, 0xF4	; 244
     912:	67 2d       	mov	r22, r7
     914:	c8 01       	movw	r24, r16
     916:	42 de       	rcall	.-892    	; 0x59c <playNote>
			playNote(per[12],n[12], duration[0], durN[0]);
     918:	24 e0       	ldi	r18, 0x04	; 4
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	44 e2       	ldi	r20, 0x24	; 36
     91e:	54 ef       	ldi	r21, 0xF4	; 244
     920:	67 2d       	mov	r22, r7
     922:	c8 01       	movw	r24, r16
     924:	3b de       	rcall	.-906    	; 0x59c <playNote>
			playNote(per[13],n[13], duration[2], durN[2]);
     926:	2b 96       	adiw	r28, 0x0b	; 11
     928:	3f ac       	ldd	r3, Y+63	; 0x3f
     92a:	2b 97       	sbiw	r28, 0x0b	; 11
     92c:	8b ac       	ldd	r8, Y+59	; 0x3b
     92e:	9c ac       	ldd	r9, Y+60	; 0x3c
     930:	25 e0       	ldi	r18, 0x05	; 5
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	42 ef       	ldi	r20, 0xF2	; 242
     936:	58 e3       	ldi	r21, 0x38	; 56
     938:	63 2d       	mov	r22, r3
     93a:	c4 01       	movw	r24, r8
     93c:	2f de       	rcall	.-930    	; 0x59c <playNote>
			
			
			playNote(per[6],n[6], duration[0], durN[0]);
     93e:	24 e0       	ldi	r18, 0x04	; 4
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	44 e2       	ldi	r20, 0x24	; 36
     944:	54 ef       	ldi	r21, 0xF4	; 244
     946:	64 2d       	mov	r22, r4
     948:	c5 01       	movw	r24, r10
     94a:	28 de       	rcall	.-944    	; 0x59c <playNote>
			playNote(per[0],n[0], duration[0], durN[0]);
     94c:	24 e0       	ldi	r18, 0x04	; 4
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	44 e2       	ldi	r20, 0x24	; 36
     952:	54 ef       	ldi	r21, 0xF4	; 244
     954:	66 2d       	mov	r22, r6
     956:	c7 01       	movw	r24, r14
     958:	21 de       	rcall	.-958    	; 0x59c <playNote>
			playNote(per[8],n[8], duration[0], durN[0]);
     95a:	26 96       	adiw	r28, 0x06	; 6
     95c:	5f ac       	ldd	r5, Y+63	; 0x3f
     95e:	26 97       	sbiw	r28, 0x06	; 6
     960:	c9 a8       	ldd	r12, Y+49	; 0x31
     962:	da a8       	ldd	r13, Y+50	; 0x32
     964:	24 e0       	ldi	r18, 0x04	; 4
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	44 e2       	ldi	r20, 0x24	; 36
     96a:	54 ef       	ldi	r21, 0xF4	; 244
     96c:	65 2d       	mov	r22, r5
     96e:	c6 01       	movw	r24, r12
     970:	15 de       	rcall	.-982    	; 0x59c <playNote>
			playNote(per[6],n[6], duration[0], durN[0]);
     972:	24 e0       	ldi	r18, 0x04	; 4
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	44 e2       	ldi	r20, 0x24	; 36
     978:	54 ef       	ldi	r21, 0xF4	; 244
     97a:	64 2d       	mov	r22, r4
     97c:	c5 01       	movw	r24, r10
     97e:	0e de       	rcall	.-996    	; 0x59c <playNote>
			playNote(per[8],n[8], duration[0], durN[0]);
     980:	24 e0       	ldi	r18, 0x04	; 4
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	44 e2       	ldi	r20, 0x24	; 36
     986:	54 ef       	ldi	r21, 0xF4	; 244
     988:	65 2d       	mov	r22, r5
     98a:	c6 01       	movw	r24, r12
     98c:	07 de       	rcall	.-1010   	; 0x59c <playNote>
			playNote(per[8],n[8], duration[0], durN[0]);
     98e:	24 e0       	ldi	r18, 0x04	; 4
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	44 e2       	ldi	r20, 0x24	; 36
     994:	54 ef       	ldi	r21, 0xF4	; 244
     996:	65 2d       	mov	r22, r5
     998:	c6 01       	movw	r24, r12
     99a:	00 de       	rcall	.-1024   	; 0x59c <playNote>
			playNote(per[0],n[0], duration[2], durN[2]);
     99c:	25 e0       	ldi	r18, 0x05	; 5
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	42 ef       	ldi	r20, 0xF2	; 242
     9a2:	58 e3       	ldi	r21, 0x38	; 56
     9a4:	66 2d       	mov	r22, r6
     9a6:	c7 01       	movw	r24, r14
     9a8:	f9 dd       	rcall	.-1038   	; 0x59c <playNote>
			
			
			playNote(per[12],n[12], duration[0], durN[0]);
     9aa:	24 e0       	ldi	r18, 0x04	; 4
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	44 e2       	ldi	r20, 0x24	; 36
     9b0:	54 ef       	ldi	r21, 0xF4	; 244
     9b2:	67 2d       	mov	r22, r7
     9b4:	c8 01       	movw	r24, r16
     9b6:	f2 dd       	rcall	.-1052   	; 0x59c <playNote>
			playNote(per[0],n[0], duration[0], durN[0]);
     9b8:	24 e0       	ldi	r18, 0x04	; 4
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	44 e2       	ldi	r20, 0x24	; 36
     9be:	54 ef       	ldi	r21, 0xF4	; 244
     9c0:	66 2d       	mov	r22, r6
     9c2:	c7 01       	movw	r24, r14
     9c4:	eb dd       	rcall	.-1066   	; 0x59c <playNote>
			playNote(per[12],n[12], duration[0], durN[0]);
     9c6:	24 e0       	ldi	r18, 0x04	; 4
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	44 e2       	ldi	r20, 0x24	; 36
     9cc:	54 ef       	ldi	r21, 0xF4	; 244
     9ce:	67 2d       	mov	r22, r7
     9d0:	c8 01       	movw	r24, r16
     9d2:	e4 dd       	rcall	.-1080   	; 0x59c <playNote>
			playNote(per[0],n[0], duration[0], durN[0]);
     9d4:	24 e0       	ldi	r18, 0x04	; 4
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	44 e2       	ldi	r20, 0x24	; 36
     9da:	54 ef       	ldi	r21, 0xF4	; 244
     9dc:	66 2d       	mov	r22, r6
     9de:	c7 01       	movw	r24, r14
     9e0:	dd dd       	rcall	.-1094   	; 0x59c <playNote>
			playNote(per[12],n[12], duration[0], durN[0]);
     9e2:	24 e0       	ldi	r18, 0x04	; 4
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	44 e2       	ldi	r20, 0x24	; 36
     9e8:	54 ef       	ldi	r21, 0xF4	; 244
     9ea:	67 2d       	mov	r22, r7
     9ec:	c8 01       	movw	r24, r16
     9ee:	d6 dd       	rcall	.-1108   	; 0x59c <playNote>
			playNote(per[0],n[0], duration[0], durN[0]);
     9f0:	24 e0       	ldi	r18, 0x04	; 4
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	44 e2       	ldi	r20, 0x24	; 36
     9f6:	54 ef       	ldi	r21, 0xF4	; 244
     9f8:	66 2d       	mov	r22, r6
     9fa:	c7 01       	movw	r24, r14
     9fc:	cf dd       	rcall	.-1122   	; 0x59c <playNote>
			playNote(per[12],n[12], duration[0], durN[0]);
     9fe:	24 e0       	ldi	r18, 0x04	; 4
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	44 e2       	ldi	r20, 0x24	; 36
     a04:	54 ef       	ldi	r21, 0xF4	; 244
     a06:	67 2d       	mov	r22, r7
     a08:	c8 01       	movw	r24, r16
     a0a:	c8 dd       	rcall	.-1136   	; 0x59c <playNote>
			playNote(per[0],n[0], duration[0], durN[0]);
     a0c:	24 e0       	ldi	r18, 0x04	; 4
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	44 e2       	ldi	r20, 0x24	; 36
     a12:	54 ef       	ldi	r21, 0xF4	; 244
     a14:	66 2d       	mov	r22, r6
     a16:	c7 01       	movw	r24, r14
     a18:	c1 dd       	rcall	.-1150   	; 0x59c <playNote>
			playNote(per[13],n[13], duration[2], durN[2]);
     a1a:	25 e0       	ldi	r18, 0x05	; 5
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	42 ef       	ldi	r20, 0xF2	; 242
     a20:	58 e3       	ldi	r21, 0x38	; 56
     a22:	63 2d       	mov	r22, r3
     a24:	c4 01       	movw	r24, r8
     a26:	ba dd       	rcall	.-1164   	; 0x59c <playNote>
			break;
     a28:	1a c0       	rjmp	.+52     	; 0xa5e <PLAY+0x492>
		default: // Play Note
			clearLCD();								// Clear the LCD
     a2a:	a1 dd       	rcall	.-1214   	; 0x56e <clearLCD>
			sendStr(msg[choice]);					// Send message to LCD
     a2c:	78 01       	movw	r14, r16
     a2e:	ee 0c       	add	r14, r14
     a30:	ff 1c       	adc	r15, r15
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	8c 0f       	add	r24, r28
     a38:	9d 1f       	adc	r25, r29
     a3a:	e8 0e       	add	r14, r24
     a3c:	f9 1e       	adc	r15, r25
     a3e:	f7 01       	movw	r30, r14
     a40:	80 81       	ld	r24, Z
     a42:	91 81       	ldd	r25, Z+1	; 0x01
     a44:	57 dd       	rcall	.-1362   	; 0x4f4 <sendStr>
			playNote(per[choice],n[choice], duration[0], durN[0]);
     a46:	fe 01       	movw	r30, r28
     a48:	e0 0f       	add	r30, r16
     a4a:	f1 1f       	adc	r31, r17
     a4c:	24 e0       	ldi	r18, 0x04	; 4
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	44 e2       	ldi	r20, 0x24	; 36
     a52:	54 ef       	ldi	r21, 0xF4	; 244
     a54:	65 ad       	ldd	r22, Z+61	; 0x3d
     a56:	f7 01       	movw	r30, r14
     a58:	80 a1       	ldd	r24, Z+32	; 0x20
     a5a:	91 a1       	ldd	r25, Z+33	; 0x21
     a5c:	9f dd       	rcall	.-1218   	; 0x59c <playNote>
			break;
	}
}
     a5e:	c6 5b       	subi	r28, 0xB6	; 182
     a60:	df 4f       	sbci	r29, 0xFF	; 255
     a62:	cd bf       	out	0x3d, r28	; 61
     a64:	de bf       	out	0x3e, r29	; 62
     a66:	df 91       	pop	r29
     a68:	cf 91       	pop	r28
     a6a:	1f 91       	pop	r17
     a6c:	0f 91       	pop	r16
     a6e:	ff 90       	pop	r15
     a70:	ef 90       	pop	r14
     a72:	df 90       	pop	r13
     a74:	cf 90       	pop	r12
     a76:	bf 90       	pop	r11
     a78:	af 90       	pop	r10
     a7a:	9f 90       	pop	r9
     a7c:	8f 90       	pop	r8
     a7e:	7f 90       	pop	r7
     a80:	6f 90       	pop	r6
     a82:	5f 90       	pop	r5
     a84:	4f 90       	pop	r4
     a86:	3f 90       	pop	r3
     a88:	08 95       	ret

00000a8a <READ_KEY>:

void READ_KEY() {
     a8a:	cf 92       	push	r12
     a8c:	df 92       	push	r13
     a8e:	ef 92       	push	r14
     a90:	ff 92       	push	r15
     a92:	0f 93       	push	r16
     a94:	1f 93       	push	r17
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
	
	if(menuChoice == 1) {
     a9a:	80 91 12 22 	lds	r24, 0x2212
     a9e:	90 91 13 22 	lds	r25, 0x2213
     aa2:	01 97       	sbiw	r24, 0x01	; 1
     aa4:	79 f5       	brne	.+94     	; 0xb04 <READ_KEY+0x7a>
		// Prompt user to press in keypad which key will be recorded
		clearLCD();									// Clear LCD screen
     aa6:	63 dd       	rcall	.-1338   	; 0x56e <clearLCD>
		sendStr("Press a key\nin keypad");			// Tell user to press a key in keypad
     aa8:	8f e9       	ldi	r24, 0x9F	; 159
     aaa:	91 e2       	ldi	r25, 0x21	; 33
     aac:	23 dd       	rcall	.-1466   	; 0x4f4 <sendStr>
		recordKey = SCAN_KEYPAD();				// Read key from the user
     aae:	aa dc       	rcall	.-1708   	; 0x404 <SCAN_KEYPAD>
     ab0:	80 93 14 22 	sts	0x2214, r24
     ab4:	90 93 15 22 	sts	0x2215, r25
		while(recordKey < 0 || recordKey > 9){	// Wait for key to be released
     ab8:	0a 97       	sbiw	r24, 0x0a	; 10
     aba:	38 f0       	brcs	.+14     	; 0xaca <READ_KEY+0x40>
			recordKey = SCAN_KEYPAD();
     abc:	a3 dc       	rcall	.-1722   	; 0x404 <SCAN_KEYPAD>
     abe:	80 93 14 22 	sts	0x2214, r24
     ac2:	90 93 15 22 	sts	0x2215, r25
	if(menuChoice == 1) {
		// Prompt user to press in keypad which key will be recorded
		clearLCD();									// Clear LCD screen
		sendStr("Press a key\nin keypad");			// Tell user to press a key in keypad
		recordKey = SCAN_KEYPAD();				// Read key from the user
		while(recordKey < 0 || recordKey > 9){	// Wait for key to be released
     ac6:	0a 97       	sbiw	r24, 0x0a	; 10
     ac8:	c8 f7       	brcc	.-14     	; 0xabc <READ_KEY+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aca:	2f e7       	ldi	r18, 0x7F	; 127
     acc:	3a e1       	ldi	r19, 0x1A	; 26
     ace:	86 e0       	ldi	r24, 0x06	; 6
     ad0:	21 50       	subi	r18, 0x01	; 1
     ad2:	30 40       	sbci	r19, 0x00	; 0
     ad4:	80 40       	sbci	r24, 0x00	; 0
     ad6:	e1 f7       	brne	.-8      	; 0xad0 <READ_KEY+0x46>
     ad8:	00 c0       	rjmp	.+0      	; 0xada <READ_KEY+0x50>
     ada:	00 00       	nop
			recordKey = SCAN_KEYPAD();
		}
		_delay_ms(2000);							// Delay for 2 second so user have time
		
		// Prompt user to press key in remote
		clearLCD();									// Clear LCD screen
     adc:	48 dd       	rcall	.-1392   	; 0x56e <clearLCD>
		sendStr("Press same key\nin remote");		// Let user know that key is recording
     ade:	85 eb       	ldi	r24, 0xB5	; 181
     ae0:	91 e2       	ldi	r25, 0x21	; 33
     ae2:	08 dd       	rcall	.-1520   	; 0x4f4 <sendStr>
		tmpCounter = 0;
     ae4:	10 92 16 22 	sts	0x2216, r1
     ae8:	10 92 17 22 	sts	0x2217, r1
     aec:	9f e7       	ldi	r25, 0x7F	; 127
     aee:	ea e1       	ldi	r30, 0x1A	; 26
     af0:	f6 e0       	ldi	r31, 0x06	; 6
     af2:	91 50       	subi	r25, 0x01	; 1
     af4:	e0 40       	sbci	r30, 0x00	; 0
     af6:	f0 40       	sbci	r31, 0x00	; 0
     af8:	e1 f7       	brne	.-8      	; 0xaf2 <READ_KEY+0x68>
     afa:	00 c0       	rjmp	.+0      	; 0xafc <READ_KEY+0x72>
     afc:	00 00       	nop
		_delay_ms(2000);						// Delay for 2 second so user have time to push buttons
	}
	
	
	while(recordInSession == true) {			// Wait for remote signal to be done processed
		if(TCC0_CTRLA == 0x00) {
     afe:	e0 e0       	ldi	r30, 0x00	; 0
     b00:	f8 e0       	ldi	r31, 0x08	; 8
     b02:	19 c0       	rjmp	.+50     	; 0xb36 <READ_KEY+0xac>
		// Enable CCA in TCF0_INTCTRLB
		_delay_ms(2000);							// Delay for 2 second so user have time to push buttons
	}
	else {
		// Prompt user to press key in remote
		clearLCD();								// Clear LCD screen
     b04:	34 dd       	rcall	.-1432   	; 0x56e <clearLCD>
		sendStr("Press button\nin remote");		// Let user know that key is recording
     b06:	8e ec       	ldi	r24, 0xCE	; 206
     b08:	91 e2       	ldi	r25, 0x21	; 33
     b0a:	f4 dc       	rcall	.-1560   	; 0x4f4 <sendStr>
		tmpCounter = 0;
     b0c:	10 92 16 22 	sts	0x2216, r1
     b10:	10 92 17 22 	sts	0x2217, r1
     b14:	2f e7       	ldi	r18, 0x7F	; 127
     b16:	3a e1       	ldi	r19, 0x1A	; 26
     b18:	86 e0       	ldi	r24, 0x06	; 6
     b1a:	21 50       	subi	r18, 0x01	; 1
     b1c:	30 40       	sbci	r19, 0x00	; 0
     b1e:	80 40       	sbci	r24, 0x00	; 0
     b20:	e1 f7       	brne	.-8      	; 0xb1a <READ_KEY+0x90>
     b22:	00 c0       	rjmp	.+0      	; 0xb24 <READ_KEY+0x9a>
     b24:	00 00       	nop
     b26:	eb cf       	rjmp	.-42     	; 0xafe <READ_KEY+0x74>
		_delay_ms(2000);						// Delay for 2 second so user have time to push buttons
	}
	
	
	while(recordInSession == true) {			// Wait for remote signal to be done processed
		if(TCC0_CTRLA == 0x00) {
     b28:	80 81       	ld	r24, Z
     b2a:	81 11       	cpse	r24, r1
     b2c:	fd cf       	rjmp	.-6      	; 0xb28 <READ_KEY+0x9e>
			recordInSession = false;
     b2e:	10 92 18 22 	sts	0x2218, r1
     b32:	10 92 19 22 	sts	0x2219, r1
		tmpCounter = 0;
		_delay_ms(2000);						// Delay for 2 second so user have time to push buttons
	}
	
	
	while(recordInSession == true) {			// Wait for remote signal to be done processed
     b36:	80 91 18 22 	lds	r24, 0x2218
     b3a:	90 91 19 22 	lds	r25, 0x2219
     b3e:	01 97       	sbiw	r24, 0x01	; 1
     b40:	99 f3       	breq	.-26     	; 0xb28 <READ_KEY+0x9e>
		if(TCC0_CTRLA == 0x00) {
			recordInSession = false;
		}
	}			
	
	if(menuChoice == 1) {
     b42:	80 91 12 22 	lds	r24, 0x2212
     b46:	90 91 13 22 	lds	r25, 0x2213
     b4a:	01 97       	sbiw	r24, 0x01	; 1
     b4c:	09 f0       	breq	.+2      	; 0xb50 <READ_KEY+0xc6>
     b4e:	40 c0       	rjmp	.+128    	; 0xbd0 <READ_KEY+0x146>
		// Store only is user selected to record key
		keyNumPulse[recordKey] = tmpCounter;
     b50:	20 91 14 22 	lds	r18, 0x2214
     b54:	30 91 15 22 	lds	r19, 0x2215
     b58:	80 91 16 22 	lds	r24, 0x2216
     b5c:	90 91 17 22 	lds	r25, 0x2217
     b60:	f9 01       	movw	r30, r18
     b62:	ee 0f       	add	r30, r30
     b64:	ff 1f       	adc	r31, r31
     b66:	e6 5e       	subi	r30, 0xE6	; 230
     b68:	fd 4d       	sbci	r31, 0xDD	; 221
     b6a:	80 83       	st	Z, r24
     b6c:	91 83       	std	Z+1, r25	; 0x01
		for(int i = 1; i != tmpCounter; ++i) {
     b6e:	81 30       	cpi	r24, 0x01	; 1
     b70:	91 05       	cpc	r25, r1
     b72:	41 f1       	breq	.+80     	; 0xbc4 <READ_KEY+0x13a>
     b74:	40 e9       	ldi	r20, 0x90	; 144
     b76:	51 e0       	ldi	r21, 0x01	; 1
     b78:	24 9f       	mul	r18, r20
     b7a:	80 01       	movw	r16, r0
     b7c:	25 9f       	mul	r18, r21
     b7e:	10 0d       	add	r17, r0
     b80:	34 9f       	mul	r19, r20
     b82:	10 0d       	add	r17, r0
     b84:	11 24       	eor	r1, r1
     b86:	02 5d       	subi	r16, 0xD2	; 210
     b88:	1d 4d       	sbci	r17, 0xDD	; 221
     b8a:	c0 ed       	ldi	r28, 0xD0	; 208
     b8c:	d1 e3       	ldi	r29, 0x31	; 49
     b8e:	88 0f       	add	r24, r24
     b90:	99 1f       	adc	r25, r25
     b92:	fc 01       	movw	r30, r24
     b94:	e2 53       	subi	r30, 0x32	; 50
     b96:	fe 4c       	sbci	r31, 0xCE	; 206
     b98:	6f 01       	movw	r12, r30
			keyWidth[recordKey][i-1] = tmpKeyWidth[i];
			tmpKeyWidth[i] = -1;
     b9a:	ee 24       	eor	r14, r14
     b9c:	ea 94       	dec	r14
     b9e:	fe 2c       	mov	r15, r14
	
	if(menuChoice == 1) {
		// Store only is user selected to record key
		keyNumPulse[recordKey] = tmpCounter;
		for(int i = 1; i != tmpCounter; ++i) {
			keyWidth[recordKey][i-1] = tmpKeyWidth[i];
     ba0:	68 81       	ld	r22, Y
     ba2:	79 81       	ldd	r23, Y+1	; 0x01
     ba4:	88 27       	eor	r24, r24
     ba6:	77 fd       	sbrc	r23, 7
     ba8:	80 95       	com	r24
     baa:	98 2f       	mov	r25, r24
     bac:	55 d2       	rcall	.+1194   	; 0x1058 <__floatsisf>
     bae:	f8 01       	movw	r30, r16
     bb0:	61 93       	st	Z+, r22
     bb2:	71 93       	st	Z+, r23
     bb4:	81 93       	st	Z+, r24
     bb6:	91 93       	st	Z+, r25
     bb8:	8f 01       	movw	r16, r30
			tmpKeyWidth[i] = -1;
     bba:	e9 92       	st	Y+, r14
     bbc:	f9 92       	st	Y+, r15
	}			
	
	if(menuChoice == 1) {
		// Store only is user selected to record key
		keyNumPulse[recordKey] = tmpCounter;
		for(int i = 1; i != tmpCounter; ++i) {
     bbe:	cc 15       	cp	r28, r12
     bc0:	dd 05       	cpc	r29, r13
     bc2:	71 f7       	brne	.-36     	; 0xba0 <READ_KEY+0x116>
			keyWidth[recordKey][i-1] = tmpKeyWidth[i];
			tmpKeyWidth[i] = -1;
		}
		tmpCounter = 200;						// Reset the temporary counter to number > 101 to prevent 
     bc4:	88 ec       	ldi	r24, 0xC8	; 200
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	80 93 16 22 	sts	0x2216, r24
     bcc:	90 93 17 22 	sts	0x2217, r25
												// interupt from writing bad data
	}	
}
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	ff 90       	pop	r15
     bda:	ef 90       	pop	r14
     bdc:	df 90       	pop	r13
     bde:	cf 90       	pop	r12
     be0:	08 95       	ret

00000be2 <findRemoteKey>:

int findRemoteKey() {
     be2:	2f 92       	push	r2
     be4:	3f 92       	push	r3
     be6:	4f 92       	push	r4
     be8:	5f 92       	push	r5
     bea:	6f 92       	push	r6
     bec:	7f 92       	push	r7
     bee:	9f 92       	push	r9
     bf0:	af 92       	push	r10
     bf2:	bf 92       	push	r11
     bf4:	cf 92       	push	r12
     bf6:	df 92       	push	r13
     bf8:	ef 92       	push	r14
     bfa:	ff 92       	push	r15
     bfc:	0f 93       	push	r16
     bfe:	1f 93       	push	r17
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	00 d0       	rcall	.+0      	; 0xc06 <findRemoteKey+0x24>
     c06:	00 d0       	rcall	.+0      	; 0xc08 <findRemoteKey+0x26>
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
	int volatile res = -1;
     c0c:	8f ef       	ldi	r24, 0xFF	; 255
     c0e:	9f ef       	ldi	r25, 0xFF	; 255
     c10:	89 83       	std	Y+1, r24	; 0x01
     c12:	9a 83       	std	Y+2, r25	; 0x02
	int volatile i;
	int volatile j;
	for(i = 0; i < 10; i++) {
     c14:	1b 82       	std	Y+3, r1	; 0x03
     c16:	1c 82       	std	Y+4, r1	; 0x04
     c18:	8b 81       	ldd	r24, Y+3	; 0x03
     c1a:	9c 81       	ldd	r25, Y+4	; 0x04
     c1c:	0a 97       	sbiw	r24, 0x0a	; 10
     c1e:	0c f0       	brlt	.+2      	; 0xc22 <findRemoteKey+0x40>
     c20:	cd c0       	rjmp	.+410    	; 0xdbc <findRemoteKey+0x1da>
		for(j = 1; j < tmpCounter; j++) {
     c22:	c0 90 16 22 	lds	r12, 0x2216
     c26:	d0 90 17 22 	lds	r13, 0x2217
     c2a:	aa 24       	eor	r10, r10
     c2c:	a3 94       	inc	r10
     c2e:	b1 2c       	mov	r11, r1
			if( (double)tmpKeyWidth[j] >= (0.75*keyWidth[i][j-1]) ) {
     c30:	0f 2e       	mov	r0, r31
     c32:	f4 e6       	ldi	r31, 0x64	; 100
     c34:	9f 2e       	mov	r9, r31
     c36:	f0 2d       	mov	r31, r0
int findRemoteKey() {
	int volatile res = -1;
	int volatile i;
	int volatile j;
	for(i = 0; i < 10; i++) {
		for(j = 1; j < tmpCounter; j++) {
     c38:	ad 82       	std	Y+5, r10	; 0x05
     c3a:	be 82       	std	Y+6, r11	; 0x06
     c3c:	8d 81       	ldd	r24, Y+5	; 0x05
     c3e:	9e 81       	ldd	r25, Y+6	; 0x06
     c40:	8c 15       	cp	r24, r12
     c42:	9d 05       	cpc	r25, r13
     c44:	0c f0       	brlt	.+2      	; 0xc48 <findRemoteKey+0x66>
     c46:	a9 c0       	rjmp	.+338    	; 0xd9a <findRemoteKey+0x1b8>
			if( (double)tmpKeyWidth[j] >= (0.75*keyWidth[i][j-1]) ) {
     c48:	ed 81       	ldd	r30, Y+5	; 0x05
     c4a:	fe 81       	ldd	r31, Y+6	; 0x06
     c4c:	eb 80       	ldd	r14, Y+3	; 0x03
     c4e:	fc 80       	ldd	r15, Y+4	; 0x04
     c50:	0d 81       	ldd	r16, Y+5	; 0x05
     c52:	1e 81       	ldd	r17, Y+6	; 0x06
     c54:	ee 0f       	add	r30, r30
     c56:	ff 1f       	adc	r31, r31
     c58:	e2 53       	subi	r30, 0x32	; 50
     c5a:	fe 4c       	sbci	r31, 0xCE	; 206
     c5c:	60 81       	ld	r22, Z
     c5e:	71 81       	ldd	r23, Z+1	; 0x01
     c60:	88 27       	eor	r24, r24
     c62:	77 fd       	sbrc	r23, 7
     c64:	80 95       	com	r24
     c66:	98 2f       	mov	r25, r24
     c68:	f7 d1       	rcall	.+1006   	; 0x1058 <__floatsisf>
     c6a:	1b 01       	movw	r2, r22
     c6c:	2c 01       	movw	r4, r24
     c6e:	9e 9c       	mul	r9, r14
     c70:	f0 01       	movw	r30, r0
     c72:	9f 9c       	mul	r9, r15
     c74:	f0 0d       	add	r31, r0
     c76:	11 24       	eor	r1, r1
     c78:	0e 0f       	add	r16, r30
     c7a:	1f 1f       	adc	r17, r31
     c7c:	f8 01       	movw	r30, r16
     c7e:	ee 0f       	add	r30, r30
     c80:	ff 1f       	adc	r31, r31
     c82:	ee 0f       	add	r30, r30
     c84:	ff 1f       	adc	r31, r31
     c86:	e6 5d       	subi	r30, 0xD6	; 214
     c88:	fd 4d       	sbci	r31, 0xDD	; 221
     c8a:	20 e0       	ldi	r18, 0x00	; 0
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	40 e4       	ldi	r20, 0x40	; 64
     c90:	5f e3       	ldi	r21, 0x3F	; 63
     c92:	60 81       	ld	r22, Z
     c94:	71 81       	ldd	r23, Z+1	; 0x01
     c96:	82 81       	ldd	r24, Z+2	; 0x02
     c98:	93 81       	ldd	r25, Z+3	; 0x03
     c9a:	41 d2       	rcall	.+1154   	; 0x111e <__mulsf3>
     c9c:	9b 01       	movw	r18, r22
     c9e:	ac 01       	movw	r20, r24
     ca0:	c2 01       	movw	r24, r4
     ca2:	b1 01       	movw	r22, r2
     ca4:	38 d2       	rcall	.+1136   	; 0x1116 <__gesf2>
     ca6:	88 23       	and	r24, r24
     ca8:	94 f5       	brge	.+100    	; 0xd0e <findRemoteKey+0x12c>
     caa:	67 c0       	rjmp	.+206    	; 0xd7a <findRemoteKey+0x198>
     cac:	ed 81       	ldd	r30, Y+5	; 0x05
     cae:	fe 81       	ldd	r31, Y+6	; 0x06
     cb0:	eb 80       	ldd	r14, Y+3	; 0x03
     cb2:	fc 80       	ldd	r15, Y+4	; 0x04
     cb4:	0d 81       	ldd	r16, Y+5	; 0x05
     cb6:	1e 81       	ldd	r17, Y+6	; 0x06
     cb8:	ee 0f       	add	r30, r30
     cba:	ff 1f       	adc	r31, r31
     cbc:	e2 53       	subi	r30, 0x32	; 50
     cbe:	fe 4c       	sbci	r31, 0xCE	; 206
     cc0:	60 81       	ld	r22, Z
     cc2:	71 81       	ldd	r23, Z+1	; 0x01
     cc4:	88 27       	eor	r24, r24
     cc6:	77 fd       	sbrc	r23, 7
     cc8:	80 95       	com	r24
     cca:	98 2f       	mov	r25, r24
     ccc:	c5 d1       	rcall	.+906    	; 0x1058 <__floatsisf>
     cce:	2b 01       	movw	r4, r22
     cd0:	3c 01       	movw	r6, r24
     cd2:	9e 9c       	mul	r9, r14
     cd4:	f0 01       	movw	r30, r0
     cd6:	9f 9c       	mul	r9, r15
     cd8:	f0 0d       	add	r31, r0
     cda:	11 24       	eor	r1, r1
     cdc:	0e 0f       	add	r16, r30
     cde:	1f 1f       	adc	r17, r31
     ce0:	f8 01       	movw	r30, r16
     ce2:	ee 0f       	add	r30, r30
     ce4:	ff 1f       	adc	r31, r31
     ce6:	ee 0f       	add	r30, r30
     ce8:	ff 1f       	adc	r31, r31
     cea:	e6 5d       	subi	r30, 0xD6	; 214
     cec:	fd 4d       	sbci	r31, 0xDD	; 221
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	40 e4       	ldi	r20, 0x40	; 64
     cf4:	5f e3       	ldi	r21, 0x3F	; 63
     cf6:	60 81       	ld	r22, Z
     cf8:	71 81       	ldd	r23, Z+1	; 0x01
     cfa:	82 81       	ldd	r24, Z+2	; 0x02
     cfc:	93 81       	ldd	r25, Z+3	; 0x03
     cfe:	0f d2       	rcall	.+1054   	; 0x111e <__mulsf3>
     d00:	9b 01       	movw	r18, r22
     d02:	ac 01       	movw	r20, r24
     d04:	c3 01       	movw	r24, r6
     d06:	b2 01       	movw	r22, r4
     d08:	06 d2       	rcall	.+1036   	; 0x1116 <__gesf2>
     d0a:	88 23       	and	r24, r24
     d0c:	b4 f1       	brlt	.+108    	; 0xd7a <findRemoteKey+0x198>
				if( (double)tmpKeyWidth[j] <= (1.25*keyWidth[i][j-1]) ) {
     d0e:	ed 81       	ldd	r30, Y+5	; 0x05
     d10:	fe 81       	ldd	r31, Y+6	; 0x06
     d12:	eb 80       	ldd	r14, Y+3	; 0x03
     d14:	fc 80       	ldd	r15, Y+4	; 0x04
     d16:	0d 81       	ldd	r16, Y+5	; 0x05
     d18:	1e 81       	ldd	r17, Y+6	; 0x06
     d1a:	ee 0f       	add	r30, r30
     d1c:	ff 1f       	adc	r31, r31
     d1e:	e2 53       	subi	r30, 0x32	; 50
     d20:	fe 4c       	sbci	r31, 0xCE	; 206
     d22:	60 81       	ld	r22, Z
     d24:	71 81       	ldd	r23, Z+1	; 0x01
     d26:	88 27       	eor	r24, r24
     d28:	77 fd       	sbrc	r23, 7
     d2a:	80 95       	com	r24
     d2c:	98 2f       	mov	r25, r24
     d2e:	94 d1       	rcall	.+808    	; 0x1058 <__floatsisf>
     d30:	2b 01       	movw	r4, r22
     d32:	3c 01       	movw	r6, r24
     d34:	9e 9c       	mul	r9, r14
     d36:	f0 01       	movw	r30, r0
     d38:	9f 9c       	mul	r9, r15
     d3a:	f0 0d       	add	r31, r0
     d3c:	11 24       	eor	r1, r1
     d3e:	0e 0f       	add	r16, r30
     d40:	1f 1f       	adc	r17, r31
     d42:	f8 01       	movw	r30, r16
     d44:	ee 0f       	add	r30, r30
     d46:	ff 1f       	adc	r31, r31
     d48:	ee 0f       	add	r30, r30
     d4a:	ff 1f       	adc	r31, r31
     d4c:	e6 5d       	subi	r30, 0xD6	; 214
     d4e:	fd 4d       	sbci	r31, 0xDD	; 221
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	40 ea       	ldi	r20, 0xA0	; 160
     d56:	5f e3       	ldi	r21, 0x3F	; 63
     d58:	60 81       	ld	r22, Z
     d5a:	71 81       	ldd	r23, Z+1	; 0x01
     d5c:	82 81       	ldd	r24, Z+2	; 0x02
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	de d1       	rcall	.+956    	; 0x111e <__mulsf3>
     d62:	9b 01       	movw	r18, r22
     d64:	ac 01       	movw	r20, r24
     d66:	c3 01       	movw	r24, r6
     d68:	b2 01       	movw	r22, r4
     d6a:	70 d1       	rcall	.+736    	; 0x104c <__cmpsf2>
     d6c:	18 16       	cp	r1, r24
     d6e:	54 f0       	brlt	.+20     	; 0xd84 <findRemoteKey+0x1a2>
					res = i;
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	9c 81       	ldd	r25, Y+4	; 0x04
     d74:	89 83       	std	Y+1, r24	; 0x01
     d76:	9a 83       	std	Y+2, r25	; 0x02
     d78:	05 c0       	rjmp	.+10     	; 0xd84 <findRemoteKey+0x1a2>
			}
			else {
				// One value does not match
				// Break to check other key in table
				// Reset result to -1
				res = -1;
     d7a:	8f ef       	ldi	r24, 0xFF	; 255
     d7c:	9f ef       	ldi	r25, 0xFF	; 255
     d7e:	89 83       	std	Y+1, r24	; 0x01
     d80:	9a 83       	std	Y+2, r25	; 0x02
				break;
     d82:	0b c0       	rjmp	.+22     	; 0xd9a <findRemoteKey+0x1b8>
int findRemoteKey() {
	int volatile res = -1;
	int volatile i;
	int volatile j;
	for(i = 0; i < 10; i++) {
		for(j = 1; j < tmpCounter; j++) {
     d84:	8d 81       	ldd	r24, Y+5	; 0x05
     d86:	9e 81       	ldd	r25, Y+6	; 0x06
     d88:	01 96       	adiw	r24, 0x01	; 1
     d8a:	8d 83       	std	Y+5, r24	; 0x05
     d8c:	9e 83       	std	Y+6, r25	; 0x06
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
     d90:	9e 81       	ldd	r25, Y+6	; 0x06
     d92:	8c 15       	cp	r24, r12
     d94:	9d 05       	cpc	r25, r13
     d96:	0c f4       	brge	.+2      	; 0xd9a <findRemoteKey+0x1b8>
     d98:	89 cf       	rjmp	.-238    	; 0xcac <findRemoteKey+0xca>
				res = -1;
				break;
			}
		}
		
		if(res != -1) { return res; }
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	9a 81       	ldd	r25, Y+2	; 0x02
     d9e:	01 96       	adiw	r24, 0x01	; 1
     da0:	19 f0       	breq	.+6      	; 0xda8 <findRemoteKey+0x1c6>
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	9a 81       	ldd	r25, Y+2	; 0x02
     da6:	0c c0       	rjmp	.+24     	; 0xdc0 <findRemoteKey+0x1de>

int findRemoteKey() {
	int volatile res = -1;
	int volatile i;
	int volatile j;
	for(i = 0; i < 10; i++) {
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	9c 81       	ldd	r25, Y+4	; 0x04
     dac:	01 96       	adiw	r24, 0x01	; 1
     dae:	8b 83       	std	Y+3, r24	; 0x03
     db0:	9c 83       	std	Y+4, r25	; 0x04
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	9c 81       	ldd	r25, Y+4	; 0x04
     db6:	0a 97       	sbiw	r24, 0x0a	; 10
     db8:	0c f4       	brge	.+2      	; 0xdbc <findRemoteKey+0x1da>
     dba:	3e cf       	rjmp	.-388    	; 0xc38 <findRemoteKey+0x56>
			}
		}
		
		if(res != -1) { return res; }
	}
	return res;
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	9a 81       	ldd	r25, Y+2	; 0x02
}
     dc0:	26 96       	adiw	r28, 0x06	; 6
     dc2:	cd bf       	out	0x3d, r28	; 61
     dc4:	de bf       	out	0x3e, r29	; 62
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
     dca:	1f 91       	pop	r17
     dcc:	0f 91       	pop	r16
     dce:	ff 90       	pop	r15
     dd0:	ef 90       	pop	r14
     dd2:	df 90       	pop	r13
     dd4:	cf 90       	pop	r12
     dd6:	bf 90       	pop	r11
     dd8:	af 90       	pop	r10
     dda:	9f 90       	pop	r9
     ddc:	7f 90       	pop	r7
     dde:	6f 90       	pop	r6
     de0:	5f 90       	pop	r5
     de2:	4f 90       	pop	r4
     de4:	3f 90       	pop	r3
     de6:	2f 90       	pop	r2
     de8:	08 95       	ret

00000dea <main>:

int main(void) {
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	1f 92       	push	r1
     df0:	1f 92       	push	r1
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
	// Init storage
	tmpKeyWidth[0] = 0;
     df6:	10 92 ce 31 	sts	0x31CE, r1
     dfa:	10 92 cf 31 	sts	0x31CF, r1
     dfe:	0e e2       	ldi	r16, 0x2E	; 46
     e00:	12 e2       	ldi	r17, 0x22	; 34
     e02:	0f 2e       	mov	r0, r31
     e04:	fe ec       	ldi	r31, 0xCE	; 206
     e06:	cf 2e       	mov	r12, r31
     e08:	f1 e3       	ldi	r31, 0x31	; 49
     e0a:	df 2e       	mov	r13, r31
     e0c:	f0 2d       	mov	r31, r0
     e0e:	0f 2e       	mov	r0, r31
     e10:	f0 ed       	ldi	r31, 0xD0	; 208
     e12:	ef 2e       	mov	r14, r31
     e14:	f1 e3       	ldi	r31, 0x31	; 49
     e16:	ff 2e       	mov	r15, r31
     e18:	f0 2d       	mov	r31, r0
     e1a:	68 e9       	ldi	r22, 0x98	; 152
     e1c:	72 e3       	ldi	r23, 0x32	; 50
	for(int i = 0; i != 10; ++i) {
		for(int j = 0; j != 100; ++j) {
			keyWidth[i][j] = -1;
     e1e:	0f 2e       	mov	r0, r31
     e20:	81 2c       	mov	r8, r1
     e22:	91 2c       	mov	r9, r1
     e24:	f0 e8       	ldi	r31, 0x80	; 128
     e26:	af 2e       	mov	r10, r31
     e28:	ff eb       	ldi	r31, 0xBF	; 191
     e2a:	bf 2e       	mov	r11, r31
     e2c:	f0 2d       	mov	r31, r0
			tmpKeyWidth[j+1] = -1;
     e2e:	4f ef       	ldi	r20, 0xFF	; 255
     e30:	5f ef       	ldi	r21, 0xFF	; 255
     e32:	10 c0       	rjmp	.+32     	; 0xe54 <main+0x6a>
int main(void) {
	// Init storage
	tmpKeyWidth[0] = 0;
	for(int i = 0; i != 10; ++i) {
		for(int j = 0; j != 100; ++j) {
			keyWidth[i][j] = -1;
     e34:	d9 01       	movw	r26, r18
     e36:	8d 92       	st	X+, r8
     e38:	9d 92       	st	X+, r9
     e3a:	ad 92       	st	X+, r10
     e3c:	bd 92       	st	X+, r11
     e3e:	9d 01       	movw	r18, r26
			tmpKeyWidth[j+1] = -1;
     e40:	41 93       	st	Z+, r20
     e42:	51 93       	st	Z+, r21

int main(void) {
	// Init storage
	tmpKeyWidth[0] = 0;
	for(int i = 0; i != 10; ++i) {
		for(int j = 0; j != 100; ++j) {
     e44:	e6 17       	cp	r30, r22
     e46:	f7 07       	cpc	r31, r23
     e48:	a9 f7       	brne	.-22     	; 0xe34 <main+0x4a>
     e4a:	00 57       	subi	r16, 0x70	; 112
     e4c:	1e 4f       	sbci	r17, 0xFE	; 254
}

int main(void) {
	// Init storage
	tmpKeyWidth[0] = 0;
	for(int i = 0; i != 10; ++i) {
     e4e:	0c 15       	cp	r16, r12
     e50:	1d 05       	cpc	r17, r13
     e52:	19 f0       	breq	.+6      	; 0xe5a <main+0x70>
     e54:	f7 01       	movw	r30, r14
		if(res != -1) { return res; }
	}
	return res;
}

int main(void) {
     e56:	98 01       	movw	r18, r16
     e58:	ed cf       	rjmp	.-38     	; 0xe34 <main+0x4a>
			tmpKeyWidth[j+1] = -1;
		}
	}
	
	// Initialize all the necessary components
	EBI_init();
     e5a:	02 da       	rcall	.-3068   	; 0x260 <EBI_init>
	LCD_init();
     e5c:	a6 da       	rcall	.-2740   	; 0x3aa <LCD_init>
	KEYPAD_init();
     e5e:	19 da       	rcall	.-3022   	; 0x292 <KEYPAD_init>
	TC_init();
     e60:	32 da       	rcall	.-2972   	; 0x2c6 <TC_init>
	sei();
     e62:	78 94       	sei
		sendStr("1)Record a key\n2)Play Something");
		int menu = SCAN_KEYPAD();
		menuChoice = menu;
		switch(menu) {
			case 1: // RECORDING A KEY
				recordInSession = true;						// Set recording Session to true
     e64:	01 e0       	ldi	r16, 0x01	; 1
     e66:	10 e0       	ldi	r17, 0x00	; 0
				_delay_ms(5000);							// Wait for 2 second, so user can see screen
				clearLCD();									// Clear LCD screen
				break;
				
			case 2: // PLAY KEY SONG
				tmpCounter = 200;
     e68:	0f 2e       	mov	r0, r31
     e6a:	f8 ec       	ldi	r31, 0xC8	; 200
     e6c:	cf 2e       	mov	r12, r31
     e6e:	d1 2c       	mov	r13, r1
     e70:	f0 2d       	mov	r31, r0
				recordInSession = true;
				while(menu == 2){menu = SCAN_KEYPAD();}	// Wait until user release key
				READ_KEY();									// Read key from remote
				int volatile key;
				key = -1;
     e72:	ee 24       	eor	r14, r14
     e74:	ea 94       	dec	r14
     e76:	fe 2c       	mov	r15, r14
	KEYPAD_init();
	TC_init();
	sei();
	
	while(1) {
		sendStr("1)Record a key\n2)Play Something");
     e78:	85 ee       	ldi	r24, 0xE5	; 229
     e7a:	91 e2       	ldi	r25, 0x21	; 33
     e7c:	3b db       	rcall	.-2442   	; 0x4f4 <sendStr>
		int menu = SCAN_KEYPAD();
     e7e:	c2 da       	rcall	.-2684   	; 0x404 <SCAN_KEYPAD>
		menuChoice = menu;
     e80:	80 93 12 22 	sts	0x2212, r24
     e84:	90 93 13 22 	sts	0x2213, r25
		switch(menu) {
     e88:	81 30       	cpi	r24, 0x01	; 1
     e8a:	91 05       	cpc	r25, r1
     e8c:	19 f0       	breq	.+6      	; 0xe94 <main+0xaa>
     e8e:	02 97       	sbiw	r24, 0x02	; 2
     e90:	c1 f0       	breq	.+48     	; 0xec2 <main+0xd8>
     e92:	f2 cf       	rjmp	.-28     	; 0xe78 <main+0x8e>
			case 1: // RECORDING A KEY
				recordInSession = true;						// Set recording Session to true
     e94:	00 93 18 22 	sts	0x2218, r16
     e98:	10 93 19 22 	sts	0x2219, r17
				while(menu == 1){ menu = SCAN_KEYPAD();}	// Wait until user release key
     e9c:	b3 da       	rcall	.-2714   	; 0x404 <SCAN_KEYPAD>
     e9e:	01 97       	sbiw	r24, 0x01	; 1
     ea0:	e9 f3       	breq	.-6      	; 0xe9c <main+0xb2>
				READ_KEY();									// Read the key pressed
     ea2:	f3 dd       	rcall	.-1050   	; 0xa8a <READ_KEY>
				clearLCD();									// Clear LCD screen
     ea4:	64 db       	rcall	.-2360   	; 0x56e <clearLCD>
				sendStr("Key recorded");					// Let user know that key is recorded
     ea6:	85 e0       	ldi	r24, 0x05	; 5
     ea8:	92 e2       	ldi	r25, 0x22	; 34
     eaa:	24 db       	rcall	.-2488   	; 0x4f4 <sendStr>
     eac:	bf e3       	ldi	r27, 0x3F	; 63
     eae:	22 e4       	ldi	r18, 0x42	; 66
     eb0:	8f e0       	ldi	r24, 0x0F	; 15
     eb2:	b1 50       	subi	r27, 0x01	; 1
     eb4:	20 40       	sbci	r18, 0x00	; 0
     eb6:	80 40       	sbci	r24, 0x00	; 0
     eb8:	e1 f7       	brne	.-8      	; 0xeb2 <main+0xc8>
     eba:	00 c0       	rjmp	.+0      	; 0xebc <main+0xd2>
     ebc:	00 00       	nop
				_delay_ms(5000);							// Wait for 2 second, so user can see screen
				clearLCD();									// Clear LCD screen
     ebe:	57 db       	rcall	.-2386   	; 0x56e <clearLCD>
				break;
     ec0:	db cf       	rjmp	.-74     	; 0xe78 <main+0x8e>
				
			case 2: // PLAY KEY SONG
				tmpCounter = 200;
     ec2:	c0 92 16 22 	sts	0x2216, r12
     ec6:	d0 92 17 22 	sts	0x2217, r13
				recordInSession = true;
     eca:	00 93 18 22 	sts	0x2218, r16
     ece:	10 93 19 22 	sts	0x2219, r17
				while(menu == 2){menu = SCAN_KEYPAD();}	// Wait until user release key
     ed2:	98 da       	rcall	.-2768   	; 0x404 <SCAN_KEYPAD>
     ed4:	02 97       	sbiw	r24, 0x02	; 2
     ed6:	e9 f3       	breq	.-6      	; 0xed2 <main+0xe8>
				READ_KEY();									// Read key from remote
     ed8:	d8 dd       	rcall	.-1104   	; 0xa8a <READ_KEY>
				int volatile key;
				key = -1;
     eda:	e9 82       	std	Y+1, r14	; 0x01
     edc:	fa 82       	std	Y+2, r15	; 0x02
				key = findRemoteKey();						// Find out which key was pressed in remote
     ede:	81 de       	rcall	.-766    	; 0xbe2 <findRemoteKey>
     ee0:	89 83       	std	Y+1, r24	; 0x01
     ee2:	9a 83       	std	Y+2, r25	; 0x02
				PLAY(key);									// Call play method to play the music corresponding to key
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	9a 81       	ldd	r25, Y+2	; 0x02
     ee8:	71 db       	rcall	.-2334   	; 0x5cc <PLAY>
     eea:	9f e3       	ldi	r25, 0x3F	; 63
     eec:	a2 e4       	ldi	r26, 0x42	; 66
     eee:	bf e0       	ldi	r27, 0x0F	; 15
     ef0:	91 50       	subi	r25, 0x01	; 1
     ef2:	a0 40       	sbci	r26, 0x00	; 0
     ef4:	b0 40       	sbci	r27, 0x00	; 0
     ef6:	e1 f7       	brne	.-8      	; 0xef0 <main+0x106>
     ef8:	00 c0       	rjmp	.+0      	; 0xefa <main+0x110>
     efa:	00 00       	nop
				_delay_ms(5000);							// Wait for 2 second, so user can see screen
				clearLCD();									// Clear LCD screen
     efc:	38 db       	rcall	.-2448   	; 0x56e <clearLCD>
				tmpCounter = 0;								// Reset temp counter to 0
     efe:	10 92 16 22 	sts	0x2216, r1
     f02:	10 92 17 22 	sts	0x2217, r1
				break;
     f06:	b8 cf       	rjmp	.-144    	; 0xe78 <main+0x8e>

00000f08 <__vector_14>:
		}
    }
}

// REMOTE 10 ms timer delay
ISR(TCC0_OVF_vect) {
     f08:	1f 92       	push	r1
     f0a:	0f 92       	push	r0
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	0f 92       	push	r0
     f10:	11 24       	eor	r1, r1
     f12:	08 b6       	in	r0, 0x38	; 56
     f14:	0f 92       	push	r0
     f16:	18 be       	out	0x38, r1	; 56
     f18:	8f 93       	push	r24
     f1a:	9f 93       	push	r25
	TCC0_CTRLA = 0x00;									// Turn off timer for 10 ms delay
     f1c:	10 92 00 08 	sts	0x0800, r1
	TCC0_CNT = 0;										// Reset 10 ms counter to 0
     f20:	10 92 20 08 	sts	0x0820, r1
     f24:	10 92 21 08 	sts	0x0821, r1
	if(recordInSession == true) {						// If there was a recording, signal that end of recording is reached
     f28:	80 91 18 22 	lds	r24, 0x2218
     f2c:	90 91 19 22 	lds	r25, 0x2219
     f30:	01 97       	sbiw	r24, 0x01	; 1
     f32:	31 f4       	brne	.+12     	; 0xf40 <__vector_14+0x38>
		recordInSession = false;
     f34:	10 92 18 22 	sts	0x2218, r1
     f38:	10 92 19 22 	sts	0x2219, r1
		TCC0_CTRLA = 0x00;								// Turn off timer for the 10 ms
     f3c:	10 92 00 08 	sts	0x0800, r1
	}
	TCC0_INTFLAGS = 0x01;								// Restore interrupt flags for 10 ms timer
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	80 93 0c 08 	sts	0x080C, r24
	TCF0_INTFLAGS = 0x10;								// Reset INPUT CAPTURE INTERRUPT flag
     f46:	80 e1       	ldi	r24, 0x10	; 16
     f48:	80 93 0c 0b 	sts	0x0B0C, r24
}
     f4c:	9f 91       	pop	r25
     f4e:	8f 91       	pop	r24
     f50:	0f 90       	pop	r0
     f52:	08 be       	out	0x38, r0	; 56
     f54:	0f 90       	pop	r0
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	0f 90       	pop	r0
     f5a:	1f 90       	pop	r1
     f5c:	18 95       	reti

00000f5e <__vector_110>:


//INPUT PULSE INTERRUPT
ISR(TCF0_CCA_vect) {
     f5e:	1f 92       	push	r1
     f60:	0f 92       	push	r0
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	0f 92       	push	r0
     f66:	11 24       	eor	r1, r1
     f68:	08 b6       	in	r0, 0x38	; 56
     f6a:	0f 92       	push	r0
     f6c:	18 be       	out	0x38, r1	; 56
     f6e:	09 b6       	in	r0, 0x39	; 57
     f70:	0f 92       	push	r0
     f72:	19 be       	out	0x39, r1	; 57
     f74:	0b b6       	in	r0, 0x3b	; 59
     f76:	0f 92       	push	r0
     f78:	1b be       	out	0x3b, r1	; 59
     f7a:	2f 93       	push	r18
     f7c:	3f 93       	push	r19
     f7e:	8f 93       	push	r24
     f80:	9f 93       	push	r25
     f82:	af 93       	push	r26
     f84:	bf 93       	push	r27
     f86:	ef 93       	push	r30
     f88:	ff 93       	push	r31
	TCC0_CTRLA = 0x00;									// Turn off timer for 10 ms delay
     f8a:	10 92 00 08 	sts	0x0800, r1
	TCC0_INTFLAGS = 0x01;								// Reset interrupt flag on 10 ms timer
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	80 93 0c 08 	sts	0x080C, r24
	TCF0_INTFLAGS = 0x10;								// Reset INPUT CAPTURE INTERRUPT flag
     f94:	80 e1       	ldi	r24, 0x10	; 16
     f96:	80 93 0c 0b 	sts	0x0B0C, r24
	if( (tmpCounter < 101) ) {
     f9a:	80 91 16 22 	lds	r24, 0x2216
     f9e:	90 91 17 22 	lds	r25, 0x2217
     fa2:	85 36       	cpi	r24, 0x65	; 101
     fa4:	91 05       	cpc	r25, r1
     fa6:	b4 f4       	brge	.+44     	; 0xfd4 <__vector_110+0x76>
		tmpKeyWidth[tmpCounter] = TCC0_CNT;
     fa8:	e0 e2       	ldi	r30, 0x20	; 32
     faa:	f8 e0       	ldi	r31, 0x08	; 8
     fac:	20 81       	ld	r18, Z
     fae:	31 81       	ldd	r19, Z+1	; 0x01
     fb0:	dc 01       	movw	r26, r24
     fb2:	aa 0f       	add	r26, r26
     fb4:	bb 1f       	adc	r27, r27
     fb6:	a2 53       	subi	r26, 0x32	; 50
     fb8:	be 4c       	sbci	r27, 0xCE	; 206
     fba:	2d 93       	st	X+, r18
     fbc:	3c 93       	st	X, r19
		tmpCounter++;
     fbe:	01 96       	adiw	r24, 0x01	; 1
     fc0:	80 93 16 22 	sts	0x2216, r24
     fc4:	90 93 17 22 	sts	0x2217, r25
		TCC0_CNT = 0x00;								// Reset the counter to 0
     fc8:	10 82       	st	Z, r1
     fca:	11 82       	std	Z+1, r1	; 0x01
		TCC0_CTRLA = 0x01;								// Turn timer back ON
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	80 93 00 08 	sts	0x0800, r24
     fd2:	0d c0       	rjmp	.+26     	; 0xfee <__vector_110+0x90>
	}
	else {
		recordInSession = false;						// Set flag for no recording in progress
     fd4:	10 92 18 22 	sts	0x2218, r1
     fd8:	10 92 19 22 	sts	0x2219, r1
		TCC0_CTRLA = 0x00;								// Turn off timer for 10 ms
     fdc:	e0 e0       	ldi	r30, 0x00	; 0
     fde:	f8 e0       	ldi	r31, 0x08	; 8
     fe0:	10 82       	st	Z, r1
		TCC0_CNT = 0x00;								// Reset the counter to 0
     fe2:	10 92 20 08 	sts	0x0820, r1
     fe6:	10 92 21 08 	sts	0x0821, r1
		TCC0_CTRLA = 0x01;								// Turn timer back ON
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	80 83       	st	Z, r24
	}
}
     fee:	ff 91       	pop	r31
     ff0:	ef 91       	pop	r30
     ff2:	bf 91       	pop	r27
     ff4:	af 91       	pop	r26
     ff6:	9f 91       	pop	r25
     ff8:	8f 91       	pop	r24
     ffa:	3f 91       	pop	r19
     ffc:	2f 91       	pop	r18
     ffe:	0f 90       	pop	r0
    1000:	0b be       	out	0x3b, r0	; 59
    1002:	0f 90       	pop	r0
    1004:	09 be       	out	0x39, r0	; 57
    1006:	0f 90       	pop	r0
    1008:	08 be       	out	0x38, r0	; 56
    100a:	0f 90       	pop	r0
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	0f 90       	pop	r0
    1010:	1f 90       	pop	r1
    1012:	18 95       	reti

00001014 <__vector_20>:


// Poll note duration interrupt
ISR(TCC1_OVF_vect) {
    1014:	1f 92       	push	r1
    1016:	0f 92       	push	r0
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	0f 92       	push	r0
    101c:	11 24       	eor	r1, r1
    101e:	08 b6       	in	r0, 0x38	; 56
    1020:	0f 92       	push	r0
    1022:	18 be       	out	0x38, r1	; 56
    1024:	8f 93       	push	r24
	TCC1_CTRLA = 0x00;					// Turn OFF duration timer
    1026:	10 92 40 08 	sts	0x0840, r1
	TCF1_CTRLA = 0x00;					// Turn OFF sound timer
    102a:	10 92 40 0b 	sts	0x0B40, r1
	TCC1_INTFLAGS = 0x01;				// Reset interrupt vector
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	80 93 4c 08 	sts	0x084C, r24
	TCC1_CNT = 0;						// Reset duration timer counter to 0
    1034:	10 92 60 08 	sts	0x0860, r1
    1038:	10 92 61 08 	sts	0x0861, r1
    103c:	8f 91       	pop	r24
    103e:	0f 90       	pop	r0
    1040:	08 be       	out	0x38, r0	; 56
    1042:	0f 90       	pop	r0
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	0f 90       	pop	r0
    1048:	1f 90       	pop	r1
    104a:	18 95       	reti

0000104c <__cmpsf2>:
    104c:	40 d0       	rcall	.+128    	; 0x10ce <__fp_cmp>
    104e:	08 f4       	brcc	.+2      	; 0x1052 <__cmpsf2+0x6>
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	08 95       	ret

00001054 <__floatunsisf>:
    1054:	e8 94       	clt
    1056:	09 c0       	rjmp	.+18     	; 0x106a <__floatsisf+0x12>

00001058 <__floatsisf>:
    1058:	97 fb       	bst	r25, 7
    105a:	3e f4       	brtc	.+14     	; 0x106a <__floatsisf+0x12>
    105c:	90 95       	com	r25
    105e:	80 95       	com	r24
    1060:	70 95       	com	r23
    1062:	61 95       	neg	r22
    1064:	7f 4f       	sbci	r23, 0xFF	; 255
    1066:	8f 4f       	sbci	r24, 0xFF	; 255
    1068:	9f 4f       	sbci	r25, 0xFF	; 255
    106a:	99 23       	and	r25, r25
    106c:	a9 f0       	breq	.+42     	; 0x1098 <__floatsisf+0x40>
    106e:	f9 2f       	mov	r31, r25
    1070:	96 e9       	ldi	r25, 0x96	; 150
    1072:	bb 27       	eor	r27, r27
    1074:	93 95       	inc	r25
    1076:	f6 95       	lsr	r31
    1078:	87 95       	ror	r24
    107a:	77 95       	ror	r23
    107c:	67 95       	ror	r22
    107e:	b7 95       	ror	r27
    1080:	f1 11       	cpse	r31, r1
    1082:	f8 cf       	rjmp	.-16     	; 0x1074 <__floatsisf+0x1c>
    1084:	fa f4       	brpl	.+62     	; 0x10c4 <__floatsisf+0x6c>
    1086:	bb 0f       	add	r27, r27
    1088:	11 f4       	brne	.+4      	; 0x108e <__floatsisf+0x36>
    108a:	60 ff       	sbrs	r22, 0
    108c:	1b c0       	rjmp	.+54     	; 0x10c4 <__floatsisf+0x6c>
    108e:	6f 5f       	subi	r22, 0xFF	; 255
    1090:	7f 4f       	sbci	r23, 0xFF	; 255
    1092:	8f 4f       	sbci	r24, 0xFF	; 255
    1094:	9f 4f       	sbci	r25, 0xFF	; 255
    1096:	16 c0       	rjmp	.+44     	; 0x10c4 <__floatsisf+0x6c>
    1098:	88 23       	and	r24, r24
    109a:	11 f0       	breq	.+4      	; 0x10a0 <__floatsisf+0x48>
    109c:	96 e9       	ldi	r25, 0x96	; 150
    109e:	11 c0       	rjmp	.+34     	; 0x10c2 <__floatsisf+0x6a>
    10a0:	77 23       	and	r23, r23
    10a2:	21 f0       	breq	.+8      	; 0x10ac <__floatsisf+0x54>
    10a4:	9e e8       	ldi	r25, 0x8E	; 142
    10a6:	87 2f       	mov	r24, r23
    10a8:	76 2f       	mov	r23, r22
    10aa:	05 c0       	rjmp	.+10     	; 0x10b6 <__floatsisf+0x5e>
    10ac:	66 23       	and	r22, r22
    10ae:	71 f0       	breq	.+28     	; 0x10cc <__floatsisf+0x74>
    10b0:	96 e8       	ldi	r25, 0x86	; 134
    10b2:	86 2f       	mov	r24, r22
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	60 e0       	ldi	r22, 0x00	; 0
    10b8:	2a f0       	brmi	.+10     	; 0x10c4 <__floatsisf+0x6c>
    10ba:	9a 95       	dec	r25
    10bc:	66 0f       	add	r22, r22
    10be:	77 1f       	adc	r23, r23
    10c0:	88 1f       	adc	r24, r24
    10c2:	da f7       	brpl	.-10     	; 0x10ba <__floatsisf+0x62>
    10c4:	88 0f       	add	r24, r24
    10c6:	96 95       	lsr	r25
    10c8:	87 95       	ror	r24
    10ca:	97 f9       	bld	r25, 7
    10cc:	08 95       	ret

000010ce <__fp_cmp>:
    10ce:	99 0f       	add	r25, r25
    10d0:	00 08       	sbc	r0, r0
    10d2:	55 0f       	add	r21, r21
    10d4:	aa 0b       	sbc	r26, r26
    10d6:	e0 e8       	ldi	r30, 0x80	; 128
    10d8:	fe ef       	ldi	r31, 0xFE	; 254
    10da:	16 16       	cp	r1, r22
    10dc:	17 06       	cpc	r1, r23
    10de:	e8 07       	cpc	r30, r24
    10e0:	f9 07       	cpc	r31, r25
    10e2:	c0 f0       	brcs	.+48     	; 0x1114 <__fp_cmp+0x46>
    10e4:	12 16       	cp	r1, r18
    10e6:	13 06       	cpc	r1, r19
    10e8:	e4 07       	cpc	r30, r20
    10ea:	f5 07       	cpc	r31, r21
    10ec:	98 f0       	brcs	.+38     	; 0x1114 <__fp_cmp+0x46>
    10ee:	62 1b       	sub	r22, r18
    10f0:	73 0b       	sbc	r23, r19
    10f2:	84 0b       	sbc	r24, r20
    10f4:	95 0b       	sbc	r25, r21
    10f6:	39 f4       	brne	.+14     	; 0x1106 <__fp_cmp+0x38>
    10f8:	0a 26       	eor	r0, r26
    10fa:	61 f0       	breq	.+24     	; 0x1114 <__fp_cmp+0x46>
    10fc:	23 2b       	or	r18, r19
    10fe:	24 2b       	or	r18, r20
    1100:	25 2b       	or	r18, r21
    1102:	21 f4       	brne	.+8      	; 0x110c <__fp_cmp+0x3e>
    1104:	08 95       	ret
    1106:	0a 26       	eor	r0, r26
    1108:	09 f4       	brne	.+2      	; 0x110c <__fp_cmp+0x3e>
    110a:	a1 40       	sbci	r26, 0x01	; 1
    110c:	a6 95       	lsr	r26
    110e:	8f ef       	ldi	r24, 0xFF	; 255
    1110:	81 1d       	adc	r24, r1
    1112:	81 1d       	adc	r24, r1
    1114:	08 95       	ret

00001116 <__gesf2>:
    1116:	db df       	rcall	.-74     	; 0x10ce <__fp_cmp>
    1118:	08 f4       	brcc	.+2      	; 0x111c <__gesf2+0x6>
    111a:	8f ef       	ldi	r24, 0xFF	; 255
    111c:	08 95       	ret

0000111e <__mulsf3>:
    111e:	0b d0       	rcall	.+22     	; 0x1136 <__mulsf3x>
    1120:	78 c0       	rjmp	.+240    	; 0x1212 <__fp_round>
    1122:	69 d0       	rcall	.+210    	; 0x11f6 <__fp_pscA>
    1124:	28 f0       	brcs	.+10     	; 0x1130 <__mulsf3+0x12>
    1126:	6e d0       	rcall	.+220    	; 0x1204 <__fp_pscB>
    1128:	18 f0       	brcs	.+6      	; 0x1130 <__mulsf3+0x12>
    112a:	95 23       	and	r25, r21
    112c:	09 f0       	breq	.+2      	; 0x1130 <__mulsf3+0x12>
    112e:	5a c0       	rjmp	.+180    	; 0x11e4 <__fp_inf>
    1130:	5f c0       	rjmp	.+190    	; 0x11f0 <__fp_nan>
    1132:	11 24       	eor	r1, r1
    1134:	a2 c0       	rjmp	.+324    	; 0x127a <__fp_szero>

00001136 <__mulsf3x>:
    1136:	7e d0       	rcall	.+252    	; 0x1234 <__fp_split3>
    1138:	a0 f3       	brcs	.-24     	; 0x1122 <__mulsf3+0x4>

0000113a <__mulsf3_pse>:
    113a:	95 9f       	mul	r25, r21
    113c:	d1 f3       	breq	.-12     	; 0x1132 <__mulsf3+0x14>
    113e:	95 0f       	add	r25, r21
    1140:	50 e0       	ldi	r21, 0x00	; 0
    1142:	55 1f       	adc	r21, r21
    1144:	62 9f       	mul	r22, r18
    1146:	f0 01       	movw	r30, r0
    1148:	72 9f       	mul	r23, r18
    114a:	bb 27       	eor	r27, r27
    114c:	f0 0d       	add	r31, r0
    114e:	b1 1d       	adc	r27, r1
    1150:	63 9f       	mul	r22, r19
    1152:	aa 27       	eor	r26, r26
    1154:	f0 0d       	add	r31, r0
    1156:	b1 1d       	adc	r27, r1
    1158:	aa 1f       	adc	r26, r26
    115a:	64 9f       	mul	r22, r20
    115c:	66 27       	eor	r22, r22
    115e:	b0 0d       	add	r27, r0
    1160:	a1 1d       	adc	r26, r1
    1162:	66 1f       	adc	r22, r22
    1164:	82 9f       	mul	r24, r18
    1166:	22 27       	eor	r18, r18
    1168:	b0 0d       	add	r27, r0
    116a:	a1 1d       	adc	r26, r1
    116c:	62 1f       	adc	r22, r18
    116e:	73 9f       	mul	r23, r19
    1170:	b0 0d       	add	r27, r0
    1172:	a1 1d       	adc	r26, r1
    1174:	62 1f       	adc	r22, r18
    1176:	83 9f       	mul	r24, r19
    1178:	a0 0d       	add	r26, r0
    117a:	61 1d       	adc	r22, r1
    117c:	22 1f       	adc	r18, r18
    117e:	74 9f       	mul	r23, r20
    1180:	33 27       	eor	r19, r19
    1182:	a0 0d       	add	r26, r0
    1184:	61 1d       	adc	r22, r1
    1186:	23 1f       	adc	r18, r19
    1188:	84 9f       	mul	r24, r20
    118a:	60 0d       	add	r22, r0
    118c:	21 1d       	adc	r18, r1
    118e:	82 2f       	mov	r24, r18
    1190:	76 2f       	mov	r23, r22
    1192:	6a 2f       	mov	r22, r26
    1194:	11 24       	eor	r1, r1
    1196:	9f 57       	subi	r25, 0x7F	; 127
    1198:	50 40       	sbci	r21, 0x00	; 0
    119a:	8a f0       	brmi	.+34     	; 0x11be <__mulsf3_pse+0x84>
    119c:	e1 f0       	breq	.+56     	; 0x11d6 <__mulsf3_pse+0x9c>
    119e:	88 23       	and	r24, r24
    11a0:	4a f0       	brmi	.+18     	; 0x11b4 <__mulsf3_pse+0x7a>
    11a2:	ee 0f       	add	r30, r30
    11a4:	ff 1f       	adc	r31, r31
    11a6:	bb 1f       	adc	r27, r27
    11a8:	66 1f       	adc	r22, r22
    11aa:	77 1f       	adc	r23, r23
    11ac:	88 1f       	adc	r24, r24
    11ae:	91 50       	subi	r25, 0x01	; 1
    11b0:	50 40       	sbci	r21, 0x00	; 0
    11b2:	a9 f7       	brne	.-22     	; 0x119e <__mulsf3_pse+0x64>
    11b4:	9e 3f       	cpi	r25, 0xFE	; 254
    11b6:	51 05       	cpc	r21, r1
    11b8:	70 f0       	brcs	.+28     	; 0x11d6 <__mulsf3_pse+0x9c>
    11ba:	14 c0       	rjmp	.+40     	; 0x11e4 <__fp_inf>
    11bc:	5e c0       	rjmp	.+188    	; 0x127a <__fp_szero>
    11be:	5f 3f       	cpi	r21, 0xFF	; 255
    11c0:	ec f3       	brlt	.-6      	; 0x11bc <__mulsf3_pse+0x82>
    11c2:	98 3e       	cpi	r25, 0xE8	; 232
    11c4:	dc f3       	brlt	.-10     	; 0x11bc <__mulsf3_pse+0x82>
    11c6:	86 95       	lsr	r24
    11c8:	77 95       	ror	r23
    11ca:	67 95       	ror	r22
    11cc:	b7 95       	ror	r27
    11ce:	f7 95       	ror	r31
    11d0:	e7 95       	ror	r30
    11d2:	9f 5f       	subi	r25, 0xFF	; 255
    11d4:	c1 f7       	brne	.-16     	; 0x11c6 <__mulsf3_pse+0x8c>
    11d6:	fe 2b       	or	r31, r30
    11d8:	88 0f       	add	r24, r24
    11da:	91 1d       	adc	r25, r1
    11dc:	96 95       	lsr	r25
    11de:	87 95       	ror	r24
    11e0:	97 f9       	bld	r25, 7
    11e2:	08 95       	ret

000011e4 <__fp_inf>:
    11e4:	97 f9       	bld	r25, 7
    11e6:	9f 67       	ori	r25, 0x7F	; 127
    11e8:	80 e8       	ldi	r24, 0x80	; 128
    11ea:	70 e0       	ldi	r23, 0x00	; 0
    11ec:	60 e0       	ldi	r22, 0x00	; 0
    11ee:	08 95       	ret

000011f0 <__fp_nan>:
    11f0:	9f ef       	ldi	r25, 0xFF	; 255
    11f2:	80 ec       	ldi	r24, 0xC0	; 192
    11f4:	08 95       	ret

000011f6 <__fp_pscA>:
    11f6:	00 24       	eor	r0, r0
    11f8:	0a 94       	dec	r0
    11fa:	16 16       	cp	r1, r22
    11fc:	17 06       	cpc	r1, r23
    11fe:	18 06       	cpc	r1, r24
    1200:	09 06       	cpc	r0, r25
    1202:	08 95       	ret

00001204 <__fp_pscB>:
    1204:	00 24       	eor	r0, r0
    1206:	0a 94       	dec	r0
    1208:	12 16       	cp	r1, r18
    120a:	13 06       	cpc	r1, r19
    120c:	14 06       	cpc	r1, r20
    120e:	05 06       	cpc	r0, r21
    1210:	08 95       	ret

00001212 <__fp_round>:
    1212:	09 2e       	mov	r0, r25
    1214:	03 94       	inc	r0
    1216:	00 0c       	add	r0, r0
    1218:	11 f4       	brne	.+4      	; 0x121e <__fp_round+0xc>
    121a:	88 23       	and	r24, r24
    121c:	52 f0       	brmi	.+20     	; 0x1232 <__fp_round+0x20>
    121e:	bb 0f       	add	r27, r27
    1220:	40 f4       	brcc	.+16     	; 0x1232 <__fp_round+0x20>
    1222:	bf 2b       	or	r27, r31
    1224:	11 f4       	brne	.+4      	; 0x122a <__fp_round+0x18>
    1226:	60 ff       	sbrs	r22, 0
    1228:	04 c0       	rjmp	.+8      	; 0x1232 <__fp_round+0x20>
    122a:	6f 5f       	subi	r22, 0xFF	; 255
    122c:	7f 4f       	sbci	r23, 0xFF	; 255
    122e:	8f 4f       	sbci	r24, 0xFF	; 255
    1230:	9f 4f       	sbci	r25, 0xFF	; 255
    1232:	08 95       	ret

00001234 <__fp_split3>:
    1234:	57 fd       	sbrc	r21, 7
    1236:	90 58       	subi	r25, 0x80	; 128
    1238:	44 0f       	add	r20, r20
    123a:	55 1f       	adc	r21, r21
    123c:	59 f0       	breq	.+22     	; 0x1254 <__fp_splitA+0x10>
    123e:	5f 3f       	cpi	r21, 0xFF	; 255
    1240:	71 f0       	breq	.+28     	; 0x125e <__fp_splitA+0x1a>
    1242:	47 95       	ror	r20

00001244 <__fp_splitA>:
    1244:	88 0f       	add	r24, r24
    1246:	97 fb       	bst	r25, 7
    1248:	99 1f       	adc	r25, r25
    124a:	61 f0       	breq	.+24     	; 0x1264 <__fp_splitA+0x20>
    124c:	9f 3f       	cpi	r25, 0xFF	; 255
    124e:	79 f0       	breq	.+30     	; 0x126e <__fp_splitA+0x2a>
    1250:	87 95       	ror	r24
    1252:	08 95       	ret
    1254:	12 16       	cp	r1, r18
    1256:	13 06       	cpc	r1, r19
    1258:	14 06       	cpc	r1, r20
    125a:	55 1f       	adc	r21, r21
    125c:	f2 cf       	rjmp	.-28     	; 0x1242 <__fp_split3+0xe>
    125e:	46 95       	lsr	r20
    1260:	f1 df       	rcall	.-30     	; 0x1244 <__fp_splitA>
    1262:	08 c0       	rjmp	.+16     	; 0x1274 <__fp_splitA+0x30>
    1264:	16 16       	cp	r1, r22
    1266:	17 06       	cpc	r1, r23
    1268:	18 06       	cpc	r1, r24
    126a:	99 1f       	adc	r25, r25
    126c:	f1 cf       	rjmp	.-30     	; 0x1250 <__fp_splitA+0xc>
    126e:	86 95       	lsr	r24
    1270:	71 05       	cpc	r23, r1
    1272:	61 05       	cpc	r22, r1
    1274:	08 94       	sec
    1276:	08 95       	ret

00001278 <__fp_zero>:
    1278:	e8 94       	clt

0000127a <__fp_szero>:
    127a:	bb 27       	eor	r27, r27
    127c:	66 27       	eor	r22, r22
    127e:	77 27       	eor	r23, r23
    1280:	cb 01       	movw	r24, r22
    1282:	97 f9       	bld	r25, 7
    1284:	08 95       	ret

00001286 <_exit>:
    1286:	f8 94       	cli

00001288 <__stop_program>:
    1288:	ff cf       	rjmp	.-2      	; 0x1288 <__stop_program>
