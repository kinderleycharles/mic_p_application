
StopWatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00802000  000007e4  00000878  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00802012  00802012  0000088a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000088a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000008ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c1f  00000000  00000000  00000942  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000350  00000000  00000000  00001561  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ea  00000000  00000000  000018b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000218  00000000  00000000  00001d9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006b5  00000000  00000000  00001fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004d3  00000000  00000000  00002669  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00002b3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	1f c1       	rjmp	.+574    	; 0x244 <__bad_interrupt>
   6:	00 00       	nop
   8:	1d c1       	rjmp	.+570    	; 0x244 <__bad_interrupt>
   a:	00 00       	nop
   c:	1b c1       	rjmp	.+566    	; 0x244 <__bad_interrupt>
   e:	00 00       	nop
  10:	19 c1       	rjmp	.+562    	; 0x244 <__bad_interrupt>
  12:	00 00       	nop
  14:	17 c1       	rjmp	.+558    	; 0x244 <__bad_interrupt>
  16:	00 00       	nop
  18:	15 c1       	rjmp	.+554    	; 0x244 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	13 c1       	rjmp	.+550    	; 0x244 <__bad_interrupt>
  1e:	00 00       	nop
  20:	11 c1       	rjmp	.+546    	; 0x244 <__bad_interrupt>
  22:	00 00       	nop
  24:	0f c1       	rjmp	.+542    	; 0x244 <__bad_interrupt>
  26:	00 00       	nop
  28:	0d c1       	rjmp	.+538    	; 0x244 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	0b c1       	rjmp	.+534    	; 0x244 <__bad_interrupt>
  2e:	00 00       	nop
  30:	09 c1       	rjmp	.+530    	; 0x244 <__bad_interrupt>
  32:	00 00       	nop
  34:	07 c1       	rjmp	.+526    	; 0x244 <__bad_interrupt>
  36:	00 00       	nop
  38:	05 c1       	rjmp	.+522    	; 0x244 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	03 c1       	rjmp	.+518    	; 0x244 <__bad_interrupt>
  3e:	00 00       	nop
  40:	01 c1       	rjmp	.+514    	; 0x244 <__bad_interrupt>
  42:	00 00       	nop
  44:	ff c0       	rjmp	.+510    	; 0x244 <__bad_interrupt>
  46:	00 00       	nop
  48:	fd c0       	rjmp	.+506    	; 0x244 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	fb c0       	rjmp	.+502    	; 0x244 <__bad_interrupt>
  4e:	00 00       	nop
  50:	c0 c2       	rjmp	.+1408   	; 0x5d2 <__vector_20>
  52:	00 00       	nop
  54:	f7 c0       	rjmp	.+494    	; 0x244 <__bad_interrupt>
  56:	00 00       	nop
  58:	f5 c0       	rjmp	.+490    	; 0x244 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	f3 c0       	rjmp	.+486    	; 0x244 <__bad_interrupt>
  5e:	00 00       	nop
  60:	f1 c0       	rjmp	.+482    	; 0x244 <__bad_interrupt>
  62:	00 00       	nop
  64:	ef c0       	rjmp	.+478    	; 0x244 <__bad_interrupt>
  66:	00 00       	nop
  68:	ed c0       	rjmp	.+474    	; 0x244 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	eb c0       	rjmp	.+470    	; 0x244 <__bad_interrupt>
  6e:	00 00       	nop
  70:	e9 c0       	rjmp	.+466    	; 0x244 <__bad_interrupt>
  72:	00 00       	nop
  74:	e7 c0       	rjmp	.+462    	; 0x244 <__bad_interrupt>
  76:	00 00       	nop
  78:	e5 c0       	rjmp	.+458    	; 0x244 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	e3 c0       	rjmp	.+454    	; 0x244 <__bad_interrupt>
  7e:	00 00       	nop
  80:	e1 c0       	rjmp	.+450    	; 0x244 <__bad_interrupt>
  82:	00 00       	nop
  84:	df c0       	rjmp	.+446    	; 0x244 <__bad_interrupt>
  86:	00 00       	nop
  88:	dd c0       	rjmp	.+442    	; 0x244 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	db c0       	rjmp	.+438    	; 0x244 <__bad_interrupt>
  8e:	00 00       	nop
  90:	d9 c0       	rjmp	.+434    	; 0x244 <__bad_interrupt>
  92:	00 00       	nop
  94:	d7 c0       	rjmp	.+430    	; 0x244 <__bad_interrupt>
  96:	00 00       	nop
  98:	d5 c0       	rjmp	.+426    	; 0x244 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	d3 c0       	rjmp	.+422    	; 0x244 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	d1 c0       	rjmp	.+418    	; 0x244 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	cf c0       	rjmp	.+414    	; 0x244 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	cd c0       	rjmp	.+410    	; 0x244 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	ff c2       	rjmp	.+1534   	; 0x6ac <__vector_43>
  ae:	00 00       	nop
  b0:	c9 c0       	rjmp	.+402    	; 0x244 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c7 c0       	rjmp	.+398    	; 0x244 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	c5 c0       	rjmp	.+394    	; 0x244 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	c3 c0       	rjmp	.+390    	; 0x244 <__bad_interrupt>
  be:	00 00       	nop
  c0:	c1 c0       	rjmp	.+386    	; 0x244 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	bf c0       	rjmp	.+382    	; 0x244 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	bd c0       	rjmp	.+378    	; 0x244 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	bb c0       	rjmp	.+374    	; 0x244 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b9 c0       	rjmp	.+370    	; 0x244 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b7 c0       	rjmp	.+366    	; 0x244 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b5 c0       	rjmp	.+362    	; 0x244 <__bad_interrupt>
  da:	00 00       	nop
  dc:	b3 c0       	rjmp	.+358    	; 0x244 <__bad_interrupt>
  de:	00 00       	nop
  e0:	b1 c0       	rjmp	.+354    	; 0x244 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	af c0       	rjmp	.+350    	; 0x244 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	ad c0       	rjmp	.+346    	; 0x244 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	ab c0       	rjmp	.+342    	; 0x244 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a9 c0       	rjmp	.+338    	; 0x244 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a7 c0       	rjmp	.+334    	; 0x244 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a5 c0       	rjmp	.+330    	; 0x244 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	a3 c0       	rjmp	.+326    	; 0x244 <__bad_interrupt>
  fe:	00 00       	nop
 100:	a1 c0       	rjmp	.+322    	; 0x244 <__bad_interrupt>
 102:	00 00       	nop
 104:	9f c0       	rjmp	.+318    	; 0x244 <__bad_interrupt>
 106:	00 00       	nop
 108:	9d c0       	rjmp	.+314    	; 0x244 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	9b c0       	rjmp	.+310    	; 0x244 <__bad_interrupt>
 10e:	00 00       	nop
 110:	99 c0       	rjmp	.+306    	; 0x244 <__bad_interrupt>
 112:	00 00       	nop
 114:	97 c0       	rjmp	.+302    	; 0x244 <__bad_interrupt>
 116:	00 00       	nop
 118:	95 c0       	rjmp	.+298    	; 0x244 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	93 c0       	rjmp	.+294    	; 0x244 <__bad_interrupt>
 11e:	00 00       	nop
 120:	91 c0       	rjmp	.+290    	; 0x244 <__bad_interrupt>
 122:	00 00       	nop
 124:	8f c0       	rjmp	.+286    	; 0x244 <__bad_interrupt>
 126:	00 00       	nop
 128:	8d c0       	rjmp	.+282    	; 0x244 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	8b c0       	rjmp	.+278    	; 0x244 <__bad_interrupt>
 12e:	00 00       	nop
 130:	89 c0       	rjmp	.+274    	; 0x244 <__bad_interrupt>
 132:	00 00       	nop
 134:	87 c0       	rjmp	.+270    	; 0x244 <__bad_interrupt>
 136:	00 00       	nop
 138:	85 c0       	rjmp	.+266    	; 0x244 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	83 c0       	rjmp	.+262    	; 0x244 <__bad_interrupt>
 13e:	00 00       	nop
 140:	81 c0       	rjmp	.+258    	; 0x244 <__bad_interrupt>
 142:	00 00       	nop
 144:	7f c0       	rjmp	.+254    	; 0x244 <__bad_interrupt>
 146:	00 00       	nop
 148:	7d c0       	rjmp	.+250    	; 0x244 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	7b c0       	rjmp	.+246    	; 0x244 <__bad_interrupt>
 14e:	00 00       	nop
 150:	79 c0       	rjmp	.+242    	; 0x244 <__bad_interrupt>
 152:	00 00       	nop
 154:	77 c0       	rjmp	.+238    	; 0x244 <__bad_interrupt>
 156:	00 00       	nop
 158:	75 c0       	rjmp	.+234    	; 0x244 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	73 c0       	rjmp	.+230    	; 0x244 <__bad_interrupt>
 15e:	00 00       	nop
 160:	71 c0       	rjmp	.+226    	; 0x244 <__bad_interrupt>
 162:	00 00       	nop
 164:	6f c0       	rjmp	.+222    	; 0x244 <__bad_interrupt>
 166:	00 00       	nop
 168:	6d c0       	rjmp	.+218    	; 0x244 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	6b c0       	rjmp	.+214    	; 0x244 <__bad_interrupt>
 16e:	00 00       	nop
 170:	69 c0       	rjmp	.+210    	; 0x244 <__bad_interrupt>
 172:	00 00       	nop
 174:	67 c0       	rjmp	.+206    	; 0x244 <__bad_interrupt>
 176:	00 00       	nop
 178:	65 c0       	rjmp	.+202    	; 0x244 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	63 c0       	rjmp	.+198    	; 0x244 <__bad_interrupt>
 17e:	00 00       	nop
 180:	61 c0       	rjmp	.+194    	; 0x244 <__bad_interrupt>
 182:	00 00       	nop
 184:	5f c0       	rjmp	.+190    	; 0x244 <__bad_interrupt>
 186:	00 00       	nop
 188:	5d c0       	rjmp	.+186    	; 0x244 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	5b c0       	rjmp	.+182    	; 0x244 <__bad_interrupt>
 18e:	00 00       	nop
 190:	59 c0       	rjmp	.+178    	; 0x244 <__bad_interrupt>
 192:	00 00       	nop
 194:	57 c0       	rjmp	.+174    	; 0x244 <__bad_interrupt>
 196:	00 00       	nop
 198:	55 c0       	rjmp	.+170    	; 0x244 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	53 c0       	rjmp	.+166    	; 0x244 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	51 c0       	rjmp	.+162    	; 0x244 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	4f c0       	rjmp	.+158    	; 0x244 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	4d c0       	rjmp	.+154    	; 0x244 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	4b c0       	rjmp	.+150    	; 0x244 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	49 c0       	rjmp	.+146    	; 0x244 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	47 c0       	rjmp	.+142    	; 0x244 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	45 c0       	rjmp	.+138    	; 0x244 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	43 c0       	rjmp	.+134    	; 0x244 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	41 c0       	rjmp	.+130    	; 0x244 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	3f c0       	rjmp	.+126    	; 0x244 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	3d c0       	rjmp	.+122    	; 0x244 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	3b c0       	rjmp	.+118    	; 0x244 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	39 c0       	rjmp	.+114    	; 0x244 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	37 c0       	rjmp	.+110    	; 0x244 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	35 c0       	rjmp	.+106    	; 0x244 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	33 c0       	rjmp	.+102    	; 0x244 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	31 c0       	rjmp	.+98     	; 0x244 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	2f c0       	rjmp	.+94     	; 0x244 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	2d c0       	rjmp	.+90     	; 0x244 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	2b c0       	rjmp	.+86     	; 0x244 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	29 c0       	rjmp	.+82     	; 0x244 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	27 c0       	rjmp	.+78     	; 0x244 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	25 c0       	rjmp	.+74     	; 0x244 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	e4 ee       	ldi	r30, 0xE4	; 228
 21c:	f7 e0       	ldi	r31, 0x07	; 7
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a2 31       	cpi	r26, 0x12	; 18
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	20 e2       	ldi	r18, 0x20	; 32
 232:	a2 e1       	ldi	r26, 0x12	; 18
 234:	b0 e2       	ldi	r27, 0x20	; 32
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	a8 31       	cpi	r26, 0x18	; 24
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	c0 d1       	rcall	.+896    	; 0x5c2 <main>
 242:	ce c2       	rjmp	.+1436   	; 0x7e0 <_exit>

00000244 <__bad_interrupt>:
 244:	dd ce       	rjmp	.-582    	; 0x0 <__vectors>

00000246 <Wait>:
	PORTE_PIN6CTRL = 0x02;
	PORTE_PIN7CTRL = 0x02;
	
	PORTE_INTFLAGS = 0x01;
	PMIC_CTRL = 0x01;							// Turn on low level interrupt	
	sei();					
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	90 e1       	ldi	r25, 0x10	; 16
 24a:	a7 e4       	ldi	r26, 0x47	; 71
 24c:	b0 e0       	ldi	r27, 0x00	; 0
 24e:	0b b6       	in	r0, 0x3b	; 59
 250:	ab bf       	out	0x3b, r26	; 59
 252:	fc 01       	movw	r30, r24
 254:	20 81       	ld	r18, Z
 256:	0b be       	out	0x3b, r0	; 59
 258:	22 23       	and	r18, r18
 25a:	cc f3       	brlt	.-14     	; 0x24e <Wait+0x8>
 25c:	08 95       	ret

0000025e <sendStr>:
 25e:	8f 92       	push	r8
 260:	9f 92       	push	r9
 262:	af 92       	push	r10
 264:	bf 92       	push	r11
 266:	cf 92       	push	r12
 268:	df 92       	push	r13
 26a:	ef 92       	push	r14
 26c:	ff 92       	push	r15
 26e:	1f 93       	push	r17
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	ec 01       	movw	r28, r24
 276:	0f 2e       	mov	r0, r31
 278:	cc 24       	eor	r12, r12
 27a:	c3 94       	inc	r12
 27c:	f0 e1       	ldi	r31, 0x10	; 16
 27e:	df 2e       	mov	r13, r31
 280:	f7 e4       	ldi	r31, 0x47	; 71
 282:	ef 2e       	mov	r14, r31
 284:	f1 2c       	mov	r15, r1
 286:	f0 2d       	mov	r31, r0
 288:	0f 2e       	mov	r0, r31
 28a:	81 2c       	mov	r8, r1
 28c:	f0 e1       	ldi	r31, 0x10	; 16
 28e:	9f 2e       	mov	r9, r31
 290:	f7 e4       	ldi	r31, 0x47	; 71
 292:	af 2e       	mov	r10, r31
 294:	b1 2c       	mov	r11, r1
 296:	f0 2d       	mov	r31, r0
 298:	10 ec       	ldi	r17, 0xC0	; 192
 29a:	0f c0       	rjmp	.+30     	; 0x2ba <sendStr+0x5c>
 29c:	d4 df       	rcall	.-88     	; 0x246 <Wait>
 29e:	89 91       	ld	r24, Y+
 2a0:	8a 30       	cpi	r24, 0x0A	; 10
 2a2:	31 f4       	brne	.+12     	; 0x2b0 <sendStr+0x52>
 2a4:	0b b6       	in	r0, 0x3b	; 59
 2a6:	ab be       	out	0x3b, r10	; 59
 2a8:	f4 01       	movw	r30, r8
 2aa:	10 83       	st	Z, r17
 2ac:	0b be       	out	0x3b, r0	; 59
 2ae:	05 c0       	rjmp	.+10     	; 0x2ba <sendStr+0x5c>
 2b0:	0b b6       	in	r0, 0x3b	; 59
 2b2:	eb be       	out	0x3b, r14	; 59
 2b4:	f6 01       	movw	r30, r12
 2b6:	80 83       	st	Z, r24
 2b8:	0b be       	out	0x3b, r0	; 59
 2ba:	88 81       	ld	r24, Y
 2bc:	81 11       	cpse	r24, r1
 2be:	ee cf       	rjmp	.-36     	; 0x29c <sendStr+0x3e>
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	1f 91       	pop	r17
 2c6:	ff 90       	pop	r15
 2c8:	ef 90       	pop	r14
 2ca:	df 90       	pop	r13
 2cc:	cf 90       	pop	r12
 2ce:	bf 90       	pop	r11
 2d0:	af 90       	pop	r10
 2d2:	9f 90       	pop	r9
 2d4:	8f 90       	pop	r8
 2d6:	08 95       	ret

000002d8 <EBI_INIT>:
 2d8:	e0 ee       	ldi	r30, 0xE0	; 224
 2da:	f6 e0       	ldi	r31, 0x06	; 6
 2dc:	87 e3       	ldi	r24, 0x37	; 55
 2de:	80 83       	st	Z, r24
 2e0:	83 e3       	ldi	r24, 0x33	; 51
 2e2:	84 83       	std	Z+4, r24	; 0x04
 2e4:	8f ef       	ldi	r24, 0xFF	; 255
 2e6:	80 93 20 07 	sts	0x0720, r24
 2ea:	e0 e4       	ldi	r30, 0x40	; 64
 2ec:	f4 e0       	ldi	r31, 0x04	; 4
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	80 83       	st	Z, r24
 2f2:	13 8a       	std	Z+19, r1	; 0x13
 2f4:	80 e8       	ldi	r24, 0x80	; 128
 2f6:	82 8b       	std	Z+18, r24	; 0x12
 2f8:	85 e1       	ldi	r24, 0x15	; 21
 2fa:	80 8b       	std	Z+16, r24	; 0x10
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	97 e4       	ldi	r25, 0x47	; 71
 300:	86 8b       	std	Z+22, r24	; 0x16
 302:	97 8b       	std	Z+23, r25	; 0x17
 304:	81 e2       	ldi	r24, 0x21	; 33
 306:	84 8b       	std	Z+20, r24	; 0x14
 308:	08 95       	ret

0000030a <TC_INIT>:
 30a:	8f ef       	ldi	r24, 0xFF	; 255
 30c:	80 93 40 06 	sts	0x0640, r24
 310:	80 93 44 06 	sts	0x0644, r24
 314:	10 92 40 08 	sts	0x0840, r1
 318:	80 e1       	ldi	r24, 0x10	; 16
 31a:	80 93 41 08 	sts	0x0841, r24
 31e:	10 92 42 08 	sts	0x0842, r1
 322:	80 ea       	ldi	r24, 0xA0	; 160
 324:	80 93 43 08 	sts	0x0843, r24
 328:	10 92 44 08 	sts	0x0844, r1
 32c:	21 e0       	ldi	r18, 0x01	; 1
 32e:	20 93 46 08 	sts	0x0846, r18
 332:	20 93 4c 08 	sts	0x084C, r18
 336:	8f e0       	ldi	r24, 0x0F	; 15
 338:	97 e2       	ldi	r25, 0x27	; 39
 33a:	80 93 66 08 	sts	0x0866, r24
 33e:	90 93 67 08 	sts	0x0867, r25
 342:	10 92 60 08 	sts	0x0860, r1
 346:	10 92 61 08 	sts	0x0861, r1
 34a:	10 92 48 08 	sts	0x0848, r1
 34e:	20 93 a2 00 	sts	0x00A2, r18
 352:	78 94       	sei
 354:	08 95       	ret

00000356 <KEYPAD_INIT>:
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	1f 92       	push	r1
 35c:	cd b7       	in	r28, 0x3d	; 61
 35e:	de b7       	in	r29, 0x3e	; 62
 360:	e0 e8       	ldi	r30, 0x80	; 128
 362:	f6 e0       	ldi	r31, 0x06	; 6
 364:	8f e0       	ldi	r24, 0x0F	; 15
 366:	80 83       	st	Z, r24
 368:	90 ef       	ldi	r25, 0xF0	; 240
 36a:	92 83       	std	Z+2, r25	; 0x02
 36c:	90 93 88 06 	sts	0x0688, r25
 370:	80 93 84 06 	sts	0x0684, r24
 374:	88 e1       	ldi	r24, 0x18	; 24
 376:	89 83       	std	Y+1, r24	; 0x01
 378:	89 81       	ldd	r24, Y+1	; 0x01
 37a:	80 93 97 06 	sts	0x0697, r24
 37e:	89 81       	ldd	r24, Y+1	; 0x01
 380:	80 93 96 06 	sts	0x0696, r24
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	80 93 95 06 	sts	0x0695, r24
 38a:	89 81       	ldd	r24, Y+1	; 0x01
 38c:	80 93 94 06 	sts	0x0694, r24
 390:	0f 90       	pop	r0
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	08 95       	ret

00000398 <LCD_INIT>:
 398:	56 df       	rcall	.-340    	; 0x246 <Wait>
 39a:	28 e3       	ldi	r18, 0x38	; 56
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	90 e1       	ldi	r25, 0x10	; 16
 3a0:	a7 e4       	ldi	r26, 0x47	; 71
 3a2:	b0 e0       	ldi	r27, 0x00	; 0
 3a4:	0b b6       	in	r0, 0x3b	; 59
 3a6:	ab bf       	out	0x3b, r26	; 59
 3a8:	fc 01       	movw	r30, r24
 3aa:	20 83       	st	Z, r18
 3ac:	0b be       	out	0x3b, r0	; 59
 3ae:	4b df       	rcall	.-362    	; 0x246 <Wait>
 3b0:	2f e0       	ldi	r18, 0x0F	; 15
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	90 e1       	ldi	r25, 0x10	; 16
 3b6:	a7 e4       	ldi	r26, 0x47	; 71
 3b8:	b0 e0       	ldi	r27, 0x00	; 0
 3ba:	0b b6       	in	r0, 0x3b	; 59
 3bc:	ab bf       	out	0x3b, r26	; 59
 3be:	fc 01       	movw	r30, r24
 3c0:	20 83       	st	Z, r18
 3c2:	0b be       	out	0x3b, r0	; 59
 3c4:	40 df       	rcall	.-384    	; 0x246 <Wait>
 3c6:	21 e0       	ldi	r18, 0x01	; 1
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	90 e1       	ldi	r25, 0x10	; 16
 3cc:	a7 e4       	ldi	r26, 0x47	; 71
 3ce:	b0 e0       	ldi	r27, 0x00	; 0
 3d0:	0b b6       	in	r0, 0x3b	; 59
 3d2:	ab bf       	out	0x3b, r26	; 59
 3d4:	fc 01       	movw	r30, r24
 3d6:	20 83       	st	Z, r18
 3d8:	0b be       	out	0x3b, r0	; 59
 3da:	35 df       	rcall	.-406    	; 0x246 <Wait>
 3dc:	26 e0       	ldi	r18, 0x06	; 6
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	90 e1       	ldi	r25, 0x10	; 16
 3e2:	a7 e4       	ldi	r26, 0x47	; 71
 3e4:	b0 e0       	ldi	r27, 0x00	; 0
 3e6:	0b b6       	in	r0, 0x3b	; 59
 3e8:	ab bf       	out	0x3b, r26	; 59
 3ea:	fc 01       	movw	r30, r24
 3ec:	20 83       	st	Z, r18
 3ee:	0b be       	out	0x3b, r0	; 59
 3f0:	08 95       	ret

000003f2 <clearLCD>:
 3f2:	29 df       	rcall	.-430    	; 0x246 <Wait>
 3f4:	2f e0       	ldi	r18, 0x0F	; 15
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	90 e1       	ldi	r25, 0x10	; 16
 3fa:	a7 e4       	ldi	r26, 0x47	; 71
 3fc:	b0 e0       	ldi	r27, 0x00	; 0
 3fe:	0b b6       	in	r0, 0x3b	; 59
 400:	ab bf       	out	0x3b, r26	; 59
 402:	fc 01       	movw	r30, r24
 404:	20 83       	st	Z, r18
 406:	0b be       	out	0x3b, r0	; 59
 408:	1e df       	rcall	.-452    	; 0x246 <Wait>
 40a:	21 e0       	ldi	r18, 0x01	; 1
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	90 e1       	ldi	r25, 0x10	; 16
 410:	a7 e4       	ldi	r26, 0x47	; 71
 412:	b0 e0       	ldi	r27, 0x00	; 0
 414:	0b b6       	in	r0, 0x3b	; 59
 416:	ab bf       	out	0x3b, r26	; 59
 418:	fc 01       	movw	r30, r24
 41a:	20 83       	st	Z, r18
 41c:	0b be       	out	0x3b, r0	; 59
 41e:	08 95       	ret

00000420 <KEY_PRESSED>:
 * Name:     KEY_PRESSED
 * Purpose:  Function determines which key in a keypad was pressed
 * Inputs:	 int
 * Output:
 ************************************************************************************/
  int KEY_PRESSED() {
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
 424:	cd b7       	in	r28, 0x3d	; 61
 426:	de b7       	in	r29, 0x3e	; 62
 428:	67 97       	sbiw	r28, 0x17	; 23
 42a:	cd bf       	out	0x3d, r28	; 61
 42c:	de bf       	out	0x3e, r29	; 62
	  uint8_t volatile keys[16] = {1,4,7,14,2,5,8,0,3,6,9,15,10,11,12,13};
 42e:	80 e1       	ldi	r24, 0x10	; 16
 430:	e2 e0       	ldi	r30, 0x02	; 2
 432:	f0 e2       	ldi	r31, 0x20	; 32
 434:	de 01       	movw	r26, r28
 436:	11 96       	adiw	r26, 0x01	; 1
 438:	01 90       	ld	r0, Z+
 43a:	0d 92       	st	X+, r0
 43c:	8a 95       	dec	r24
 43e:	e1 f7       	brne	.-8      	; 0x438 <KEY_PRESSED+0x18>
	  uint8_t volatile out[4] = {7,11,13,14};
 440:	87 e0       	ldi	r24, 0x07	; 7
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	a0 e0       	ldi	r26, 0x00	; 0
 446:	b0 e0       	ldi	r27, 0x00	; 0
 448:	9b e0       	ldi	r25, 0x0B	; 11
 44a:	ad e0       	ldi	r26, 0x0D	; 13
 44c:	be e0       	ldi	r27, 0x0E	; 14
 44e:	89 8b       	std	Y+17, r24	; 0x11
 450:	9a 8b       	std	Y+18, r25	; 0x12
 452:	ab 8b       	std	Y+19, r26	; 0x13
 454:	bc 8b       	std	Y+20, r27	; 0x14
	  
	  uint8_t volatile i;
	  for (i = 0; i != 4; ++i) {
 456:	1d 8a       	std	Y+21, r1	; 0x15
 458:	8d 89       	ldd	r24, Y+21	; 0x15
 45a:	84 30       	cpi	r24, 0x04	; 4
 45c:	09 f4       	brne	.+2      	; 0x460 <KEY_PRESSED+0x40>
 45e:	4d c0       	rjmp	.+154    	; 0x4fa <KEY_PRESSED+0xda>
		  PORTE.OUT = out[i];
 460:	a0 e8       	ldi	r26, 0x80	; 128
 462:	b6 e0       	ldi	r27, 0x06	; 6
 464:	8d 89       	ldd	r24, Y+21	; 0x15
 466:	e1 e1       	ldi	r30, 0x11	; 17
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	ec 0f       	add	r30, r28
 46c:	fd 1f       	adc	r31, r29
 46e:	e8 0f       	add	r30, r24
 470:	f1 1d       	adc	r31, r1
 472:	80 81       	ld	r24, Z
 474:	14 96       	adiw	r26, 0x04	; 4
 476:	8c 93       	st	X, r24
 478:	14 97       	sbiw	r26, 0x04	; 4
		  uint8_t volatile tmp = PORTE.IN >> 4;
 47a:	18 96       	adiw	r26, 0x08	; 8
 47c:	8c 91       	ld	r24, X
 47e:	18 97       	sbiw	r26, 0x08	; 8
 480:	82 95       	swap	r24
 482:	8f 70       	andi	r24, 0x0F	; 15
 484:	8f 8b       	std	Y+23, r24	; 0x17
		  
		  uint8_t volatile j;
		  for(j = 0; j!=4; ++j) {
 486:	1e 8a       	std	Y+22, r1	; 0x16
 488:	8e 89       	ldd	r24, Y+22	; 0x16
 48a:	84 30       	cpi	r24, 0x04	; 4
 48c:	71 f1       	breq	.+92     	; 0x4ea <KEY_PRESSED+0xca>
			 if(tmp == out[j]) {
 48e:	8e 89       	ldd	r24, Y+22	; 0x16
 490:	e1 e1       	ldi	r30, 0x11	; 17
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	ec 0f       	add	r30, r28
 496:	fd 1f       	adc	r31, r29
 498:	e8 0f       	add	r30, r24
 49a:	f1 1d       	adc	r31, r1
 49c:	90 81       	ld	r25, Z
 49e:	8f 89       	ldd	r24, Y+23	; 0x17
 4a0:	98 13       	cpse	r25, r24
 4a2:	1d c0       	rjmp	.+58     	; 0x4de <KEY_PRESSED+0xbe>
 4a4:	0b c0       	rjmp	.+22     	; 0x4bc <KEY_PRESSED+0x9c>
 4a6:	8e 89       	ldd	r24, Y+22	; 0x16
 4a8:	e1 e1       	ldi	r30, 0x11	; 17
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	ec 0f       	add	r30, r28
 4ae:	fd 1f       	adc	r31, r29
 4b0:	e8 0f       	add	r30, r24
 4b2:	f1 1d       	adc	r31, r1
 4b4:	90 81       	ld	r25, Z
 4b6:	8f 89       	ldd	r24, Y+23	; 0x17
 4b8:	98 13       	cpse	r25, r24
 4ba:	11 c0       	rjmp	.+34     	; 0x4de <KEY_PRESSED+0xbe>
				 return keys[4*i+j];
 4bc:	8d 89       	ldd	r24, Y+21	; 0x15
 4be:	ee 89       	ldd	r30, Y+22	; 0x16
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	94 e0       	ldi	r25, 0x04	; 4
 4c4:	89 9f       	mul	r24, r25
 4c6:	e0 0d       	add	r30, r0
 4c8:	f1 1d       	adc	r31, r1
 4ca:	11 24       	eor	r1, r1
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	8c 0f       	add	r24, r28
 4d2:	9d 1f       	adc	r25, r29
 4d4:	e8 0f       	add	r30, r24
 4d6:	f9 1f       	adc	r31, r25
 4d8:	80 81       	ld	r24, Z
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	13 c0       	rjmp	.+38     	; 0x504 <KEY_PRESSED+0xe4>
	  for (i = 0; i != 4; ++i) {
		  PORTE.OUT = out[i];
		  uint8_t volatile tmp = PORTE.IN >> 4;
		  
		  uint8_t volatile j;
		  for(j = 0; j!=4; ++j) {
 4de:	8e 89       	ldd	r24, Y+22	; 0x16
 4e0:	8f 5f       	subi	r24, 0xFF	; 255
 4e2:	8e 8b       	std	Y+22, r24	; 0x16
 4e4:	8e 89       	ldd	r24, Y+22	; 0x16
 4e6:	84 30       	cpi	r24, 0x04	; 4
 4e8:	f1 f6       	brne	.-68     	; 0x4a6 <KEY_PRESSED+0x86>
  int KEY_PRESSED() {
	  uint8_t volatile keys[16] = {1,4,7,14,2,5,8,0,3,6,9,15,10,11,12,13};
	  uint8_t volatile out[4] = {7,11,13,14};
	  
	  uint8_t volatile i;
	  for (i = 0; i != 4; ++i) {
 4ea:	8d 89       	ldd	r24, Y+21	; 0x15
 4ec:	8f 5f       	subi	r24, 0xFF	; 255
 4ee:	8d 8b       	std	Y+21, r24	; 0x15
 4f0:	8d 89       	ldd	r24, Y+21	; 0x15
 4f2:	84 30       	cpi	r24, 0x04	; 4
 4f4:	09 f0       	breq	.+2      	; 0x4f8 <KEY_PRESSED+0xd8>
 4f6:	b6 cf       	rjmp	.-148    	; 0x464 <KEY_PRESSED+0x44>
 4f8:	03 c0       	rjmp	.+6      	; 0x500 <KEY_PRESSED+0xe0>
			 if(tmp == out[j]) {
				 return keys[4*i+j];
			 }
		  }
	  }
	  return -1;
 4fa:	8f ef       	ldi	r24, 0xFF	; 255
 4fc:	9f ef       	ldi	r25, 0xFF	; 255
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <KEY_PRESSED+0xe4>
 500:	8f ef       	ldi	r24, 0xFF	; 255
 502:	9f ef       	ldi	r25, 0xFF	; 255
  }
 504:	67 96       	adiw	r28, 0x17	; 23
 506:	cd bf       	out	0x3d, r28	; 61
 508:	de bf       	out	0x3e, r29	; 62
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	08 95       	ret

00000510 <updateTime>:
 
 void updateTime() {
 510:	ef 92       	push	r14
 512:	ff 92       	push	r15
 514:	0f 93       	push	r16
 516:	1f 93       	push	r17
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	cd b7       	in	r28, 0x3d	; 61
 51e:	de b7       	in	r29, 0x3e	; 62
 520:	ce 56       	subi	r28, 0x6E	; 110
 522:	d1 09       	sbc	r29, r1
 524:	cd bf       	out	0x3d, r28	; 61
 526:	de bf       	out	0x3e, r29	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 528:	4a e0       	ldi	r20, 0x0A	; 10
 52a:	be 01       	movw	r22, r28
 52c:	6f 5a       	subi	r22, 0xAF	; 175
 52e:	7f 4f       	sbci	r23, 0xFF	; 255
 530:	80 91 12 20 	lds	r24, 0x2012
 534:	90 91 13 20 	lds	r25, 0x2013
 538:	20 d1       	rcall	.+576    	; 0x77a <__itoa_ncheck>
 53a:	4a e0       	ldi	r20, 0x0A	; 10
 53c:	be 01       	movw	r22, r28
 53e:	65 5a       	subi	r22, 0xA5	; 165
 540:	7f 4f       	sbci	r23, 0xFF	; 255
 542:	80 91 14 20 	lds	r24, 0x2014
 546:	90 91 15 20 	lds	r25, 0x2015
 54a:	17 d1       	rcall	.+558    	; 0x77a <__itoa_ncheck>
 54c:	4a e0       	ldi	r20, 0x0A	; 10
 54e:	be 01       	movw	r22, r28
 550:	6b 59       	subi	r22, 0x9B	; 155
 552:	7f 4f       	sbci	r23, 0xFF	; 255
 554:	80 91 16 20 	lds	r24, 0x2016
 558:	90 91 17 20 	lds	r25, 0x2017
 55c:	0e d1       	rcall	.+540    	; 0x77a <__itoa_ncheck>
	itoa(hours, hr, 10);
	itoa(minutes, min, 10);
	itoa(seconds, sec, 10);
	
	// Concatenating String to format the time on the LCD
	strcat(str,hr);
 55e:	be 01       	movw	r22, r28
 560:	6f 5a       	subi	r22, 0xAF	; 175
 562:	7f 4f       	sbci	r23, 0xFF	; 255
 564:	8e 01       	movw	r16, r28
 566:	0f 5f       	subi	r16, 0xFF	; 255
 568:	1f 4f       	sbci	r17, 0xFF	; 255
 56a:	c8 01       	movw	r24, r16
 56c:	fb d0       	rcall	.+502    	; 0x764 <strcat>
	strcat(str,":");
 56e:	f8 01       	movw	r30, r16
 570:	01 90       	ld	r0, Z+
 572:	00 20       	and	r0, r0
 574:	e9 f7       	brne	.-6      	; 0x570 <updateTime+0x60>
 576:	31 97       	sbiw	r30, 0x01	; 1
 578:	0f 2e       	mov	r0, r31
 57a:	fa e3       	ldi	r31, 0x3A	; 58
 57c:	ef 2e       	mov	r14, r31
 57e:	f1 2c       	mov	r15, r1
 580:	f0 2d       	mov	r31, r0
 582:	e0 82       	st	Z, r14
 584:	f1 82       	std	Z+1, r15	; 0x01
	strcat(str,min);
 586:	be 01       	movw	r22, r28
 588:	65 5a       	subi	r22, 0xA5	; 165
 58a:	7f 4f       	sbci	r23, 0xFF	; 255
 58c:	c8 01       	movw	r24, r16
 58e:	ea d0       	rcall	.+468    	; 0x764 <strcat>
	strcat(str,":");
 590:	f8 01       	movw	r30, r16
 592:	01 90       	ld	r0, Z+
 594:	00 20       	and	r0, r0
 596:	e9 f7       	brne	.-6      	; 0x592 <updateTime+0x82>
 598:	31 97       	sbiw	r30, 0x01	; 1
 59a:	e0 82       	st	Z, r14
 59c:	f1 82       	std	Z+1, r15	; 0x01
	strcat(str,sec);
 59e:	be 01       	movw	r22, r28
 5a0:	6b 59       	subi	r22, 0x9B	; 155
 5a2:	7f 4f       	sbci	r23, 0xFF	; 255
 5a4:	c8 01       	movw	r24, r16
 5a6:	de d0       	rcall	.+444    	; 0x764 <strcat>
	
	// Print time on screen
	sendStr(str); 
 5a8:	c8 01       	movw	r24, r16
 5aa:	59 de       	rcall	.-846    	; 0x25e <sendStr>
 }
 5ac:	c2 59       	subi	r28, 0x92	; 146
 5ae:	df 4f       	sbci	r29, 0xFF	; 255
 5b0:	cd bf       	out	0x3d, r28	; 61
 5b2:	de bf       	out	0x3e, r29	; 62
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	1f 91       	pop	r17
 5ba:	0f 91       	pop	r16
 5bc:	ff 90       	pop	r15
 5be:	ef 90       	pop	r14
 5c0:	08 95       	ret

000005c2 <main>:
 

int main(void) {
    
	// Initialize TC, EBI, and Keypad
	EBI_INIT();
 5c2:	8a de       	rcall	.-748    	; 0x2d8 <EBI_INIT>
	LCD_INIT();
 5c4:	e9 de       	rcall	.-558    	; 0x398 <LCD_INIT>
	KEYPAD_INIT();
 5c6:	c7 de       	rcall	.-626    	; 0x356 <KEYPAD_INIT>
	TC_INIT();
 5c8:	a0 de       	rcall	.-704    	; 0x30a <TC_INIT>
	
	// Turn on time counter and run a simple loop
	TCC1_CTRLA = 0x01;
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	80 93 40 08 	sts	0x0840, r24
 5d0:	ff cf       	rjmp	.-2      	; 0x5d0 <main+0xe>

000005d2 <__vector_20>:
 * Name:     ISR(TCC1_OVF_vect)
 * Purpose:  Interrupt subroutine to count when 1 second has elapsed
 * Inputs:
 * Output:
 ************************************************************************************/
ISR(TCC1_OVF_vect){
 5d2:	1f 92       	push	r1
 5d4:	0f 92       	push	r0
 5d6:	0f b6       	in	r0, 0x3f	; 63
 5d8:	0f 92       	push	r0
 5da:	11 24       	eor	r1, r1
 5dc:	08 b6       	in	r0, 0x38	; 56
 5de:	0f 92       	push	r0
 5e0:	18 be       	out	0x38, r1	; 56
 5e2:	09 b6       	in	r0, 0x39	; 57
 5e4:	0f 92       	push	r0
 5e6:	19 be       	out	0x39, r1	; 57
 5e8:	0b b6       	in	r0, 0x3b	; 59
 5ea:	0f 92       	push	r0
 5ec:	1b be       	out	0x3b, r1	; 59
 5ee:	2f 93       	push	r18
 5f0:	3f 93       	push	r19
 5f2:	4f 93       	push	r20
 5f4:	5f 93       	push	r21
 5f6:	6f 93       	push	r22
 5f8:	7f 93       	push	r23
 5fa:	8f 93       	push	r24
 5fc:	9f 93       	push	r25
 5fe:	af 93       	push	r26
 600:	bf 93       	push	r27
 602:	ef 93       	push	r30
 604:	ff 93       	push	r31
	if(seconds == 59) {
 606:	80 91 16 20 	lds	r24, 0x2016
 60a:	90 91 17 20 	lds	r25, 0x2017
 60e:	cb 97       	sbiw	r24, 0x3b	; 59
 610:	51 f5       	brne	.+84     	; 0x666 <__vector_20+0x94>
		seconds = 0;
 612:	10 92 16 20 	sts	0x2016, r1
 616:	10 92 17 20 	sts	0x2017, r1
		minutes = minutes + 1;
 61a:	80 91 14 20 	lds	r24, 0x2014
 61e:	90 91 15 20 	lds	r25, 0x2015
 622:	01 96       	adiw	r24, 0x01	; 1
		// Check if minutes is equal to 59
		if(minutes == 59) {
 624:	8b 33       	cpi	r24, 0x3B	; 59
 626:	91 05       	cpc	r25, r1
 628:	29 f0       	breq	.+10     	; 0x634 <__vector_20+0x62>
 * Output:
 ************************************************************************************/
ISR(TCC1_OVF_vect){
	if(seconds == 59) {
		seconds = 0;
		minutes = minutes + 1;
 62a:	80 93 14 20 	sts	0x2014, r24
 62e:	90 93 15 20 	sts	0x2015, r25
 632:	0d c0       	rjmp	.+26     	; 0x64e <__vector_20+0x7c>
		// Check if minutes is equal to 59
		if(minutes == 59) {
			minutes = 0;
 634:	10 92 14 20 	sts	0x2014, r1
 638:	10 92 15 20 	sts	0x2015, r1
			hours = hours + 1;
 63c:	80 91 12 20 	lds	r24, 0x2012
 640:	90 91 13 20 	lds	r25, 0x2013
 644:	01 96       	adiw	r24, 0x01	; 1
 646:	80 93 12 20 	sts	0x2012, r24
 64a:	90 93 13 20 	sts	0x2013, r25
		}
		clearLCD();
 64e:	d1 de       	rcall	.-606    	; 0x3f2 <clearLCD>
		__far_mem_write(LCD_CMD,0x02);
 650:	22 e0       	ldi	r18, 0x02	; 2
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	90 e1       	ldi	r25, 0x10	; 16
 656:	a7 e4       	ldi	r26, 0x47	; 71
 658:	b0 e0       	ldi	r27, 0x00	; 0
 65a:	0b b6       	in	r0, 0x3b	; 59
 65c:	ab bf       	out	0x3b, r26	; 59
 65e:	fc 01       	movw	r30, r24
 660:	20 83       	st	Z, r18
 662:	0b be       	out	0x3b, r0	; 59
		updateTime();
 664:	55 df       	rcall	.-342    	; 0x510 <updateTime>
	}
	seconds = seconds + 1;
 666:	80 91 16 20 	lds	r24, 0x2016
 66a:	90 91 17 20 	lds	r25, 0x2017
 66e:	01 96       	adiw	r24, 0x01	; 1
 670:	80 93 16 20 	sts	0x2016, r24
 674:	90 93 17 20 	sts	0x2017, r25
	TCC1_INTFLAGS = 0x01;							// Reset interrupt flag
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	80 93 4c 08 	sts	0x084C, r24
}
 67e:	ff 91       	pop	r31
 680:	ef 91       	pop	r30
 682:	bf 91       	pop	r27
 684:	af 91       	pop	r26
 686:	9f 91       	pop	r25
 688:	8f 91       	pop	r24
 68a:	7f 91       	pop	r23
 68c:	6f 91       	pop	r22
 68e:	5f 91       	pop	r21
 690:	4f 91       	pop	r20
 692:	3f 91       	pop	r19
 694:	2f 91       	pop	r18
 696:	0f 90       	pop	r0
 698:	0b be       	out	0x3b, r0	; 59
 69a:	0f 90       	pop	r0
 69c:	09 be       	out	0x39, r0	; 57
 69e:	0f 90       	pop	r0
 6a0:	08 be       	out	0x38, r0	; 56
 6a2:	0f 90       	pop	r0
 6a4:	0f be       	out	0x3f, r0	; 63
 6a6:	0f 90       	pop	r0
 6a8:	1f 90       	pop	r1
 6aa:	18 95       	reti

000006ac <__vector_43>:
 * Purpose:  Interrupt subroutine to handle which key is pressed. Triggered on falling
 *			 edge
 * Inputs:
 * Output:
 ************************************************************************************/
ISR(PORTE_INT0_vect){
 6ac:	1f 92       	push	r1
 6ae:	0f 92       	push	r0
 6b0:	0f b6       	in	r0, 0x3f	; 63
 6b2:	0f 92       	push	r0
 6b4:	11 24       	eor	r1, r1
 6b6:	08 b6       	in	r0, 0x38	; 56
 6b8:	0f 92       	push	r0
 6ba:	18 be       	out	0x38, r1	; 56
 6bc:	09 b6       	in	r0, 0x39	; 57
 6be:	0f 92       	push	r0
 6c0:	19 be       	out	0x39, r1	; 57
 6c2:	0a b6       	in	r0, 0x3a	; 58
 6c4:	0f 92       	push	r0
 6c6:	1a be       	out	0x3a, r1	; 58
 6c8:	0b b6       	in	r0, 0x3b	; 59
 6ca:	0f 92       	push	r0
 6cc:	1b be       	out	0x3b, r1	; 59
 6ce:	2f 93       	push	r18
 6d0:	3f 93       	push	r19
 6d2:	4f 93       	push	r20
 6d4:	5f 93       	push	r21
 6d6:	6f 93       	push	r22
 6d8:	7f 93       	push	r23
 6da:	8f 93       	push	r24
 6dc:	9f 93       	push	r25
 6de:	af 93       	push	r26
 6e0:	bf 93       	push	r27
 6e2:	ef 93       	push	r30
 6e4:	ff 93       	push	r31
 6e6:	cf 93       	push	r28
 6e8:	df 93       	push	r29
 6ea:	1f 92       	push	r1
 6ec:	cd b7       	in	r28, 0x3d	; 61
 6ee:	de b7       	in	r29, 0x3e	; 62
	// Due to bouncing, make sure that either one of the pins(4-7) is set to 0
	uint8_t volatile tmp = (PORTE_IN && 0xF0);
 6f0:	90 91 88 06 	lds	r25, 0x0688
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	91 11       	cpse	r25, r1
 6f8:	01 c0       	rjmp	.+2      	; 0x6fc <__vector_43+0x50>
 6fa:	80 e0       	ldi	r24, 0x00	; 0
 6fc:	89 83       	std	Y+1, r24	; 0x01
	if( (tmp == 0x70)||(tmp == 0xB0)||(tmp == 0xD0)||(tmp == 0xE0) ){
 6fe:	89 81       	ldd	r24, Y+1	; 0x01
 700:	80 37       	cpi	r24, 0x70	; 112
 702:	49 f0       	breq	.+18     	; 0x716 <__vector_43+0x6a>
 704:	89 81       	ldd	r24, Y+1	; 0x01
 706:	80 3b       	cpi	r24, 0xB0	; 176
 708:	31 f0       	breq	.+12     	; 0x716 <__vector_43+0x6a>
 70a:	89 81       	ldd	r24, Y+1	; 0x01
 70c:	80 3d       	cpi	r24, 0xD0	; 208
 70e:	19 f0       	breq	.+6      	; 0x716 <__vector_43+0x6a>
 710:	89 81       	ldd	r24, Y+1	; 0x01
 712:	80 3e       	cpi	r24, 0xE0	; 224
 714:	29 f4       	brne	.+10     	; 0x720 <__vector_43+0x74>
		keyPressed = KEY_PRESSED();
 716:	84 de       	rcall	.-760    	; 0x420 <KEY_PRESSED>
 718:	80 93 00 20 	sts	0x2000, r24
 71c:	90 93 01 20 	sts	0x2001, r25
	}
	PORTE_IN = 0xF0;
 720:	80 ef       	ldi	r24, 0xF0	; 240
 722:	80 93 88 06 	sts	0x0688, r24
	PORTE_INTFLAGS = 0x01;						// Reset INT0 interrupt flag
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	80 93 8c 06 	sts	0x068C, r24
}
 72c:	0f 90       	pop	r0
 72e:	df 91       	pop	r29
 730:	cf 91       	pop	r28
 732:	ff 91       	pop	r31
 734:	ef 91       	pop	r30
 736:	bf 91       	pop	r27
 738:	af 91       	pop	r26
 73a:	9f 91       	pop	r25
 73c:	8f 91       	pop	r24
 73e:	7f 91       	pop	r23
 740:	6f 91       	pop	r22
 742:	5f 91       	pop	r21
 744:	4f 91       	pop	r20
 746:	3f 91       	pop	r19
 748:	2f 91       	pop	r18
 74a:	0f 90       	pop	r0
 74c:	0b be       	out	0x3b, r0	; 59
 74e:	0f 90       	pop	r0
 750:	0a be       	out	0x3a, r0	; 58
 752:	0f 90       	pop	r0
 754:	09 be       	out	0x39, r0	; 57
 756:	0f 90       	pop	r0
 758:	08 be       	out	0x38, r0	; 56
 75a:	0f 90       	pop	r0
 75c:	0f be       	out	0x3f, r0	; 63
 75e:	0f 90       	pop	r0
 760:	1f 90       	pop	r1
 762:	18 95       	reti

00000764 <strcat>:
 764:	fb 01       	movw	r30, r22
 766:	dc 01       	movw	r26, r24
 768:	0d 90       	ld	r0, X+
 76a:	00 20       	and	r0, r0
 76c:	e9 f7       	brne	.-6      	; 0x768 <strcat+0x4>
 76e:	11 97       	sbiw	r26, 0x01	; 1
 770:	01 90       	ld	r0, Z+
 772:	0d 92       	st	X+, r0
 774:	00 20       	and	r0, r0
 776:	e1 f7       	brne	.-8      	; 0x770 <strcat+0xc>
 778:	08 95       	ret

0000077a <__itoa_ncheck>:
 77a:	bb 27       	eor	r27, r27
 77c:	4a 30       	cpi	r20, 0x0A	; 10
 77e:	31 f4       	brne	.+12     	; 0x78c <__itoa_ncheck+0x12>
 780:	99 23       	and	r25, r25
 782:	22 f4       	brpl	.+8      	; 0x78c <__itoa_ncheck+0x12>
 784:	bd e2       	ldi	r27, 0x2D	; 45
 786:	90 95       	com	r25
 788:	81 95       	neg	r24
 78a:	9f 4f       	sbci	r25, 0xFF	; 255
 78c:	01 c0       	rjmp	.+2      	; 0x790 <__utoa_common>

0000078e <__utoa_ncheck>:
 78e:	bb 27       	eor	r27, r27

00000790 <__utoa_common>:
 790:	fb 01       	movw	r30, r22
 792:	55 27       	eor	r21, r21
 794:	aa 27       	eor	r26, r26
 796:	88 0f       	add	r24, r24
 798:	99 1f       	adc	r25, r25
 79a:	aa 1f       	adc	r26, r26
 79c:	a4 17       	cp	r26, r20
 79e:	10 f0       	brcs	.+4      	; 0x7a4 <__utoa_common+0x14>
 7a0:	a4 1b       	sub	r26, r20
 7a2:	83 95       	inc	r24
 7a4:	50 51       	subi	r21, 0x10	; 16
 7a6:	b9 f7       	brne	.-18     	; 0x796 <__utoa_common+0x6>
 7a8:	a0 5d       	subi	r26, 0xD0	; 208
 7aa:	aa 33       	cpi	r26, 0x3A	; 58
 7ac:	08 f0       	brcs	.+2      	; 0x7b0 <__utoa_common+0x20>
 7ae:	a9 5d       	subi	r26, 0xD9	; 217
 7b0:	a1 93       	st	Z+, r26
 7b2:	00 97       	sbiw	r24, 0x00	; 0
 7b4:	79 f7       	brne	.-34     	; 0x794 <__utoa_common+0x4>
 7b6:	b1 11       	cpse	r27, r1
 7b8:	b1 93       	st	Z+, r27
 7ba:	11 92       	st	Z+, r1
 7bc:	cb 01       	movw	r24, r22
 7be:	00 c0       	rjmp	.+0      	; 0x7c0 <strrev>

000007c0 <strrev>:
 7c0:	dc 01       	movw	r26, r24
 7c2:	fc 01       	movw	r30, r24
 7c4:	67 2f       	mov	r22, r23
 7c6:	71 91       	ld	r23, Z+
 7c8:	77 23       	and	r23, r23
 7ca:	e1 f7       	brne	.-8      	; 0x7c4 <strrev+0x4>
 7cc:	32 97       	sbiw	r30, 0x02	; 2
 7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <strrev+0x18>
 7d0:	7c 91       	ld	r23, X
 7d2:	6d 93       	st	X+, r22
 7d4:	70 83       	st	Z, r23
 7d6:	62 91       	ld	r22, -Z
 7d8:	ae 17       	cp	r26, r30
 7da:	bf 07       	cpc	r27, r31
 7dc:	c8 f3       	brcs	.-14     	; 0x7d0 <strrev+0x10>
 7de:	08 95       	ret

000007e0 <_exit>:
 7e0:	f8 94       	cli

000007e2 <__stop_program>:
 7e2:	ff cf       	rjmp	.-2      	; 0x7e2 <__stop_program>
