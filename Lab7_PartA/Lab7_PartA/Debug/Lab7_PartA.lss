
Lab7_PartA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00802000  000003ea  0000045e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000046e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  0000049e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000064e  00000000  00000000  000004de  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000017e  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000027f  00000000  00000000  00000caa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000084  00000000  00000000  00000f2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000005f0  00000000  00000000  00000fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000ad  00000000  00000000  000015a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  0000164d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	17 c1       	rjmp	.+558    	; 0x234 <__bad_interrupt>
   6:	00 00       	nop
   8:	15 c1       	rjmp	.+554    	; 0x234 <__bad_interrupt>
   a:	00 00       	nop
   c:	13 c1       	rjmp	.+550    	; 0x234 <__bad_interrupt>
   e:	00 00       	nop
  10:	11 c1       	rjmp	.+546    	; 0x234 <__bad_interrupt>
  12:	00 00       	nop
  14:	0f c1       	rjmp	.+542    	; 0x234 <__bad_interrupt>
  16:	00 00       	nop
  18:	0d c1       	rjmp	.+538    	; 0x234 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	0b c1       	rjmp	.+534    	; 0x234 <__bad_interrupt>
  1e:	00 00       	nop
  20:	09 c1       	rjmp	.+530    	; 0x234 <__bad_interrupt>
  22:	00 00       	nop
  24:	07 c1       	rjmp	.+526    	; 0x234 <__bad_interrupt>
  26:	00 00       	nop
  28:	05 c1       	rjmp	.+522    	; 0x234 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	03 c1       	rjmp	.+518    	; 0x234 <__bad_interrupt>
  2e:	00 00       	nop
  30:	01 c1       	rjmp	.+514    	; 0x234 <__bad_interrupt>
  32:	00 00       	nop
  34:	ff c0       	rjmp	.+510    	; 0x234 <__bad_interrupt>
  36:	00 00       	nop
  38:	fd c0       	rjmp	.+506    	; 0x234 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	fb c0       	rjmp	.+502    	; 0x234 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f9 c0       	rjmp	.+498    	; 0x234 <__bad_interrupt>
  42:	00 00       	nop
  44:	f7 c0       	rjmp	.+494    	; 0x234 <__bad_interrupt>
  46:	00 00       	nop
  48:	f5 c0       	rjmp	.+490    	; 0x234 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f3 c0       	rjmp	.+486    	; 0x234 <__bad_interrupt>
  4e:	00 00       	nop
  50:	f1 c0       	rjmp	.+482    	; 0x234 <__bad_interrupt>
  52:	00 00       	nop
  54:	ef c0       	rjmp	.+478    	; 0x234 <__bad_interrupt>
  56:	00 00       	nop
  58:	ed c0       	rjmp	.+474    	; 0x234 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	eb c0       	rjmp	.+470    	; 0x234 <__bad_interrupt>
  5e:	00 00       	nop
  60:	e9 c0       	rjmp	.+466    	; 0x234 <__bad_interrupt>
  62:	00 00       	nop
  64:	e7 c0       	rjmp	.+462    	; 0x234 <__bad_interrupt>
  66:	00 00       	nop
  68:	e5 c0       	rjmp	.+458    	; 0x234 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e3 c0       	rjmp	.+454    	; 0x234 <__bad_interrupt>
  6e:	00 00       	nop
  70:	e1 c0       	rjmp	.+450    	; 0x234 <__bad_interrupt>
  72:	00 00       	nop
  74:	df c0       	rjmp	.+446    	; 0x234 <__bad_interrupt>
  76:	00 00       	nop
  78:	dd c0       	rjmp	.+442    	; 0x234 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	db c0       	rjmp	.+438    	; 0x234 <__bad_interrupt>
  7e:	00 00       	nop
  80:	d9 c0       	rjmp	.+434    	; 0x234 <__bad_interrupt>
  82:	00 00       	nop
  84:	d7 c0       	rjmp	.+430    	; 0x234 <__bad_interrupt>
  86:	00 00       	nop
  88:	d5 c0       	rjmp	.+426    	; 0x234 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d3 c0       	rjmp	.+422    	; 0x234 <__bad_interrupt>
  8e:	00 00       	nop
  90:	d1 c0       	rjmp	.+418    	; 0x234 <__bad_interrupt>
  92:	00 00       	nop
  94:	cf c0       	rjmp	.+414    	; 0x234 <__bad_interrupt>
  96:	00 00       	nop
  98:	cd c0       	rjmp	.+410    	; 0x234 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	cb c0       	rjmp	.+406    	; 0x234 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c9 c0       	rjmp	.+402    	; 0x234 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	c7 c0       	rjmp	.+398    	; 0x234 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c5 c0       	rjmp	.+394    	; 0x234 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	c3 c0       	rjmp	.+390    	; 0x234 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c1 c0       	rjmp	.+386    	; 0x234 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	bf c0       	rjmp	.+382    	; 0x234 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	bd c0       	rjmp	.+378    	; 0x234 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	bb c0       	rjmp	.+374    	; 0x234 <__bad_interrupt>
  be:	00 00       	nop
  c0:	b9 c0       	rjmp	.+370    	; 0x234 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	b7 c0       	rjmp	.+366    	; 0x234 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b5 c0       	rjmp	.+362    	; 0x234 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b3 c0       	rjmp	.+358    	; 0x234 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b1 c0       	rjmp	.+354    	; 0x234 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	af c0       	rjmp	.+350    	; 0x234 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	ad c0       	rjmp	.+346    	; 0x234 <__bad_interrupt>
  da:	00 00       	nop
  dc:	ab c0       	rjmp	.+342    	; 0x234 <__bad_interrupt>
  de:	00 00       	nop
  e0:	a9 c0       	rjmp	.+338    	; 0x234 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	a7 c0       	rjmp	.+334    	; 0x234 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a5 c0       	rjmp	.+330    	; 0x234 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	a3 c0       	rjmp	.+326    	; 0x234 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a1 c0       	rjmp	.+322    	; 0x234 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	9f c0       	rjmp	.+318    	; 0x234 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	9d c0       	rjmp	.+314    	; 0x234 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	9b c0       	rjmp	.+310    	; 0x234 <__bad_interrupt>
  fe:	00 00       	nop
 100:	99 c0       	rjmp	.+306    	; 0x234 <__bad_interrupt>
 102:	00 00       	nop
 104:	97 c0       	rjmp	.+302    	; 0x234 <__bad_interrupt>
 106:	00 00       	nop
 108:	95 c0       	rjmp	.+298    	; 0x234 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	93 c0       	rjmp	.+294    	; 0x234 <__bad_interrupt>
 10e:	00 00       	nop
 110:	91 c0       	rjmp	.+290    	; 0x234 <__bad_interrupt>
 112:	00 00       	nop
 114:	8f c0       	rjmp	.+286    	; 0x234 <__bad_interrupt>
 116:	00 00       	nop
 118:	8d c0       	rjmp	.+282    	; 0x234 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	8b c0       	rjmp	.+278    	; 0x234 <__bad_interrupt>
 11e:	00 00       	nop
 120:	89 c0       	rjmp	.+274    	; 0x234 <__bad_interrupt>
 122:	00 00       	nop
 124:	87 c0       	rjmp	.+270    	; 0x234 <__bad_interrupt>
 126:	00 00       	nop
 128:	85 c0       	rjmp	.+266    	; 0x234 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	83 c0       	rjmp	.+262    	; 0x234 <__bad_interrupt>
 12e:	00 00       	nop
 130:	81 c0       	rjmp	.+258    	; 0x234 <__bad_interrupt>
 132:	00 00       	nop
 134:	7f c0       	rjmp	.+254    	; 0x234 <__bad_interrupt>
 136:	00 00       	nop
 138:	7d c0       	rjmp	.+250    	; 0x234 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	7b c0       	rjmp	.+246    	; 0x234 <__bad_interrupt>
 13e:	00 00       	nop
 140:	79 c0       	rjmp	.+242    	; 0x234 <__bad_interrupt>
 142:	00 00       	nop
 144:	77 c0       	rjmp	.+238    	; 0x234 <__bad_interrupt>
 146:	00 00       	nop
 148:	75 c0       	rjmp	.+234    	; 0x234 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	73 c0       	rjmp	.+230    	; 0x234 <__bad_interrupt>
 14e:	00 00       	nop
 150:	71 c0       	rjmp	.+226    	; 0x234 <__bad_interrupt>
 152:	00 00       	nop
 154:	6f c0       	rjmp	.+222    	; 0x234 <__bad_interrupt>
 156:	00 00       	nop
 158:	6d c0       	rjmp	.+218    	; 0x234 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	6b c0       	rjmp	.+214    	; 0x234 <__bad_interrupt>
 15e:	00 00       	nop
 160:	69 c0       	rjmp	.+210    	; 0x234 <__bad_interrupt>
 162:	00 00       	nop
 164:	67 c0       	rjmp	.+206    	; 0x234 <__bad_interrupt>
 166:	00 00       	nop
 168:	65 c0       	rjmp	.+202    	; 0x234 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	63 c0       	rjmp	.+198    	; 0x234 <__bad_interrupt>
 16e:	00 00       	nop
 170:	61 c0       	rjmp	.+194    	; 0x234 <__bad_interrupt>
 172:	00 00       	nop
 174:	5f c0       	rjmp	.+190    	; 0x234 <__bad_interrupt>
 176:	00 00       	nop
 178:	5d c0       	rjmp	.+186    	; 0x234 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	5b c0       	rjmp	.+182    	; 0x234 <__bad_interrupt>
 17e:	00 00       	nop
 180:	59 c0       	rjmp	.+178    	; 0x234 <__bad_interrupt>
 182:	00 00       	nop
 184:	57 c0       	rjmp	.+174    	; 0x234 <__bad_interrupt>
 186:	00 00       	nop
 188:	55 c0       	rjmp	.+170    	; 0x234 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	53 c0       	rjmp	.+166    	; 0x234 <__bad_interrupt>
 18e:	00 00       	nop
 190:	51 c0       	rjmp	.+162    	; 0x234 <__bad_interrupt>
 192:	00 00       	nop
 194:	4f c0       	rjmp	.+158    	; 0x234 <__bad_interrupt>
 196:	00 00       	nop
 198:	4d c0       	rjmp	.+154    	; 0x234 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	4b c0       	rjmp	.+150    	; 0x234 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	49 c0       	rjmp	.+146    	; 0x234 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	47 c0       	rjmp	.+142    	; 0x234 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	45 c0       	rjmp	.+138    	; 0x234 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	43 c0       	rjmp	.+134    	; 0x234 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	41 c0       	rjmp	.+130    	; 0x234 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	3f c0       	rjmp	.+126    	; 0x234 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	3d c0       	rjmp	.+122    	; 0x234 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	3b c0       	rjmp	.+118    	; 0x234 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	39 c0       	rjmp	.+114    	; 0x234 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	37 c0       	rjmp	.+110    	; 0x234 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	35 c0       	rjmp	.+106    	; 0x234 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	33 c0       	rjmp	.+102    	; 0x234 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	31 c0       	rjmp	.+98     	; 0x234 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	2f c0       	rjmp	.+94     	; 0x234 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	2d c0       	rjmp	.+90     	; 0x234 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	2b c0       	rjmp	.+86     	; 0x234 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	29 c0       	rjmp	.+82     	; 0x234 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	27 c0       	rjmp	.+78     	; 0x234 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	25 c0       	rjmp	.+74     	; 0x234 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	23 c0       	rjmp	.+70     	; 0x234 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	21 c0       	rjmp	.+66     	; 0x234 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	1f c0       	rjmp	.+62     	; 0x234 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	1d c0       	rjmp	.+58     	; 0x234 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	ea ee       	ldi	r30, 0xEA	; 234
 21c:	f3 e0       	ldi	r31, 0x03	; 3
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a0 31       	cpi	r26, 0x10	; 16
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59
 230:	cc d0       	rcall	.+408    	; 0x3ca <main>
 232:	d9 c0       	rjmp	.+434    	; 0x3e6 <_exit>

00000234 <__bad_interrupt>:
 234:	e5 ce       	rjmp	.-566    	; 0x0 <__vectors>

00000236 <EBI_init>:
 * Inputs:
 * Output:
 ************************************************************************************/
 void EBI_init()
 {
	 PORTH.DIR = 0x37;       // Enable RE, WE, CS0, CS1, ALE1
 236:	e0 ee       	ldi	r30, 0xE0	; 224
 238:	f6 e0       	ldi	r31, 0x06	; 6
 23a:	87 e3       	ldi	r24, 0x37	; 55
 23c:	80 83       	st	Z, r24
	 PORTH.OUT = 0x33;		// Defaults: RE=H, WE=H, CS0=H, CS1=H, ALE1=0
 23e:	83 e3       	ldi	r24, 0x33	; 51
 240:	84 83       	std	Z+4, r24	; 0x04
	 PORTK.DIR = 0xFF;       // Enable Address 7:0 (outputs)
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	80 93 20 07 	sts	0x0720, r24
	 EBI.CTRL = EBI_SRMODE_ALE1_gc | EBI_IFMODE_3PORT_gc;            // ALE1 multiplexing, 3 port configuration
 248:	e0 e4       	ldi	r30, 0x40	; 64
 24a:	f4 e0       	ldi	r31, 0x04	; 4
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	80 83       	st	Z, r24

	 EBI.CS0.BASEADDRH = (uint8_t) (CS0_Start>>16) & 0xFF;
 250:	13 8a       	std	Z+19, r1	; 0x13
	 EBI.CS0.BASEADDRL = (uint8_t) (CS0_Start>>8) & 0xFF;            // Set CS0 range to 0x008000 - 0x009FFF
 252:	80 e8       	ldi	r24, 0x80	; 128
 254:	82 8b       	std	Z+18, r24	; 0x12
	 EBI.CS0.CTRLA = EBI_CS_MODE_SRAM_gc | EBI_CS_ASPACE_8KB_gc;	    // SRAM mode, 8k address space
 256:	85 e1       	ldi	r24, 0x15	; 21
 258:	80 8b       	std	Z+16, r24	; 0x10

	 // BASEADDR is 16 bit (word) register. C interface allows you to set low and high parts with 1
	 // instruction instead of the previous two
	 EBI.CS1.BASEADDR = (uint16_t) (CS1_Start>>8) & 0xFFFF;          // Set CS1 range to 0x370000 - 0x37FFFF
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	97 e4       	ldi	r25, 0x47	; 71
 25e:	86 8b       	std	Z+22, r24	; 0x16
 260:	97 8b       	std	Z+23, r25	; 0x17
	 EBI.CS1.CTRLA = EBI_CS_MODE_SRAM_gc | EBI_CS_ASPACE_64KB_gc;	// SRAM mode, 64k address space
 262:	81 e2       	ldi	r24, 0x21	; 33
 264:	84 8b       	std	Z+20, r24	; 0x14
 266:	08 95       	ret

00000268 <KEYPAD_init>:
 * Name:     KEYPAD_INIT
 * Purpose:  Function to initialize PORT E for the keypad
 * Inputs:
 * Output:
 ************************************************************************************/
 void KEYPAD_init() {
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	1f 92       	push	r1
 26e:	cd b7       	in	r28, 0x3d	; 61
 270:	de b7       	in	r29, 0x3e	; 62
	 PORTE.DIR = 0x0F;						// Set least significant nibble as output and most sig as input
 272:	8f e0       	ldi	r24, 0x0F	; 15
 274:	80 93 80 06 	sts	0x0680, r24
	 // Pull up resistors
	 uint8_t volatile a = 0b00011000;
 278:	88 e1       	ldi	r24, 0x18	; 24
 27a:	89 83       	std	Y+1, r24	; 0x01
	 PORTE_PIN7CTRL = a;
 27c:	89 81       	ldd	r24, Y+1	; 0x01
 27e:	80 93 97 06 	sts	0x0697, r24
	 PORTE_PIN6CTRL = a;
 282:	89 81       	ldd	r24, Y+1	; 0x01
 284:	80 93 96 06 	sts	0x0696, r24
	 PORTE_PIN5CTRL = a;
 288:	89 81       	ldd	r24, Y+1	; 0x01
 28a:	80 93 95 06 	sts	0x0695, r24
	 PORTE_PIN4CTRL = a;
 28e:	89 81       	ldd	r24, Y+1	; 0x01
 290:	80 93 94 06 	sts	0x0694, r24
 }
 294:	0f 90       	pop	r0
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	08 95       	ret

0000029c <TC_init>:
 *			 as output
 * Inputs:
 * Output:
 ************************************************************************************/
void TC_init() {
	PORTF_DIR = 0xFF;						// Set all port F pins as output
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	80 93 a0 06 	sts	0x06A0, r24
	PORTF_OUT = 0xFF;						// Output 0 to all pins in PORTF
 2a2:	80 93 a4 06 	sts	0x06A4, r24
	
	// Configure Type 0 counter on Port F
	TCF0_CTRLA = 0x01;						// Set Prescaler OFF; N = 1
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	80 93 00 0b 	sts	0x0B00, r24
	TCF0_CTRLB = 0x11;						// Set CCA on F0, set mode to FRQ
 2ac:	81 e1       	ldi	r24, 0x11	; 17
 2ae:	80 93 01 0b 	sts	0x0B01, r24
	TCF0_CTRLC = 0x00;						// To set compare register if diff. compare value used (UNUSED)
 2b2:	10 92 02 0b 	sts	0x0B02, r1
	TCF0_CTRLD = 0xA0;						// No capture is being performed for this lab
 2b6:	80 ea       	ldi	r24, 0xA0	; 160
 2b8:	80 93 03 0b 	sts	0x0B03, r24
	TCF0_CTRLE = 0x00;						// Set timer/counter to normal mode
 2bc:	10 92 04 0b 	sts	0x0B04, r1
	
	TCF0_CCA = 575;							// Set CCA to 567 assuming that prescaler 1 is being used
 2c0:	8f e3       	ldi	r24, 0x3F	; 63
 2c2:	92 e0       	ldi	r25, 0x02	; 2
 2c4:	80 93 28 0b 	sts	0x0B28, r24
 2c8:	90 93 29 0b 	sts	0x0B29, r25
	TCF0_CNT = 0x0000;						// Set counter to 0
 2cc:	10 92 20 0b 	sts	0x0B20, r1
 2d0:	10 92 21 0b 	sts	0x0B21, r1
	TCF0_CTRLFCLR = 0x00;					// Set counter to imcrementing
 2d4:	10 92 08 0b 	sts	0x0B08, r1
 2d8:	08 95       	ret

000002da <SCAN_KEYPAD>:
 * Name:     SCAN_KEYPAD()
 * Purpose:  Function determines which key in a keypad was pressed
 * Inputs:	 int
 * Output:
 ************************************************************************************/
 int SCAN_KEYPAD() {
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	cd b7       	in	r28, 0x3d	; 61
 2e0:	de b7       	in	r29, 0x3e	; 62
 2e2:	67 97       	sbiw	r28, 0x17	; 23
 2e4:	cd bf       	out	0x3d, r28	; 61
 2e6:	de bf       	out	0x3e, r29	; 62
	 uint8_t volatile keys[16] = {1,4,7,14,2,5,8,0,3,6,9,15,10,11,12,13};
 2e8:	80 e1       	ldi	r24, 0x10	; 16
 2ea:	e0 e0       	ldi	r30, 0x00	; 0
 2ec:	f0 e2       	ldi	r31, 0x20	; 32
 2ee:	de 01       	movw	r26, r28
 2f0:	11 96       	adiw	r26, 0x01	; 1
 2f2:	01 90       	ld	r0, Z+
 2f4:	0d 92       	st	X+, r0
 2f6:	8a 95       	dec	r24
 2f8:	e1 f7       	brne	.-8      	; 0x2f2 <SCAN_KEYPAD+0x18>
	 uint8_t volatile out[4] = {7,11,13,14};
 2fa:	87 e0       	ldi	r24, 0x07	; 7
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	a0 e0       	ldi	r26, 0x00	; 0
 300:	b0 e0       	ldi	r27, 0x00	; 0
 302:	9b e0       	ldi	r25, 0x0B	; 11
 304:	ad e0       	ldi	r26, 0x0D	; 13
 306:	be e0       	ldi	r27, 0x0E	; 14
 308:	89 8b       	std	Y+17, r24	; 0x11
 30a:	9a 8b       	std	Y+18, r25	; 0x12
 30c:	ab 8b       	std	Y+19, r26	; 0x13
 30e:	bc 8b       	std	Y+20, r27	; 0x14
	 
	 uint8_t volatile i;
	 for (i = 0; i != 4; ++i) {
 310:	1d 8a       	std	Y+21, r1	; 0x15
 312:	8d 89       	ldd	r24, Y+21	; 0x15
 314:	84 30       	cpi	r24, 0x04	; 4
 316:	09 f4       	brne	.+2      	; 0x31a <SCAN_KEYPAD+0x40>
 318:	4d c0       	rjmp	.+154    	; 0x3b4 <SCAN_KEYPAD+0xda>
		 PORTE.OUT = out[i];
 31a:	a0 e8       	ldi	r26, 0x80	; 128
 31c:	b6 e0       	ldi	r27, 0x06	; 6
 31e:	8d 89       	ldd	r24, Y+21	; 0x15
 320:	e1 e1       	ldi	r30, 0x11	; 17
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	ec 0f       	add	r30, r28
 326:	fd 1f       	adc	r31, r29
 328:	e8 0f       	add	r30, r24
 32a:	f1 1d       	adc	r31, r1
 32c:	80 81       	ld	r24, Z
 32e:	14 96       	adiw	r26, 0x04	; 4
 330:	8c 93       	st	X, r24
 332:	14 97       	sbiw	r26, 0x04	; 4
		 uint8_t volatile tmp = PORTE.IN >> 4;
 334:	18 96       	adiw	r26, 0x08	; 8
 336:	8c 91       	ld	r24, X
 338:	18 97       	sbiw	r26, 0x08	; 8
 33a:	82 95       	swap	r24
 33c:	8f 70       	andi	r24, 0x0F	; 15
 33e:	8f 8b       	std	Y+23, r24	; 0x17
		 
		 uint8_t volatile j;
		 for(j = 0; j!=4; ++j) {
 340:	1e 8a       	std	Y+22, r1	; 0x16
 342:	8e 89       	ldd	r24, Y+22	; 0x16
 344:	84 30       	cpi	r24, 0x04	; 4
 346:	71 f1       	breq	.+92     	; 0x3a4 <SCAN_KEYPAD+0xca>
			 if(tmp == out[j]) {
 348:	8e 89       	ldd	r24, Y+22	; 0x16
 34a:	e1 e1       	ldi	r30, 0x11	; 17
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	ec 0f       	add	r30, r28
 350:	fd 1f       	adc	r31, r29
 352:	e8 0f       	add	r30, r24
 354:	f1 1d       	adc	r31, r1
 356:	90 81       	ld	r25, Z
 358:	8f 89       	ldd	r24, Y+23	; 0x17
 35a:	98 13       	cpse	r25, r24
 35c:	1d c0       	rjmp	.+58     	; 0x398 <SCAN_KEYPAD+0xbe>
 35e:	0b c0       	rjmp	.+22     	; 0x376 <SCAN_KEYPAD+0x9c>
 360:	8e 89       	ldd	r24, Y+22	; 0x16
 362:	e1 e1       	ldi	r30, 0x11	; 17
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	ec 0f       	add	r30, r28
 368:	fd 1f       	adc	r31, r29
 36a:	e8 0f       	add	r30, r24
 36c:	f1 1d       	adc	r31, r1
 36e:	90 81       	ld	r25, Z
 370:	8f 89       	ldd	r24, Y+23	; 0x17
 372:	98 13       	cpse	r25, r24
 374:	11 c0       	rjmp	.+34     	; 0x398 <SCAN_KEYPAD+0xbe>
				 return keys[4*i+j];
 376:	8d 89       	ldd	r24, Y+21	; 0x15
 378:	ee 89       	ldd	r30, Y+22	; 0x16
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	94 e0       	ldi	r25, 0x04	; 4
 37e:	89 9f       	mul	r24, r25
 380:	e0 0d       	add	r30, r0
 382:	f1 1d       	adc	r31, r1
 384:	11 24       	eor	r1, r1
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	8c 0f       	add	r24, r28
 38c:	9d 1f       	adc	r25, r29
 38e:	e8 0f       	add	r30, r24
 390:	f9 1f       	adc	r31, r25
 392:	80 81       	ld	r24, Z
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	13 c0       	rjmp	.+38     	; 0x3be <SCAN_KEYPAD+0xe4>
	 for (i = 0; i != 4; ++i) {
		 PORTE.OUT = out[i];
		 uint8_t volatile tmp = PORTE.IN >> 4;
		 
		 uint8_t volatile j;
		 for(j = 0; j!=4; ++j) {
 398:	8e 89       	ldd	r24, Y+22	; 0x16
 39a:	8f 5f       	subi	r24, 0xFF	; 255
 39c:	8e 8b       	std	Y+22, r24	; 0x16
 39e:	8e 89       	ldd	r24, Y+22	; 0x16
 3a0:	84 30       	cpi	r24, 0x04	; 4
 3a2:	f1 f6       	brne	.-68     	; 0x360 <SCAN_KEYPAD+0x86>
 int SCAN_KEYPAD() {
	 uint8_t volatile keys[16] = {1,4,7,14,2,5,8,0,3,6,9,15,10,11,12,13};
	 uint8_t volatile out[4] = {7,11,13,14};
	 
	 uint8_t volatile i;
	 for (i = 0; i != 4; ++i) {
 3a4:	8d 89       	ldd	r24, Y+21	; 0x15
 3a6:	8f 5f       	subi	r24, 0xFF	; 255
 3a8:	8d 8b       	std	Y+21, r24	; 0x15
 3aa:	8d 89       	ldd	r24, Y+21	; 0x15
 3ac:	84 30       	cpi	r24, 0x04	; 4
 3ae:	09 f0       	breq	.+2      	; 0x3b2 <SCAN_KEYPAD+0xd8>
 3b0:	b6 cf       	rjmp	.-148    	; 0x31e <SCAN_KEYPAD+0x44>
 3b2:	03 c0       	rjmp	.+6      	; 0x3ba <SCAN_KEYPAD+0xe0>
			 if(tmp == out[j]) {
				 return keys[4*i+j];
			 }
		 }
	 }
	 return -1;
 3b4:	8f ef       	ldi	r24, 0xFF	; 255
 3b6:	9f ef       	ldi	r25, 0xFF	; 255
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <SCAN_KEYPAD+0xe4>
 3ba:	8f ef       	ldi	r24, 0xFF	; 255
 3bc:	9f ef       	ldi	r25, 0xFF	; 255
 }
 3be:	67 96       	adiw	r28, 0x17	; 23
 3c0:	cd bf       	out	0x3d, r28	; 61
 3c2:	de bf       	out	0x3e, r29	; 62
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

000003ca <main>:


int main(void) {
	
	// Initialize all the necessary components
	EBI_init();
 3ca:	35 df       	rcall	.-406    	; 0x236 <EBI_init>
	KEYPAD_init();
 3cc:	4d df       	rcall	.-358    	; 0x268 <KEYPAD_init>
	TC_init();
 3ce:	66 df       	rcall	.-308    	; 0x29c <TC_init>
		// if 1 is pressed, output note A6
        if(SCAN_KEYPAD() == 1) {
			TCF0_CTRLB = 0x11;
		}
		else {
			TCF0_CTRLB = 0x01;
 3d0:	c1 e0       	ldi	r28, 0x01	; 1
 3d2:	db e0       	ldi	r29, 0x0B	; 11
 3d4:	11 e0       	ldi	r17, 0x01	; 1
	KEYPAD_init();
	TC_init();
    while(1) {
		// if 1 is pressed, output note A6
        if(SCAN_KEYPAD() == 1) {
			TCF0_CTRLB = 0x11;
 3d6:	01 e1       	ldi	r16, 0x11	; 17
	EBI_init();
	KEYPAD_init();
	TC_init();
    while(1) {
		// if 1 is pressed, output note A6
        if(SCAN_KEYPAD() == 1) {
 3d8:	80 df       	rcall	.-256    	; 0x2da <SCAN_KEYPAD>
 3da:	01 97       	sbiw	r24, 0x01	; 1
 3dc:	11 f4       	brne	.+4      	; 0x3e2 <main+0x18>
			TCF0_CTRLB = 0x11;
 3de:	08 83       	st	Y, r16
 3e0:	fb cf       	rjmp	.-10     	; 0x3d8 <main+0xe>
		}
		else {
			TCF0_CTRLB = 0x01;
 3e2:	18 83       	st	Y, r17
 3e4:	f9 cf       	rjmp	.-14     	; 0x3d8 <main+0xe>

000003e6 <_exit>:
 3e6:	f8 94       	cli

000003e8 <__stop_program>:
 3e8:	ff cf       	rjmp	.-2      	; 0x3e8 <__stop_program>
