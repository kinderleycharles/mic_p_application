
Lab6_lcd_name.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000368  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00802000  00000368  000003dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003ee  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000048  00000000  00000000  0000041e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000741  00000000  00000000  00000466  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001af  00000000  00000000  00000ba7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000260  00000000  00000000  00000d56  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b4  00000000  00000000  00000fb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000060a  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000184  00000000  00000000  00001676  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000068  00000000  00000000  000017fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	17 c1       	rjmp	.+558    	; 0x234 <__bad_interrupt>
   6:	00 00       	nop
   8:	15 c1       	rjmp	.+554    	; 0x234 <__bad_interrupt>
   a:	00 00       	nop
   c:	13 c1       	rjmp	.+550    	; 0x234 <__bad_interrupt>
   e:	00 00       	nop
  10:	11 c1       	rjmp	.+546    	; 0x234 <__bad_interrupt>
  12:	00 00       	nop
  14:	0f c1       	rjmp	.+542    	; 0x234 <__bad_interrupt>
  16:	00 00       	nop
  18:	0d c1       	rjmp	.+538    	; 0x234 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	0b c1       	rjmp	.+534    	; 0x234 <__bad_interrupt>
  1e:	00 00       	nop
  20:	09 c1       	rjmp	.+530    	; 0x234 <__bad_interrupt>
  22:	00 00       	nop
  24:	07 c1       	rjmp	.+526    	; 0x234 <__bad_interrupt>
  26:	00 00       	nop
  28:	05 c1       	rjmp	.+522    	; 0x234 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	03 c1       	rjmp	.+518    	; 0x234 <__bad_interrupt>
  2e:	00 00       	nop
  30:	01 c1       	rjmp	.+514    	; 0x234 <__bad_interrupt>
  32:	00 00       	nop
  34:	ff c0       	rjmp	.+510    	; 0x234 <__bad_interrupt>
  36:	00 00       	nop
  38:	fd c0       	rjmp	.+506    	; 0x234 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	fb c0       	rjmp	.+502    	; 0x234 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f9 c0       	rjmp	.+498    	; 0x234 <__bad_interrupt>
  42:	00 00       	nop
  44:	f7 c0       	rjmp	.+494    	; 0x234 <__bad_interrupt>
  46:	00 00       	nop
  48:	f5 c0       	rjmp	.+490    	; 0x234 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f3 c0       	rjmp	.+486    	; 0x234 <__bad_interrupt>
  4e:	00 00       	nop
  50:	f1 c0       	rjmp	.+482    	; 0x234 <__bad_interrupt>
  52:	00 00       	nop
  54:	ef c0       	rjmp	.+478    	; 0x234 <__bad_interrupt>
  56:	00 00       	nop
  58:	ed c0       	rjmp	.+474    	; 0x234 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	eb c0       	rjmp	.+470    	; 0x234 <__bad_interrupt>
  5e:	00 00       	nop
  60:	e9 c0       	rjmp	.+466    	; 0x234 <__bad_interrupt>
  62:	00 00       	nop
  64:	e7 c0       	rjmp	.+462    	; 0x234 <__bad_interrupt>
  66:	00 00       	nop
  68:	e5 c0       	rjmp	.+458    	; 0x234 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e3 c0       	rjmp	.+454    	; 0x234 <__bad_interrupt>
  6e:	00 00       	nop
  70:	e1 c0       	rjmp	.+450    	; 0x234 <__bad_interrupt>
  72:	00 00       	nop
  74:	df c0       	rjmp	.+446    	; 0x234 <__bad_interrupt>
  76:	00 00       	nop
  78:	dd c0       	rjmp	.+442    	; 0x234 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	db c0       	rjmp	.+438    	; 0x234 <__bad_interrupt>
  7e:	00 00       	nop
  80:	d9 c0       	rjmp	.+434    	; 0x234 <__bad_interrupt>
  82:	00 00       	nop
  84:	d7 c0       	rjmp	.+430    	; 0x234 <__bad_interrupt>
  86:	00 00       	nop
  88:	d5 c0       	rjmp	.+426    	; 0x234 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d3 c0       	rjmp	.+422    	; 0x234 <__bad_interrupt>
  8e:	00 00       	nop
  90:	d1 c0       	rjmp	.+418    	; 0x234 <__bad_interrupt>
  92:	00 00       	nop
  94:	cf c0       	rjmp	.+414    	; 0x234 <__bad_interrupt>
  96:	00 00       	nop
  98:	cd c0       	rjmp	.+410    	; 0x234 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	cb c0       	rjmp	.+406    	; 0x234 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c9 c0       	rjmp	.+402    	; 0x234 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	c7 c0       	rjmp	.+398    	; 0x234 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c5 c0       	rjmp	.+394    	; 0x234 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	c3 c0       	rjmp	.+390    	; 0x234 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c1 c0       	rjmp	.+386    	; 0x234 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	bf c0       	rjmp	.+382    	; 0x234 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	bd c0       	rjmp	.+378    	; 0x234 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	bb c0       	rjmp	.+374    	; 0x234 <__bad_interrupt>
  be:	00 00       	nop
  c0:	b9 c0       	rjmp	.+370    	; 0x234 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	b7 c0       	rjmp	.+366    	; 0x234 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b5 c0       	rjmp	.+362    	; 0x234 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b3 c0       	rjmp	.+358    	; 0x234 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b1 c0       	rjmp	.+354    	; 0x234 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	af c0       	rjmp	.+350    	; 0x234 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	ad c0       	rjmp	.+346    	; 0x234 <__bad_interrupt>
  da:	00 00       	nop
  dc:	ab c0       	rjmp	.+342    	; 0x234 <__bad_interrupt>
  de:	00 00       	nop
  e0:	a9 c0       	rjmp	.+338    	; 0x234 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	a7 c0       	rjmp	.+334    	; 0x234 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a5 c0       	rjmp	.+330    	; 0x234 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	a3 c0       	rjmp	.+326    	; 0x234 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a1 c0       	rjmp	.+322    	; 0x234 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	9f c0       	rjmp	.+318    	; 0x234 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	9d c0       	rjmp	.+314    	; 0x234 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	9b c0       	rjmp	.+310    	; 0x234 <__bad_interrupt>
  fe:	00 00       	nop
 100:	99 c0       	rjmp	.+306    	; 0x234 <__bad_interrupt>
 102:	00 00       	nop
 104:	97 c0       	rjmp	.+302    	; 0x234 <__bad_interrupt>
 106:	00 00       	nop
 108:	95 c0       	rjmp	.+298    	; 0x234 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	93 c0       	rjmp	.+294    	; 0x234 <__bad_interrupt>
 10e:	00 00       	nop
 110:	91 c0       	rjmp	.+290    	; 0x234 <__bad_interrupt>
 112:	00 00       	nop
 114:	8f c0       	rjmp	.+286    	; 0x234 <__bad_interrupt>
 116:	00 00       	nop
 118:	8d c0       	rjmp	.+282    	; 0x234 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	8b c0       	rjmp	.+278    	; 0x234 <__bad_interrupt>
 11e:	00 00       	nop
 120:	89 c0       	rjmp	.+274    	; 0x234 <__bad_interrupt>
 122:	00 00       	nop
 124:	87 c0       	rjmp	.+270    	; 0x234 <__bad_interrupt>
 126:	00 00       	nop
 128:	85 c0       	rjmp	.+266    	; 0x234 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	83 c0       	rjmp	.+262    	; 0x234 <__bad_interrupt>
 12e:	00 00       	nop
 130:	81 c0       	rjmp	.+258    	; 0x234 <__bad_interrupt>
 132:	00 00       	nop
 134:	7f c0       	rjmp	.+254    	; 0x234 <__bad_interrupt>
 136:	00 00       	nop
 138:	7d c0       	rjmp	.+250    	; 0x234 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	7b c0       	rjmp	.+246    	; 0x234 <__bad_interrupt>
 13e:	00 00       	nop
 140:	79 c0       	rjmp	.+242    	; 0x234 <__bad_interrupt>
 142:	00 00       	nop
 144:	77 c0       	rjmp	.+238    	; 0x234 <__bad_interrupt>
 146:	00 00       	nop
 148:	75 c0       	rjmp	.+234    	; 0x234 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	73 c0       	rjmp	.+230    	; 0x234 <__bad_interrupt>
 14e:	00 00       	nop
 150:	71 c0       	rjmp	.+226    	; 0x234 <__bad_interrupt>
 152:	00 00       	nop
 154:	6f c0       	rjmp	.+222    	; 0x234 <__bad_interrupt>
 156:	00 00       	nop
 158:	6d c0       	rjmp	.+218    	; 0x234 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	6b c0       	rjmp	.+214    	; 0x234 <__bad_interrupt>
 15e:	00 00       	nop
 160:	69 c0       	rjmp	.+210    	; 0x234 <__bad_interrupt>
 162:	00 00       	nop
 164:	67 c0       	rjmp	.+206    	; 0x234 <__bad_interrupt>
 166:	00 00       	nop
 168:	65 c0       	rjmp	.+202    	; 0x234 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	63 c0       	rjmp	.+198    	; 0x234 <__bad_interrupt>
 16e:	00 00       	nop
 170:	61 c0       	rjmp	.+194    	; 0x234 <__bad_interrupt>
 172:	00 00       	nop
 174:	5f c0       	rjmp	.+190    	; 0x234 <__bad_interrupt>
 176:	00 00       	nop
 178:	5d c0       	rjmp	.+186    	; 0x234 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	5b c0       	rjmp	.+182    	; 0x234 <__bad_interrupt>
 17e:	00 00       	nop
 180:	59 c0       	rjmp	.+178    	; 0x234 <__bad_interrupt>
 182:	00 00       	nop
 184:	57 c0       	rjmp	.+174    	; 0x234 <__bad_interrupt>
 186:	00 00       	nop
 188:	55 c0       	rjmp	.+170    	; 0x234 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	53 c0       	rjmp	.+166    	; 0x234 <__bad_interrupt>
 18e:	00 00       	nop
 190:	51 c0       	rjmp	.+162    	; 0x234 <__bad_interrupt>
 192:	00 00       	nop
 194:	4f c0       	rjmp	.+158    	; 0x234 <__bad_interrupt>
 196:	00 00       	nop
 198:	4d c0       	rjmp	.+154    	; 0x234 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	4b c0       	rjmp	.+150    	; 0x234 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	49 c0       	rjmp	.+146    	; 0x234 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	47 c0       	rjmp	.+142    	; 0x234 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	45 c0       	rjmp	.+138    	; 0x234 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	43 c0       	rjmp	.+134    	; 0x234 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	41 c0       	rjmp	.+130    	; 0x234 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	3f c0       	rjmp	.+126    	; 0x234 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	3d c0       	rjmp	.+122    	; 0x234 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	3b c0       	rjmp	.+118    	; 0x234 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	39 c0       	rjmp	.+114    	; 0x234 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	37 c0       	rjmp	.+110    	; 0x234 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	35 c0       	rjmp	.+106    	; 0x234 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	33 c0       	rjmp	.+102    	; 0x234 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	31 c0       	rjmp	.+98     	; 0x234 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	2f c0       	rjmp	.+94     	; 0x234 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	2d c0       	rjmp	.+90     	; 0x234 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	2b c0       	rjmp	.+86     	; 0x234 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	29 c0       	rjmp	.+82     	; 0x234 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	27 c0       	rjmp	.+78     	; 0x234 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	25 c0       	rjmp	.+74     	; 0x234 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	23 c0       	rjmp	.+70     	; 0x234 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	21 c0       	rjmp	.+66     	; 0x234 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	1f c0       	rjmp	.+62     	; 0x234 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	1d c0       	rjmp	.+58     	; 0x234 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	e8 e6       	ldi	r30, 0x68	; 104
 21c:	f3 e0       	ldi	r31, 0x03	; 3
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a2 31       	cpi	r26, 0x12	; 18
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59
 230:	91 d0       	rcall	.+290    	; 0x354 <main>
 232:	98 c0       	rjmp	.+304    	; 0x364 <_exit>

00000234 <__bad_interrupt>:
 234:	e5 ce       	rjmp	.-566    	; 0x0 <__vectors>

00000236 <Wait>:
* Output:
************************************************************************************/
void sendChar(char a) {
	Wait();
	__far_mem_write(LCD_DATA, a);
}
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	90 e1       	ldi	r25, 0x10	; 16
 23a:	a7 e4       	ldi	r26, 0x47	; 71
 23c:	b0 e0       	ldi	r27, 0x00	; 0
 23e:	0b b6       	in	r0, 0x3b	; 59
 240:	ab bf       	out	0x3b, r26	; 59
 242:	fc 01       	movw	r30, r24
 244:	20 81       	ld	r18, Z
 246:	0b be       	out	0x3b, r0	; 59
 248:	22 23       	and	r18, r18
 24a:	cc f3       	brlt	.-14     	; 0x23e <Wait+0x8>
 24c:	08 95       	ret

0000024e <sendStr>:
* Name:     senStr
* Purpose:  Function to display a C-string on an LCD.
* Inputs:	char* a
* Output:
************************************************************************************/
void sendStr(char* str) {
 24e:	8f 92       	push	r8
 250:	9f 92       	push	r9
 252:	af 92       	push	r10
 254:	bf 92       	push	r11
 256:	cf 92       	push	r12
 258:	df 92       	push	r13
 25a:	ef 92       	push	r14
 25c:	ff 92       	push	r15
 25e:	1f 93       	push	r17
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	ec 01       	movw	r28, r24
		if(*str == 10) {
			__far_mem_write(LCD_CMD, 0xC0);		// Move to new line in LCD
			str++;
		}
		else {
			__far_mem_write(LCD_DATA, *str);	// Print character to LCD
 266:	0f 2e       	mov	r0, r31
 268:	cc 24       	eor	r12, r12
 26a:	c3 94       	inc	r12
 26c:	f0 e1       	ldi	r31, 0x10	; 16
 26e:	df 2e       	mov	r13, r31
 270:	f7 e4       	ldi	r31, 0x47	; 71
 272:	ef 2e       	mov	r14, r31
 274:	f1 2c       	mov	r15, r1
 276:	f0 2d       	mov	r31, r0
************************************************************************************/
void sendStr(char* str) {
	while(*str != 0) {
		Wait();
		if(*str == 10) {
			__far_mem_write(LCD_CMD, 0xC0);		// Move to new line in LCD
 278:	0f 2e       	mov	r0, r31
 27a:	81 2c       	mov	r8, r1
 27c:	f0 e1       	ldi	r31, 0x10	; 16
 27e:	9f 2e       	mov	r9, r31
 280:	f7 e4       	ldi	r31, 0x47	; 71
 282:	af 2e       	mov	r10, r31
 284:	b1 2c       	mov	r11, r1
 286:	f0 2d       	mov	r31, r0
 288:	10 ec       	ldi	r17, 0xC0	; 192
* Purpose:  Function to display a C-string on an LCD.
* Inputs:	char* a
* Output:
************************************************************************************/
void sendStr(char* str) {
	while(*str != 0) {
 28a:	0f c0       	rjmp	.+30     	; 0x2aa <sendStr+0x5c>
		Wait();
 28c:	d4 df       	rcall	.-88     	; 0x236 <Wait>
		if(*str == 10) {
 28e:	89 91       	ld	r24, Y+
 290:	8a 30       	cpi	r24, 0x0A	; 10
 292:	31 f4       	brne	.+12     	; 0x2a0 <sendStr+0x52>
			__far_mem_write(LCD_CMD, 0xC0);		// Move to new line in LCD
 294:	0b b6       	in	r0, 0x3b	; 59
 296:	ab be       	out	0x3b, r10	; 59
 298:	f4 01       	movw	r30, r8
 29a:	10 83       	st	Z, r17
 29c:	0b be       	out	0x3b, r0	; 59
 29e:	05 c0       	rjmp	.+10     	; 0x2aa <sendStr+0x5c>
			str++;
		}
		else {
			__far_mem_write(LCD_DATA, *str);	// Print character to LCD
 2a0:	0b b6       	in	r0, 0x3b	; 59
 2a2:	eb be       	out	0x3b, r14	; 59
 2a4:	f6 01       	movw	r30, r12
 2a6:	80 83       	st	Z, r24
 2a8:	0b be       	out	0x3b, r0	; 59
* Purpose:  Function to display a C-string on an LCD.
* Inputs:	char* a
* Output:
************************************************************************************/
void sendStr(char* str) {
	while(*str != 0) {
 2aa:	88 81       	ld	r24, Y
 2ac:	81 11       	cpse	r24, r1
 2ae:	ee cf       	rjmp	.-36     	; 0x28c <sendStr+0x3e>
		else {
			__far_mem_write(LCD_DATA, *str);	// Print character to LCD
			str++;								// Point to next character in string
		}
	}
}
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	1f 91       	pop	r17
 2b6:	ff 90       	pop	r15
 2b8:	ef 90       	pop	r14
 2ba:	df 90       	pop	r13
 2bc:	cf 90       	pop	r12
 2be:	bf 90       	pop	r11
 2c0:	af 90       	pop	r10
 2c2:	9f 90       	pop	r9
 2c4:	8f 90       	pop	r8
 2c6:	08 95       	ret

000002c8 <LCD_init>:


void LCD_init() {
	Wait();
 2c8:	b6 df       	rcall	.-148    	; 0x236 <Wait>
	__far_mem_write(LCD_CMD, 0x38);	// Enable 2 line mode (See LCD Manual)
 2ca:	28 e3       	ldi	r18, 0x38	; 56
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	90 e1       	ldi	r25, 0x10	; 16
 2d0:	a7 e4       	ldi	r26, 0x47	; 71
 2d2:	b0 e0       	ldi	r27, 0x00	; 0
 2d4:	0b b6       	in	r0, 0x3b	; 59
 2d6:	ab bf       	out	0x3b, r26	; 59
 2d8:	fc 01       	movw	r30, r24
 2da:	20 83       	st	Z, r18
 2dc:	0b be       	out	0x3b, r0	; 59
	Wait();
 2de:	ab df       	rcall	.-170    	; 0x236 <Wait>
	__far_mem_write(LCD_CMD,0x0F);	// Display cursor blink	
 2e0:	2f e0       	ldi	r18, 0x0F	; 15
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	90 e1       	ldi	r25, 0x10	; 16
 2e6:	a7 e4       	ldi	r26, 0x47	; 71
 2e8:	b0 e0       	ldi	r27, 0x00	; 0
 2ea:	0b b6       	in	r0, 0x3b	; 59
 2ec:	ab bf       	out	0x3b, r26	; 59
 2ee:	fc 01       	movw	r30, r24
 2f0:	20 83       	st	Z, r18
 2f2:	0b be       	out	0x3b, r0	; 59
	Wait();
 2f4:	a0 df       	rcall	.-192    	; 0x236 <Wait>
	__far_mem_write(LCD_CMD,0x01);	// Clear Home
 2f6:	21 e0       	ldi	r18, 0x01	; 1
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	90 e1       	ldi	r25, 0x10	; 16
 2fc:	a7 e4       	ldi	r26, 0x47	; 71
 2fe:	b0 e0       	ldi	r27, 0x00	; 0
 300:	0b b6       	in	r0, 0x3b	; 59
 302:	ab bf       	out	0x3b, r26	; 59
 304:	fc 01       	movw	r30, r24
 306:	20 83       	st	Z, r18
 308:	0b be       	out	0x3b, r0	; 59
	Wait();
 30a:	95 df       	rcall	.-214    	; 0x236 <Wait>
	__far_mem_write(LCD_CMD,0x06);	// Turn off shifting in LCD just case name is too long
 30c:	26 e0       	ldi	r18, 0x06	; 6
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	90 e1       	ldi	r25, 0x10	; 16
 312:	a7 e4       	ldi	r26, 0x47	; 71
 314:	b0 e0       	ldi	r27, 0x00	; 0
 316:	0b b6       	in	r0, 0x3b	; 59
 318:	ab bf       	out	0x3b, r26	; 59
 31a:	fc 01       	movw	r30, r24
 31c:	20 83       	st	Z, r18
 31e:	0b be       	out	0x3b, r0	; 59
 320:	08 95       	ret

00000322 <EBI_init>:
* Inputs:	
* Output:	
************************************************************************************/
void EBI_init()
{
	PORTH.DIR = 0x37;       // Enable RE, WE, CS0, CS1, ALE1
 322:	e0 ee       	ldi	r30, 0xE0	; 224
 324:	f6 e0       	ldi	r31, 0x06	; 6
 326:	87 e3       	ldi	r24, 0x37	; 55
 328:	80 83       	st	Z, r24
	PORTH.OUT = 0x33;		// Defaults: RE=H, WE=H, CS0=H, CS1=H, ALE1=0
 32a:	83 e3       	ldi	r24, 0x33	; 51
 32c:	84 83       	std	Z+4, r24	; 0x04
	PORTK.DIR = 0xFF;       // Enable Address 7:0 (outputs)
 32e:	8f ef       	ldi	r24, 0xFF	; 255
 330:	80 93 20 07 	sts	0x0720, r24
	// Do not need to set PortJ to outputs
	
	EBI.CTRL = EBI_SRMODE_ALE1_gc | EBI_IFMODE_3PORT_gc;            // ALE1 multiplexing, 3 port configuration
 334:	e0 e4       	ldi	r30, 0x40	; 64
 336:	f4 e0       	ldi	r31, 0x04	; 4
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	80 83       	st	Z, r24

	EBI.CS0.BASEADDRH = (uint8_t) (CS0_Start>>16) & 0xFF;
 33c:	13 8a       	std	Z+19, r1	; 0x13
	EBI.CS0.BASEADDRL = (uint8_t) (CS0_Start>>8) & 0xFF;            // Set CS0 range to 0x008000 - 0x009FFF
 33e:	80 e8       	ldi	r24, 0x80	; 128
 340:	82 8b       	std	Z+18, r24	; 0x12
	EBI.CS0.CTRLA = EBI_CS_MODE_SRAM_gc | EBI_CS_ASPACE_8KB_gc;	    // SRAM mode, 8k address space
 342:	85 e1       	ldi	r24, 0x15	; 21
 344:	80 8b       	std	Z+16, r24	; 0x10

	// BASEADDR is 16 bit (word) register. C interface allows you to set low and high parts with 1
	// instruction instead of the previous two
	EBI.CS1.BASEADDR = (uint16_t) (CS1_Start>>8) & 0xFFFF;          // Set CS1 range to 0x370000 - 0x37FFFF
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	97 e4       	ldi	r25, 0x47	; 71
 34a:	86 8b       	std	Z+22, r24	; 0x16
 34c:	97 8b       	std	Z+23, r25	; 0x17
	EBI.CS1.CTRLA = EBI_CS_MODE_SRAM_gc | EBI_CS_ASPACE_64KB_gc;	// SRAM mode, 64k address space
 34e:	81 e2       	ldi	r24, 0x21	; 33
 350:	84 8b       	std	Z+20, r24	; 0x14
 352:	08 95       	ret

00000354 <main>:
}

int main(void)
{	
	EBI_init();
 354:	e6 df       	rcall	.-52     	; 0x322 <EBI_init>
	LCD_init();
 356:	b8 df       	rcall	.-144    	; 0x2c8 <LCD_init>
	sendStr("Kinderley\nCharles");
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	90 e2       	ldi	r25, 0x20	; 32
 35c:	78 df       	rcall	.-272    	; 0x24e <sendStr>
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	08 95       	ret

00000364 <_exit>:
 364:	f8 94       	cli

00000366 <__stop_program>:
 366:	ff cf       	rjmp	.-2      	; 0x366 <__stop_program>
